// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ArangoTask struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
}

// NewArangoTask registers a new resource with the given unique name, arguments, and options.
func NewArangoTask(ctx *pulumi.Context,
	name string, args *ArangoTaskArgs, opts ...pulumi.ResourceOption) (*ArangoTask, error) {
	if args == nil {
		args = &ArangoTaskArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("analytics.arangodb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("GraphAnalyticsEngine")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ArangoTask
	err := ctx.RegisterResource("kubernetes:database.arangodb.com/v2alpha1:ArangoTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArangoTask gets an existing ArangoTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArangoTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArangoTaskState, opts ...pulumi.ResourceOption) (*ArangoTask, error) {
	var resource ArangoTask
	err := ctx.ReadResource("kubernetes:database.arangodb.com/v2alpha1:ArangoTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArangoTask resources.
type arangoTaskState struct {
}

type ArangoTaskState struct {
}

func (ArangoTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*arangoTaskState)(nil)).Elem()
}

type arangoTaskArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ArangoTask resource.
type ArangoTaskArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
}

func (ArangoTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*arangoTaskArgs)(nil)).Elem()
}

type ArangoTaskInput interface {
	pulumi.Input

	ToArangoTaskOutput() ArangoTaskOutput
	ToArangoTaskOutputWithContext(ctx context.Context) ArangoTaskOutput
}

func (*ArangoTask) ElementType() reflect.Type {
	return reflect.TypeOf((**ArangoTask)(nil)).Elem()
}

func (i *ArangoTask) ToArangoTaskOutput() ArangoTaskOutput {
	return i.ToArangoTaskOutputWithContext(context.Background())
}

func (i *ArangoTask) ToArangoTaskOutputWithContext(ctx context.Context) ArangoTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArangoTaskOutput)
}

type ArangoTaskOutput struct{ *pulumi.OutputState }

func (ArangoTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArangoTask)(nil)).Elem()
}

func (o ArangoTaskOutput) ToArangoTaskOutput() ArangoTaskOutput {
	return o
}

func (o ArangoTaskOutput) ToArangoTaskOutputWithContext(ctx context.Context) ArangoTaskOutput {
	return o
}

func (o ArangoTaskOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArangoTask) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ArangoTaskOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArangoTask) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ArangoTaskOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ArangoTask) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArangoTaskInput)(nil)).Elem(), &ArangoTask{})
	pulumi.RegisterOutputType(ArangoTaskOutput{})
}
