// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ImageCatalog is the Schema for the imagecatalogs API
type ImageCatalog struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Specification of the desired behavior of the ImageCatalog.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ImageCatalogSpecOutput `pulumi:"spec"`
}

// NewImageCatalog registers a new resource with the given unique name, arguments, and options.
func NewImageCatalog(ctx *pulumi.Context,
	name string, args *ImageCatalogArgs, opts ...pulumi.ResourceOption) (*ImageCatalog, error) {
	if args == nil {
		args = &ImageCatalogArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ImageCatalog")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImageCatalog
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ImageCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageCatalog gets an existing ImageCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageCatalogState, opts ...pulumi.ResourceOption) (*ImageCatalog, error) {
	var resource ImageCatalog
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ImageCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageCatalog resources.
type imageCatalogState struct {
}

type ImageCatalogState struct {
}

func (ImageCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCatalogState)(nil)).Elem()
}

type imageCatalogArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the ImageCatalog.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ImageCatalogSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ImageCatalog resource.
type ImageCatalogArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Specification of the desired behavior of the ImageCatalog.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ImageCatalogSpecPtrInput
}

func (ImageCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCatalogArgs)(nil)).Elem()
}

type ImageCatalogInput interface {
	pulumi.Input

	ToImageCatalogOutput() ImageCatalogOutput
	ToImageCatalogOutputWithContext(ctx context.Context) ImageCatalogOutput
}

func (*ImageCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCatalog)(nil)).Elem()
}

func (i *ImageCatalog) ToImageCatalogOutput() ImageCatalogOutput {
	return i.ToImageCatalogOutputWithContext(context.Background())
}

func (i *ImageCatalog) ToImageCatalogOutputWithContext(ctx context.Context) ImageCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogOutput)
}

type ImageCatalogOutput struct{ *pulumi.OutputState }

func (ImageCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCatalog)(nil)).Elem()
}

func (o ImageCatalogOutput) ToImageCatalogOutput() ImageCatalogOutput {
	return o
}

func (o ImageCatalogOutput) ToImageCatalogOutputWithContext(ctx context.Context) ImageCatalogOutput {
	return o
}

func (o ImageCatalogOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageCatalog) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ImageCatalogOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageCatalog) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ImageCatalogOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ImageCatalog) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Specification of the desired behavior of the ImageCatalog.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ImageCatalogOutput) Spec() ImageCatalogSpecOutput {
	return o.ApplyT(func(v *ImageCatalog) ImageCatalogSpecOutput { return v.Spec }).(ImageCatalogSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogInput)(nil)).Elem(), &ImageCatalog{})
	pulumi.RegisterOutputType(ImageCatalogOutput{})
}
