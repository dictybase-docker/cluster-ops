// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Pooler is the Schema for the poolers API
type Pooler struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Specification of the desired behavior of the Pooler.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PoolerSpecOutput `pulumi:"spec"`
	// Most recently observed status of the Pooler. This data may not be up to
	// date. Populated by the system. Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PoolerStatusPtrOutput `pulumi:"status"`
}

// NewPooler registers a new resource with the given unique name, arguments, and options.
func NewPooler(ctx *pulumi.Context,
	name string, args *PoolerArgs, opts ...pulumi.ResourceOption) (*Pooler, error) {
	if args == nil {
		args = &PoolerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("Pooler")
	if args.Spec != nil {
		args.Spec = args.Spec.ToPoolerSpecPtrOutput().ApplyT(func(v *PoolerSpec) *PoolerSpec { return v.Defaults() }).(PoolerSpecPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Pooler
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:Pooler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPooler gets an existing Pooler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPooler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolerState, opts ...pulumi.ResourceOption) (*Pooler, error) {
	var resource Pooler
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:Pooler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pooler resources.
type poolerState struct {
}

type PoolerState struct {
}

func (PoolerState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerState)(nil)).Elem()
}

type poolerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the Pooler.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *PoolerSpec `pulumi:"spec"`
	// Most recently observed status of the Pooler. This data may not be up to
	// date. Populated by the system. Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *PoolerStatus `pulumi:"status"`
}

// The set of arguments for constructing a Pooler resource.
type PoolerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Specification of the desired behavior of the Pooler.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec PoolerSpecPtrInput
	// Most recently observed status of the Pooler. This data may not be up to
	// date. Populated by the system. Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status PoolerStatusPtrInput
}

func (PoolerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerArgs)(nil)).Elem()
}

type PoolerInput interface {
	pulumi.Input

	ToPoolerOutput() PoolerOutput
	ToPoolerOutputWithContext(ctx context.Context) PoolerOutput
}

func (*Pooler) ElementType() reflect.Type {
	return reflect.TypeOf((**Pooler)(nil)).Elem()
}

func (i *Pooler) ToPoolerOutput() PoolerOutput {
	return i.ToPoolerOutputWithContext(context.Background())
}

func (i *Pooler) ToPoolerOutputWithContext(ctx context.Context) PoolerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerOutput)
}

type PoolerOutput struct{ *pulumi.OutputState }

func (PoolerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pooler)(nil)).Elem()
}

func (o PoolerOutput) ToPoolerOutput() PoolerOutput {
	return o
}

func (o PoolerOutput) ToPoolerOutputWithContext(ctx context.Context) PoolerOutput {
	return o
}

func (o PoolerOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pooler) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PoolerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pooler) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PoolerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Pooler) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Specification of the desired behavior of the Pooler.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PoolerOutput) Spec() PoolerSpecOutput {
	return o.ApplyT(func(v *Pooler) PoolerSpecOutput { return v.Spec }).(PoolerSpecOutput)
}

// Most recently observed status of the Pooler. This data may not be up to
// date. Populated by the system. Read-only.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o PoolerOutput) Status() PoolerStatusPtrOutput {
	return o.ApplyT(func(v *Pooler) PoolerStatusPtrOutput { return v.Status }).(PoolerStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerInput)(nil)).Elem(), &Pooler{})
	pulumi.RegisterOutputType(PoolerOutput{})
}
