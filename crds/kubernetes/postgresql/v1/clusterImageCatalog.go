// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterImageCatalog is the Schema for the clusterimagecatalogs API
type ClusterImageCatalog struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// Specification of the desired behavior of the ClusterImageCatalog.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterImageCatalogSpecOutput `pulumi:"spec"`
}

// NewClusterImageCatalog registers a new resource with the given unique name, arguments, and options.
func NewClusterImageCatalog(ctx *pulumi.Context,
	name string, args *ClusterImageCatalogArgs, opts ...pulumi.ResourceOption) (*ClusterImageCatalog, error) {
	if args == nil {
		args = &ClusterImageCatalogArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ClusterImageCatalog")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterImageCatalog
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterImageCatalog gets an existing ClusterImageCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterImageCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterImageCatalogState, opts ...pulumi.ResourceOption) (*ClusterImageCatalog, error) {
	var resource ClusterImageCatalog
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterImageCatalog resources.
type clusterImageCatalogState struct {
}

type ClusterImageCatalogState struct {
}

func (ClusterImageCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterImageCatalogState)(nil)).Elem()
}

type clusterImageCatalogArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the ClusterImageCatalog.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec *ClusterImageCatalogSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterImageCatalog resource.
type ClusterImageCatalogArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Specification of the desired behavior of the ClusterImageCatalog.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec ClusterImageCatalogSpecPtrInput
}

func (ClusterImageCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterImageCatalogArgs)(nil)).Elem()
}

type ClusterImageCatalogInput interface {
	pulumi.Input

	ToClusterImageCatalogOutput() ClusterImageCatalogOutput
	ToClusterImageCatalogOutputWithContext(ctx context.Context) ClusterImageCatalogOutput
}

func (*ClusterImageCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterImageCatalog)(nil)).Elem()
}

func (i *ClusterImageCatalog) ToClusterImageCatalogOutput() ClusterImageCatalogOutput {
	return i.ToClusterImageCatalogOutputWithContext(context.Background())
}

func (i *ClusterImageCatalog) ToClusterImageCatalogOutputWithContext(ctx context.Context) ClusterImageCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterImageCatalogOutput)
}

type ClusterImageCatalogOutput struct{ *pulumi.OutputState }

func (ClusterImageCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterImageCatalog)(nil)).Elem()
}

func (o ClusterImageCatalogOutput) ToClusterImageCatalogOutput() ClusterImageCatalogOutput {
	return o
}

func (o ClusterImageCatalogOutput) ToClusterImageCatalogOutputWithContext(ctx context.Context) ClusterImageCatalogOutput {
	return o
}

func (o ClusterImageCatalogOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterImageCatalog) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ClusterImageCatalogOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterImageCatalog) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ClusterImageCatalogOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ClusterImageCatalog) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

// Specification of the desired behavior of the ClusterImageCatalog.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o ClusterImageCatalogOutput) Spec() ClusterImageCatalogSpecOutput {
	return o.ApplyT(func(v *ClusterImageCatalog) ClusterImageCatalogSpecOutput { return v.Spec }).(ClusterImageCatalogSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterImageCatalogInput)(nil)).Elem(), &ClusterImageCatalog{})
	pulumi.RegisterOutputType(ClusterImageCatalogOutput{})
}
