// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Redis is the Schema for the redis API
type RedisType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// RedisSpec defines the desired state of Redis
	Spec RedisSpec `pulumi:"spec"`
	// RedisStatus defines the observed state of Redis
	Status map[string]interface{} `pulumi:"status"`
}

// Defaults sets the appropriate defaults for RedisType
func (val *RedisType) Defaults() *RedisType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Spec = *tmp.Spec.Defaults()

	return &tmp
}

type RedisMetadata struct {
}

// RedisSpec defines the desired state of Redis
type RedisSpec struct {
	// TLS Configuration for redis instances
	TLS *RedisSpecTls `pulumi:"TLS"`
	Acl *RedisSpecAcl `pulumi:"acl"`
	// Affinity is a group of affinity scheduling rules.
	Affinity *RedisSpecAffinity `pulumi:"affinity"`
	Env      []RedisSpecEnv     `pulumi:"env"`
	// InitContainer for each Redis pods
	InitContainer *RedisSpecInitContainer `pulumi:"initContainer"`
	// KubernetesConfig will be the JSON struct for Basic Redis Config
	KubernetesConfig RedisSpecKubernetesConfig `pulumi:"kubernetesConfig"`
	// Probe is a interface for ReadinessProbe and LivenessProbe
	LivenessProbe *RedisSpecLivenessProbe `pulumi:"livenessProbe"`
	NodeSelector  map[string]string       `pulumi:"nodeSelector"`
	// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
	PodSecurityContext *RedisSpecPodSecurityContext `pulumi:"podSecurityContext"`
	PriorityClassName  *string                      `pulumi:"priorityClassName"`
	// Probe is a interface for ReadinessProbe and LivenessProbe
	ReadinessProbe *RedisSpecReadinessProbe `pulumi:"readinessProbe"`
	// RedisConfig defines the external configuration of Redis
	RedisConfig *RedisSpecRedisConfig `pulumi:"redisConfig"`
	// RedisExporter interface will have the information for redis exporter related stuff
	RedisExporter *RedisSpecRedisExporter `pulumi:"redisExporter"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext    *RedisSpecSecurityContext `pulumi:"securityContext"`
	ServiceAccountName *string                   `pulumi:"serviceAccountName"`
	Sidecars           []RedisSpecSidecars       `pulumi:"sidecars"`
	// Storage is the inteface to add pvc and pv support in redis
	Storage                       *RedisSpecStorage      `pulumi:"storage"`
	TerminationGracePeriodSeconds *int                   `pulumi:"terminationGracePeriodSeconds"`
	Tolerations                   []RedisSpecTolerations `pulumi:"tolerations"`
}

// Defaults sets the appropriate defaults for RedisSpec
func (val *RedisSpec) Defaults() *RedisSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	return &tmp
}

// RedisSpecInput is an input type that accepts RedisSpecArgs and RedisSpecOutput values.
// You can construct a concrete instance of `RedisSpecInput` via:
//
//	RedisSpecArgs{...}
type RedisSpecInput interface {
	pulumi.Input

	ToRedisSpecOutput() RedisSpecOutput
	ToRedisSpecOutputWithContext(context.Context) RedisSpecOutput
}

// RedisSpec defines the desired state of Redis
type RedisSpecArgs struct {
	// TLS Configuration for redis instances
	TLS RedisSpecTlsPtrInput `pulumi:"TLS"`
	Acl RedisSpecAclPtrInput `pulumi:"acl"`
	// Affinity is a group of affinity scheduling rules.
	Affinity RedisSpecAffinityPtrInput `pulumi:"affinity"`
	Env      RedisSpecEnvArrayInput    `pulumi:"env"`
	// InitContainer for each Redis pods
	InitContainer RedisSpecInitContainerPtrInput `pulumi:"initContainer"`
	// KubernetesConfig will be the JSON struct for Basic Redis Config
	KubernetesConfig RedisSpecKubernetesConfigInput `pulumi:"kubernetesConfig"`
	// Probe is a interface for ReadinessProbe and LivenessProbe
	LivenessProbe RedisSpecLivenessProbePtrInput `pulumi:"livenessProbe"`
	NodeSelector  pulumi.StringMapInput          `pulumi:"nodeSelector"`
	// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
	PodSecurityContext RedisSpecPodSecurityContextPtrInput `pulumi:"podSecurityContext"`
	PriorityClassName  pulumi.StringPtrInput               `pulumi:"priorityClassName"`
	// Probe is a interface for ReadinessProbe and LivenessProbe
	ReadinessProbe RedisSpecReadinessProbePtrInput `pulumi:"readinessProbe"`
	// RedisConfig defines the external configuration of Redis
	RedisConfig RedisSpecRedisConfigPtrInput `pulumi:"redisConfig"`
	// RedisExporter interface will have the information for redis exporter related stuff
	RedisExporter RedisSpecRedisExporterPtrInput `pulumi:"redisExporter"`
	// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
	SecurityContext    RedisSpecSecurityContextPtrInput `pulumi:"securityContext"`
	ServiceAccountName pulumi.StringPtrInput            `pulumi:"serviceAccountName"`
	Sidecars           RedisSpecSidecarsArrayInput      `pulumi:"sidecars"`
	// Storage is the inteface to add pvc and pv support in redis
	Storage                       RedisSpecStoragePtrInput       `pulumi:"storage"`
	TerminationGracePeriodSeconds pulumi.IntPtrInput             `pulumi:"terminationGracePeriodSeconds"`
	Tolerations                   RedisSpecTolerationsArrayInput `pulumi:"tolerations"`
}

// Defaults sets the appropriate defaults for RedisSpecArgs
func (val *RedisSpecArgs) Defaults() *RedisSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (RedisSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpec)(nil)).Elem()
}

func (i RedisSpecArgs) ToRedisSpecOutput() RedisSpecOutput {
	return i.ToRedisSpecOutputWithContext(context.Background())
}

func (i RedisSpecArgs) ToRedisSpecOutputWithContext(ctx context.Context) RedisSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecOutput)
}

func (i RedisSpecArgs) ToRedisSpecPtrOutput() RedisSpecPtrOutput {
	return i.ToRedisSpecPtrOutputWithContext(context.Background())
}

func (i RedisSpecArgs) ToRedisSpecPtrOutputWithContext(ctx context.Context) RedisSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecOutput).ToRedisSpecPtrOutputWithContext(ctx)
}

// RedisSpecPtrInput is an input type that accepts RedisSpecArgs, RedisSpecPtr and RedisSpecPtrOutput values.
// You can construct a concrete instance of `RedisSpecPtrInput` via:
//
//	        RedisSpecArgs{...}
//
//	or:
//
//	        nil
type RedisSpecPtrInput interface {
	pulumi.Input

	ToRedisSpecPtrOutput() RedisSpecPtrOutput
	ToRedisSpecPtrOutputWithContext(context.Context) RedisSpecPtrOutput
}

type redisSpecPtrType RedisSpecArgs

func RedisSpecPtr(v *RedisSpecArgs) RedisSpecPtrInput {
	return (*redisSpecPtrType)(v)
}

func (*redisSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpec)(nil)).Elem()
}

func (i *redisSpecPtrType) ToRedisSpecPtrOutput() RedisSpecPtrOutput {
	return i.ToRedisSpecPtrOutputWithContext(context.Background())
}

func (i *redisSpecPtrType) ToRedisSpecPtrOutputWithContext(ctx context.Context) RedisSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPtrOutput)
}

// RedisSpec defines the desired state of Redis
type RedisSpecOutput struct{ *pulumi.OutputState }

func (RedisSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpec)(nil)).Elem()
}

func (o RedisSpecOutput) ToRedisSpecOutput() RedisSpecOutput {
	return o
}

func (o RedisSpecOutput) ToRedisSpecOutputWithContext(ctx context.Context) RedisSpecOutput {
	return o
}

func (o RedisSpecOutput) ToRedisSpecPtrOutput() RedisSpecPtrOutput {
	return o.ToRedisSpecPtrOutputWithContext(context.Background())
}

func (o RedisSpecOutput) ToRedisSpecPtrOutputWithContext(ctx context.Context) RedisSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpec) *RedisSpec {
		return &v
	}).(RedisSpecPtrOutput)
}

// TLS Configuration for redis instances
func (o RedisSpecOutput) TLS() RedisSpecTlsPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecTls { return v.TLS }).(RedisSpecTlsPtrOutput)
}

func (o RedisSpecOutput) Acl() RedisSpecAclPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecAcl { return v.Acl }).(RedisSpecAclPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
func (o RedisSpecOutput) Affinity() RedisSpecAffinityPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecAffinity { return v.Affinity }).(RedisSpecAffinityPtrOutput)
}

func (o RedisSpecOutput) Env() RedisSpecEnvArrayOutput {
	return o.ApplyT(func(v RedisSpec) []RedisSpecEnv { return v.Env }).(RedisSpecEnvArrayOutput)
}

// InitContainer for each Redis pods
func (o RedisSpecOutput) InitContainer() RedisSpecInitContainerPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecInitContainer { return v.InitContainer }).(RedisSpecInitContainerPtrOutput)
}

// KubernetesConfig will be the JSON struct for Basic Redis Config
func (o RedisSpecOutput) KubernetesConfig() RedisSpecKubernetesConfigOutput {
	return o.ApplyT(func(v RedisSpec) RedisSpecKubernetesConfig { return v.KubernetesConfig }).(RedisSpecKubernetesConfigOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
func (o RedisSpecOutput) LivenessProbe() RedisSpecLivenessProbePtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecLivenessProbe { return v.LivenessProbe }).(RedisSpecLivenessProbePtrOutput)
}

func (o RedisSpecOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpec) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
func (o RedisSpecOutput) PodSecurityContext() RedisSpecPodSecurityContextPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecPodSecurityContext { return v.PodSecurityContext }).(RedisSpecPodSecurityContextPtrOutput)
}

func (o RedisSpecOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpec) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
func (o RedisSpecOutput) ReadinessProbe() RedisSpecReadinessProbePtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecReadinessProbe { return v.ReadinessProbe }).(RedisSpecReadinessProbePtrOutput)
}

// RedisConfig defines the external configuration of Redis
func (o RedisSpecOutput) RedisConfig() RedisSpecRedisConfigPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecRedisConfig { return v.RedisConfig }).(RedisSpecRedisConfigPtrOutput)
}

// RedisExporter interface will have the information for redis exporter related stuff
func (o RedisSpecOutput) RedisExporter() RedisSpecRedisExporterPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecRedisExporter { return v.RedisExporter }).(RedisSpecRedisExporterPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
func (o RedisSpecOutput) SecurityContext() RedisSpecSecurityContextPtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecSecurityContext { return v.SecurityContext }).(RedisSpecSecurityContextPtrOutput)
}

func (o RedisSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

func (o RedisSpecOutput) Sidecars() RedisSpecSidecarsArrayOutput {
	return o.ApplyT(func(v RedisSpec) []RedisSpecSidecars { return v.Sidecars }).(RedisSpecSidecarsArrayOutput)
}

// Storage is the inteface to add pvc and pv support in redis
func (o RedisSpecOutput) Storage() RedisSpecStoragePtrOutput {
	return o.ApplyT(func(v RedisSpec) *RedisSpecStorage { return v.Storage }).(RedisSpecStoragePtrOutput)
}

func (o RedisSpecOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpec) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

func (o RedisSpecOutput) Tolerations() RedisSpecTolerationsArrayOutput {
	return o.ApplyT(func(v RedisSpec) []RedisSpecTolerations { return v.Tolerations }).(RedisSpecTolerationsArrayOutput)
}

type RedisSpecPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpec)(nil)).Elem()
}

func (o RedisSpecPtrOutput) ToRedisSpecPtrOutput() RedisSpecPtrOutput {
	return o
}

func (o RedisSpecPtrOutput) ToRedisSpecPtrOutputWithContext(ctx context.Context) RedisSpecPtrOutput {
	return o
}

func (o RedisSpecPtrOutput) Elem() RedisSpecOutput {
	return o.ApplyT(func(v *RedisSpec) RedisSpec {
		if v != nil {
			return *v
		}
		var ret RedisSpec
		return ret
	}).(RedisSpecOutput)
}

// TLS Configuration for redis instances
func (o RedisSpecPtrOutput) TLS() RedisSpecTlsPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecTls {
		if v == nil {
			return nil
		}
		return v.TLS
	}).(RedisSpecTlsPtrOutput)
}

func (o RedisSpecPtrOutput) Acl() RedisSpecAclPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecAcl {
		if v == nil {
			return nil
		}
		return v.Acl
	}).(RedisSpecAclPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
func (o RedisSpecPtrOutput) Affinity() RedisSpecAffinityPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecAffinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(RedisSpecAffinityPtrOutput)
}

func (o RedisSpecPtrOutput) Env() RedisSpecEnvArrayOutput {
	return o.ApplyT(func(v *RedisSpec) []RedisSpecEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(RedisSpecEnvArrayOutput)
}

// InitContainer for each Redis pods
func (o RedisSpecPtrOutput) InitContainer() RedisSpecInitContainerPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecInitContainer {
		if v == nil {
			return nil
		}
		return v.InitContainer
	}).(RedisSpecInitContainerPtrOutput)
}

// KubernetesConfig will be the JSON struct for Basic Redis Config
func (o RedisSpecPtrOutput) KubernetesConfig() RedisSpecKubernetesConfigPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecKubernetesConfig {
		if v == nil {
			return nil
		}
		return &v.KubernetesConfig
	}).(RedisSpecKubernetesConfigPtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
func (o RedisSpecPtrOutput) LivenessProbe() RedisSpecLivenessProbePtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecLivenessProbe {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(RedisSpecLivenessProbePtrOutput)
}

func (o RedisSpecPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
func (o RedisSpecPtrOutput) PodSecurityContext() RedisSpecPodSecurityContextPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecPodSecurityContext {
		if v == nil {
			return nil
		}
		return v.PodSecurityContext
	}).(RedisSpecPodSecurityContextPtrOutput)
}

func (o RedisSpecPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
func (o RedisSpecPtrOutput) ReadinessProbe() RedisSpecReadinessProbePtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecReadinessProbe {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(RedisSpecReadinessProbePtrOutput)
}

// RedisConfig defines the external configuration of Redis
func (o RedisSpecPtrOutput) RedisConfig() RedisSpecRedisConfigPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecRedisConfig {
		if v == nil {
			return nil
		}
		return v.RedisConfig
	}).(RedisSpecRedisConfigPtrOutput)
}

// RedisExporter interface will have the information for redis exporter related stuff
func (o RedisSpecPtrOutput) RedisExporter() RedisSpecRedisExporterPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecRedisExporter {
		if v == nil {
			return nil
		}
		return v.RedisExporter
	}).(RedisSpecRedisExporterPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
func (o RedisSpecPtrOutput) SecurityContext() RedisSpecSecurityContextPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecSecurityContext {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(RedisSpecSecurityContextPtrOutput)
}

func (o RedisSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

func (o RedisSpecPtrOutput) Sidecars() RedisSpecSidecarsArrayOutput {
	return o.ApplyT(func(v *RedisSpec) []RedisSpecSidecars {
		if v == nil {
			return nil
		}
		return v.Sidecars
	}).(RedisSpecSidecarsArrayOutput)
}

// Storage is the inteface to add pvc and pv support in redis
func (o RedisSpecPtrOutput) Storage() RedisSpecStoragePtrOutput {
	return o.ApplyT(func(v *RedisSpec) *RedisSpecStorage {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(RedisSpecStoragePtrOutput)
}

func (o RedisSpecPtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpec) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecPtrOutput) Tolerations() RedisSpecTolerationsArrayOutput {
	return o.ApplyT(func(v *RedisSpec) []RedisSpecTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(RedisSpecTolerationsArrayOutput)
}

type RedisSpecAcl struct {
	// Adapts a Secret into a volume.
	//  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
	Secret *RedisSpecAclSecret `pulumi:"secret"`
}

// RedisSpecAclInput is an input type that accepts RedisSpecAclArgs and RedisSpecAclOutput values.
// You can construct a concrete instance of `RedisSpecAclInput` via:
//
//	RedisSpecAclArgs{...}
type RedisSpecAclInput interface {
	pulumi.Input

	ToRedisSpecAclOutput() RedisSpecAclOutput
	ToRedisSpecAclOutputWithContext(context.Context) RedisSpecAclOutput
}

type RedisSpecAclArgs struct {
	// Adapts a Secret into a volume.
	//  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
	Secret RedisSpecAclSecretPtrInput `pulumi:"secret"`
}

func (RedisSpecAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAcl)(nil)).Elem()
}

func (i RedisSpecAclArgs) ToRedisSpecAclOutput() RedisSpecAclOutput {
	return i.ToRedisSpecAclOutputWithContext(context.Background())
}

func (i RedisSpecAclArgs) ToRedisSpecAclOutputWithContext(ctx context.Context) RedisSpecAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclOutput)
}

func (i RedisSpecAclArgs) ToRedisSpecAclPtrOutput() RedisSpecAclPtrOutput {
	return i.ToRedisSpecAclPtrOutputWithContext(context.Background())
}

func (i RedisSpecAclArgs) ToRedisSpecAclPtrOutputWithContext(ctx context.Context) RedisSpecAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclOutput).ToRedisSpecAclPtrOutputWithContext(ctx)
}

// RedisSpecAclPtrInput is an input type that accepts RedisSpecAclArgs, RedisSpecAclPtr and RedisSpecAclPtrOutput values.
// You can construct a concrete instance of `RedisSpecAclPtrInput` via:
//
//	        RedisSpecAclArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAclPtrInput interface {
	pulumi.Input

	ToRedisSpecAclPtrOutput() RedisSpecAclPtrOutput
	ToRedisSpecAclPtrOutputWithContext(context.Context) RedisSpecAclPtrOutput
}

type redisSpecAclPtrType RedisSpecAclArgs

func RedisSpecAclPtr(v *RedisSpecAclArgs) RedisSpecAclPtrInput {
	return (*redisSpecAclPtrType)(v)
}

func (*redisSpecAclPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAcl)(nil)).Elem()
}

func (i *redisSpecAclPtrType) ToRedisSpecAclPtrOutput() RedisSpecAclPtrOutput {
	return i.ToRedisSpecAclPtrOutputWithContext(context.Background())
}

func (i *redisSpecAclPtrType) ToRedisSpecAclPtrOutputWithContext(ctx context.Context) RedisSpecAclPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclPtrOutput)
}

type RedisSpecAclOutput struct{ *pulumi.OutputState }

func (RedisSpecAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAcl)(nil)).Elem()
}

func (o RedisSpecAclOutput) ToRedisSpecAclOutput() RedisSpecAclOutput {
	return o
}

func (o RedisSpecAclOutput) ToRedisSpecAclOutputWithContext(ctx context.Context) RedisSpecAclOutput {
	return o
}

func (o RedisSpecAclOutput) ToRedisSpecAclPtrOutput() RedisSpecAclPtrOutput {
	return o.ToRedisSpecAclPtrOutputWithContext(context.Background())
}

func (o RedisSpecAclOutput) ToRedisSpecAclPtrOutputWithContext(ctx context.Context) RedisSpecAclPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAcl) *RedisSpecAcl {
		return &v
	}).(RedisSpecAclPtrOutput)
}

// Adapts a Secret into a volume.
//
//	The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
func (o RedisSpecAclOutput) Secret() RedisSpecAclSecretPtrOutput {
	return o.ApplyT(func(v RedisSpecAcl) *RedisSpecAclSecret { return v.Secret }).(RedisSpecAclSecretPtrOutput)
}

type RedisSpecAclPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAclPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAcl)(nil)).Elem()
}

func (o RedisSpecAclPtrOutput) ToRedisSpecAclPtrOutput() RedisSpecAclPtrOutput {
	return o
}

func (o RedisSpecAclPtrOutput) ToRedisSpecAclPtrOutputWithContext(ctx context.Context) RedisSpecAclPtrOutput {
	return o
}

func (o RedisSpecAclPtrOutput) Elem() RedisSpecAclOutput {
	return o.ApplyT(func(v *RedisSpecAcl) RedisSpecAcl {
		if v != nil {
			return *v
		}
		var ret RedisSpecAcl
		return ret
	}).(RedisSpecAclOutput)
}

// Adapts a Secret into a volume.
//
//	The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
func (o RedisSpecAclPtrOutput) Secret() RedisSpecAclSecretPtrOutput {
	return o.ApplyT(func(v *RedisSpecAcl) *RedisSpecAclSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(RedisSpecAclSecretPtrOutput)
}

// Adapts a Secret into a volume.
//
//	The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type RedisSpecAclSecret struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []RedisSpecAclSecretItems `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// RedisSpecAclSecretInput is an input type that accepts RedisSpecAclSecretArgs and RedisSpecAclSecretOutput values.
// You can construct a concrete instance of `RedisSpecAclSecretInput` via:
//
//	RedisSpecAclSecretArgs{...}
type RedisSpecAclSecretInput interface {
	pulumi.Input

	ToRedisSpecAclSecretOutput() RedisSpecAclSecretOutput
	ToRedisSpecAclSecretOutputWithContext(context.Context) RedisSpecAclSecretOutput
}

// Adapts a Secret into a volume.
//
//	The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type RedisSpecAclSecretArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items RedisSpecAclSecretItemsArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (RedisSpecAclSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAclSecret)(nil)).Elem()
}

func (i RedisSpecAclSecretArgs) ToRedisSpecAclSecretOutput() RedisSpecAclSecretOutput {
	return i.ToRedisSpecAclSecretOutputWithContext(context.Background())
}

func (i RedisSpecAclSecretArgs) ToRedisSpecAclSecretOutputWithContext(ctx context.Context) RedisSpecAclSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclSecretOutput)
}

func (i RedisSpecAclSecretArgs) ToRedisSpecAclSecretPtrOutput() RedisSpecAclSecretPtrOutput {
	return i.ToRedisSpecAclSecretPtrOutputWithContext(context.Background())
}

func (i RedisSpecAclSecretArgs) ToRedisSpecAclSecretPtrOutputWithContext(ctx context.Context) RedisSpecAclSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclSecretOutput).ToRedisSpecAclSecretPtrOutputWithContext(ctx)
}

// RedisSpecAclSecretPtrInput is an input type that accepts RedisSpecAclSecretArgs, RedisSpecAclSecretPtr and RedisSpecAclSecretPtrOutput values.
// You can construct a concrete instance of `RedisSpecAclSecretPtrInput` via:
//
//	        RedisSpecAclSecretArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAclSecretPtrInput interface {
	pulumi.Input

	ToRedisSpecAclSecretPtrOutput() RedisSpecAclSecretPtrOutput
	ToRedisSpecAclSecretPtrOutputWithContext(context.Context) RedisSpecAclSecretPtrOutput
}

type redisSpecAclSecretPtrType RedisSpecAclSecretArgs

func RedisSpecAclSecretPtr(v *RedisSpecAclSecretArgs) RedisSpecAclSecretPtrInput {
	return (*redisSpecAclSecretPtrType)(v)
}

func (*redisSpecAclSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAclSecret)(nil)).Elem()
}

func (i *redisSpecAclSecretPtrType) ToRedisSpecAclSecretPtrOutput() RedisSpecAclSecretPtrOutput {
	return i.ToRedisSpecAclSecretPtrOutputWithContext(context.Background())
}

func (i *redisSpecAclSecretPtrType) ToRedisSpecAclSecretPtrOutputWithContext(ctx context.Context) RedisSpecAclSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclSecretPtrOutput)
}

// Adapts a Secret into a volume.
//
//	The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
type RedisSpecAclSecretOutput struct{ *pulumi.OutputState }

func (RedisSpecAclSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAclSecret)(nil)).Elem()
}

func (o RedisSpecAclSecretOutput) ToRedisSpecAclSecretOutput() RedisSpecAclSecretOutput {
	return o
}

func (o RedisSpecAclSecretOutput) ToRedisSpecAclSecretOutputWithContext(ctx context.Context) RedisSpecAclSecretOutput {
	return o
}

func (o RedisSpecAclSecretOutput) ToRedisSpecAclSecretPtrOutput() RedisSpecAclSecretPtrOutput {
	return o.ToRedisSpecAclSecretPtrOutputWithContext(context.Background())
}

func (o RedisSpecAclSecretOutput) ToRedisSpecAclSecretPtrOutputWithContext(ctx context.Context) RedisSpecAclSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAclSecret) *RedisSpecAclSecret {
		return &v
	}).(RedisSpecAclSecretPtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecAclSecretOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecAclSecret) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecAclSecretOutput) Items() RedisSpecAclSecretItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecAclSecret) []RedisSpecAclSecretItems { return v.Items }).(RedisSpecAclSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o RedisSpecAclSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecAclSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecAclSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecAclSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type RedisSpecAclSecretPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAclSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAclSecret)(nil)).Elem()
}

func (o RedisSpecAclSecretPtrOutput) ToRedisSpecAclSecretPtrOutput() RedisSpecAclSecretPtrOutput {
	return o
}

func (o RedisSpecAclSecretPtrOutput) ToRedisSpecAclSecretPtrOutputWithContext(ctx context.Context) RedisSpecAclSecretPtrOutput {
	return o
}

func (o RedisSpecAclSecretPtrOutput) Elem() RedisSpecAclSecretOutput {
	return o.ApplyT(func(v *RedisSpecAclSecret) RedisSpecAclSecret {
		if v != nil {
			return *v
		}
		var ret RedisSpecAclSecret
		return ret
	}).(RedisSpecAclSecretOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecAclSecretPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecAclSecret) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecAclSecretPtrOutput) Items() RedisSpecAclSecretItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAclSecret) []RedisSpecAclSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecAclSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o RedisSpecAclSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecAclSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecAclSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecAclSecret) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecAclSecretItems struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// RedisSpecAclSecretItemsInput is an input type that accepts RedisSpecAclSecretItemsArgs and RedisSpecAclSecretItemsOutput values.
// You can construct a concrete instance of `RedisSpecAclSecretItemsInput` via:
//
//	RedisSpecAclSecretItemsArgs{...}
type RedisSpecAclSecretItemsInput interface {
	pulumi.Input

	ToRedisSpecAclSecretItemsOutput() RedisSpecAclSecretItemsOutput
	ToRedisSpecAclSecretItemsOutputWithContext(context.Context) RedisSpecAclSecretItemsOutput
}

// Maps a string key to a path within a volume.
type RedisSpecAclSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecAclSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAclSecretItems)(nil)).Elem()
}

func (i RedisSpecAclSecretItemsArgs) ToRedisSpecAclSecretItemsOutput() RedisSpecAclSecretItemsOutput {
	return i.ToRedisSpecAclSecretItemsOutputWithContext(context.Background())
}

func (i RedisSpecAclSecretItemsArgs) ToRedisSpecAclSecretItemsOutputWithContext(ctx context.Context) RedisSpecAclSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclSecretItemsOutput)
}

// RedisSpecAclSecretItemsArrayInput is an input type that accepts RedisSpecAclSecretItemsArray and RedisSpecAclSecretItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAclSecretItemsArrayInput` via:
//
//	RedisSpecAclSecretItemsArray{ RedisSpecAclSecretItemsArgs{...} }
type RedisSpecAclSecretItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecAclSecretItemsArrayOutput() RedisSpecAclSecretItemsArrayOutput
	ToRedisSpecAclSecretItemsArrayOutputWithContext(context.Context) RedisSpecAclSecretItemsArrayOutput
}

type RedisSpecAclSecretItemsArray []RedisSpecAclSecretItemsInput

func (RedisSpecAclSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAclSecretItems)(nil)).Elem()
}

func (i RedisSpecAclSecretItemsArray) ToRedisSpecAclSecretItemsArrayOutput() RedisSpecAclSecretItemsArrayOutput {
	return i.ToRedisSpecAclSecretItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAclSecretItemsArray) ToRedisSpecAclSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecAclSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAclSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecAclSecretItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecAclSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAclSecretItems)(nil)).Elem()
}

func (o RedisSpecAclSecretItemsOutput) ToRedisSpecAclSecretItemsOutput() RedisSpecAclSecretItemsOutput {
	return o
}

func (o RedisSpecAclSecretItemsOutput) ToRedisSpecAclSecretItemsOutputWithContext(ctx context.Context) RedisSpecAclSecretItemsOutput {
	return o
}

// key is the key to project.
func (o RedisSpecAclSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAclSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecAclSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecAclSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o RedisSpecAclSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAclSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecAclSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAclSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAclSecretItems)(nil)).Elem()
}

func (o RedisSpecAclSecretItemsArrayOutput) ToRedisSpecAclSecretItemsArrayOutput() RedisSpecAclSecretItemsArrayOutput {
	return o
}

func (o RedisSpecAclSecretItemsArrayOutput) ToRedisSpecAclSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecAclSecretItemsArrayOutput {
	return o
}

func (o RedisSpecAclSecretItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecAclSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAclSecretItems {
		return vs[0].([]RedisSpecAclSecretItems)[vs[1].(int)]
	}).(RedisSpecAclSecretItemsOutput)
}

// Affinity is a group of affinity scheduling rules.
type RedisSpecAffinity struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity *RedisSpecAffinityNodeAffinity `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity *RedisSpecAffinityPodAffinity `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity *RedisSpecAffinityPodAntiAffinity `pulumi:"podAntiAffinity"`
}

// RedisSpecAffinityInput is an input type that accepts RedisSpecAffinityArgs and RedisSpecAffinityOutput values.
// You can construct a concrete instance of `RedisSpecAffinityInput` via:
//
//	RedisSpecAffinityArgs{...}
type RedisSpecAffinityInput interface {
	pulumi.Input

	ToRedisSpecAffinityOutput() RedisSpecAffinityOutput
	ToRedisSpecAffinityOutputWithContext(context.Context) RedisSpecAffinityOutput
}

// Affinity is a group of affinity scheduling rules.
type RedisSpecAffinityArgs struct {
	// Describes node affinity scheduling rules for the pod.
	NodeAffinity RedisSpecAffinityNodeAffinityPtrInput `pulumi:"nodeAffinity"`
	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	PodAffinity RedisSpecAffinityPodAffinityPtrInput `pulumi:"podAffinity"`
	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	PodAntiAffinity RedisSpecAffinityPodAntiAffinityPtrInput `pulumi:"podAntiAffinity"`
}

func (RedisSpecAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinity)(nil)).Elem()
}

func (i RedisSpecAffinityArgs) ToRedisSpecAffinityOutput() RedisSpecAffinityOutput {
	return i.ToRedisSpecAffinityOutputWithContext(context.Background())
}

func (i RedisSpecAffinityArgs) ToRedisSpecAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityOutput)
}

func (i RedisSpecAffinityArgs) ToRedisSpecAffinityPtrOutput() RedisSpecAffinityPtrOutput {
	return i.ToRedisSpecAffinityPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityArgs) ToRedisSpecAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityOutput).ToRedisSpecAffinityPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPtrInput is an input type that accepts RedisSpecAffinityArgs, RedisSpecAffinityPtr and RedisSpecAffinityPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPtrInput` via:
//
//	        RedisSpecAffinityArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPtrOutput() RedisSpecAffinityPtrOutput
	ToRedisSpecAffinityPtrOutputWithContext(context.Context) RedisSpecAffinityPtrOutput
}

type redisSpecAffinityPtrType RedisSpecAffinityArgs

func RedisSpecAffinityPtr(v *RedisSpecAffinityArgs) RedisSpecAffinityPtrInput {
	return (*redisSpecAffinityPtrType)(v)
}

func (*redisSpecAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinity)(nil)).Elem()
}

func (i *redisSpecAffinityPtrType) ToRedisSpecAffinityPtrOutput() RedisSpecAffinityPtrOutput {
	return i.ToRedisSpecAffinityPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPtrType) ToRedisSpecAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPtrOutput)
}

// Affinity is a group of affinity scheduling rules.
type RedisSpecAffinityOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityOutput) ToRedisSpecAffinityOutput() RedisSpecAffinityOutput {
	return o
}

func (o RedisSpecAffinityOutput) ToRedisSpecAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityOutput {
	return o
}

func (o RedisSpecAffinityOutput) ToRedisSpecAffinityPtrOutput() RedisSpecAffinityPtrOutput {
	return o.ToRedisSpecAffinityPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityOutput) ToRedisSpecAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinity) *RedisSpecAffinity {
		return &v
	}).(RedisSpecAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o RedisSpecAffinityOutput) NodeAffinity() RedisSpecAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinity) *RedisSpecAffinityNodeAffinity { return v.NodeAffinity }).(RedisSpecAffinityNodeAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o RedisSpecAffinityOutput) PodAffinity() RedisSpecAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinity) *RedisSpecAffinityPodAffinity { return v.PodAffinity }).(RedisSpecAffinityPodAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o RedisSpecAffinityOutput) PodAntiAffinity() RedisSpecAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinity) *RedisSpecAffinityPodAntiAffinity { return v.PodAntiAffinity }).(RedisSpecAffinityPodAntiAffinityPtrOutput)
}

type RedisSpecAffinityPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityPtrOutput) ToRedisSpecAffinityPtrOutput() RedisSpecAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityPtrOutput) ToRedisSpecAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityPtrOutput) Elem() RedisSpecAffinityOutput {
	return o.ApplyT(func(v *RedisSpecAffinity) RedisSpecAffinity {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinity
		return ret
	}).(RedisSpecAffinityOutput)
}

// Describes node affinity scheduling rules for the pod.
func (o RedisSpecAffinityPtrOutput) NodeAffinity() RedisSpecAffinityNodeAffinityPtrOutput {
	return o.ApplyT(func(v *RedisSpecAffinity) *RedisSpecAffinityNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinity
	}).(RedisSpecAffinityNodeAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
func (o RedisSpecAffinityPtrOutput) PodAffinity() RedisSpecAffinityPodAffinityPtrOutput {
	return o.ApplyT(func(v *RedisSpecAffinity) *RedisSpecAffinityPodAffinity {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(RedisSpecAffinityPodAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
func (o RedisSpecAffinityPtrOutput) PodAntiAffinity() RedisSpecAffinityPodAntiAffinityPtrOutput {
	return o.ApplyT(func(v *RedisSpecAffinity) *RedisSpecAffinityPodAntiAffinity {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(RedisSpecAffinityPodAntiAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type RedisSpecAffinityNodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// RedisSpecAffinityNodeAffinityInput is an input type that accepts RedisSpecAffinityNodeAffinityArgs and RedisSpecAffinityNodeAffinityOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityInput` via:
//
//	RedisSpecAffinityNodeAffinityArgs{...}
type RedisSpecAffinityNodeAffinityInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityOutput() RedisSpecAffinityNodeAffinityOutput
	ToRedisSpecAffinityNodeAffinityOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityOutput
}

// Describes node affinity scheduling rules for the pod.
type RedisSpecAffinityNodeAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
	RequiredDuringSchedulingIgnoredDuringExecution RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (RedisSpecAffinityNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinity)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityArgs) ToRedisSpecAffinityNodeAffinityOutput() RedisSpecAffinityNodeAffinityOutput {
	return i.ToRedisSpecAffinityNodeAffinityOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityArgs) ToRedisSpecAffinityNodeAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityOutput)
}

func (i RedisSpecAffinityNodeAffinityArgs) ToRedisSpecAffinityNodeAffinityPtrOutput() RedisSpecAffinityNodeAffinityPtrOutput {
	return i.ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityArgs) ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityOutput).ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(ctx)
}

// RedisSpecAffinityNodeAffinityPtrInput is an input type that accepts RedisSpecAffinityNodeAffinityArgs, RedisSpecAffinityNodeAffinityPtr and RedisSpecAffinityNodeAffinityPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPtrInput` via:
//
//	        RedisSpecAffinityNodeAffinityArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityNodeAffinityPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPtrOutput() RedisSpecAffinityNodeAffinityPtrOutput
	ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPtrOutput
}

type redisSpecAffinityNodeAffinityPtrType RedisSpecAffinityNodeAffinityArgs

func RedisSpecAffinityNodeAffinityPtr(v *RedisSpecAffinityNodeAffinityArgs) RedisSpecAffinityNodeAffinityPtrInput {
	return (*redisSpecAffinityNodeAffinityPtrType)(v)
}

func (*redisSpecAffinityNodeAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityNodeAffinity)(nil)).Elem()
}

func (i *redisSpecAffinityNodeAffinityPtrType) ToRedisSpecAffinityNodeAffinityPtrOutput() RedisSpecAffinityNodeAffinityPtrOutput {
	return i.ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityNodeAffinityPtrType) ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPtrOutput)
}

// Describes node affinity scheduling rules for the pod.
type RedisSpecAffinityNodeAffinityOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityOutput) ToRedisSpecAffinityNodeAffinityOutput() RedisSpecAffinityNodeAffinityOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityOutput) ToRedisSpecAffinityNodeAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityOutput) ToRedisSpecAffinityNodeAffinityPtrOutput() RedisSpecAffinityNodeAffinityPtrOutput {
	return o.ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityNodeAffinityOutput) ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityNodeAffinity) *RedisSpecAffinityNodeAffinity {
		return &v
	}).(RedisSpecAffinityNodeAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o RedisSpecAffinityNodeAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinity) []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o RedisSpecAffinityNodeAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinity) *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

type RedisSpecAffinityNodeAffinityPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityNodeAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPtrOutput) ToRedisSpecAffinityNodeAffinityPtrOutput() RedisSpecAffinityNodeAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPtrOutput) ToRedisSpecAffinityNodeAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPtrOutput) Elem() RedisSpecAffinityNodeAffinityOutput {
	return o.ApplyT(func(v *RedisSpecAffinityNodeAffinity) RedisSpecAffinityNodeAffinity {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityNodeAffinity
		return ret
	}).(RedisSpecAffinityNodeAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
func (o RedisSpecAffinityNodeAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityNodeAffinity) []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
func (o RedisSpecAffinityNodeAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyT(func(v *RedisSpecAffinityNodeAffinity) *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	// A node selector term, associated with the corresponding weight.
	Preference RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// A node selector term, associated with the corresponding weight.
	Preference RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput `pulumi:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// A node selector term, associated with the corresponding weight.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Preference() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
		return v.Preference
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput)
}

// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A node selector term, associated with the corresponding weight.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `pulumi:"matchFields"`
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{...}
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput
}

// A node selector term, associated with the corresponding weight.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput `pulumi:"matchFields"`
}

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput)
}

// A node selector term, associated with the corresponding weight.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) MatchExpressions() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput) MatchFields() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference) []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		return v.MatchFields
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{...}
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput)
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray{ RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{...} }
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput
}

type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
		return vs[0].([]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{...}
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput)
}

// RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput is an input type that accepts RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray and RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput` via:
//
//	RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray{ RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{...} }
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput
	ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput
}

type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray []RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return i.ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return o
}

// The label key that the selector applies to.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput() RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) ToRedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
		return vs[0].([]RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields)[vs[1].(int)]
	}).(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `pulumi:"nodeSelectorTerms"`
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput `pulumi:"nodeSelectorTerms"`
}

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput).ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx)
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs, RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtr and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput` via:
//
//	        RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput
}

type redisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs

func RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtr(v *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput {
	return (*redisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType)(v)
}

func (*redisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i *redisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrType) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return &v
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NodeSelectorTerms() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		return v.NodeSelectorTerms
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) Elem() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o.ApplyT(func(v *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
		return ret
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A list of node selector terms. The terms are ORed.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput) NodeSelectorTerms() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution) []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		if v == nil {
			return nil
		}
		return v.NodeSelectorTerms
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `pulumi:"matchFields"`
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{...}
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput `pulumi:"matchFields"`
}

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput)
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray{ RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{...} }
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput)
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return o
}

// A list of node selector requirements by node's labels.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) MatchExpressions() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms) []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput)
}

// A list of node selector requirements by node's fields.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput) MatchFields() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms) []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
		return v.MatchFields
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput)
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
		return vs[0].([]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms)[vs[1].(int)]
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{...}
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput)
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray{ RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{...} }
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
		return vs[0].([]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator string `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{...}
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator pulumi.StringInput `pulumi:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput)
}

// RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput is an input type that accepts RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray and RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput` via:
//
//	RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray{ RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{...} }
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput
	ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray []RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return i.ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput)
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return o
}

// The label key that the selector applies to.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)(nil)).Elem()
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput() RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) ToRedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput {
	return o
}

func (o RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
		return vs[0].([]RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields)[vs[1].(int)]
	}).(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type RedisSpecAffinityPodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// RedisSpecAffinityPodAffinityInput is an input type that accepts RedisSpecAffinityPodAffinityArgs and RedisSpecAffinityPodAffinityOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityInput` via:
//
//	RedisSpecAffinityPodAffinityArgs{...}
type RedisSpecAffinityPodAffinityInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityOutput() RedisSpecAffinityPodAffinityOutput
	ToRedisSpecAffinityPodAffinityOutputWithContext(context.Context) RedisSpecAffinityPodAffinityOutput
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type RedisSpecAffinityPodAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (RedisSpecAffinityPodAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinity)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityArgs) ToRedisSpecAffinityPodAffinityOutput() RedisSpecAffinityPodAffinityOutput {
	return i.ToRedisSpecAffinityPodAffinityOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityArgs) ToRedisSpecAffinityPodAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityOutput)
}

func (i RedisSpecAffinityPodAffinityArgs) ToRedisSpecAffinityPodAffinityPtrOutput() RedisSpecAffinityPodAffinityPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityArgs) ToRedisSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityOutput).ToRedisSpecAffinityPodAffinityPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAffinityPtrInput is an input type that accepts RedisSpecAffinityPodAffinityArgs, RedisSpecAffinityPodAffinityPtr and RedisSpecAffinityPodAffinityPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPtrInput` via:
//
//	        RedisSpecAffinityPodAffinityArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAffinityPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPtrOutput() RedisSpecAffinityPodAffinityPtrOutput
	ToRedisSpecAffinityPodAffinityPtrOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPtrOutput
}

type redisSpecAffinityPodAffinityPtrType RedisSpecAffinityPodAffinityArgs

func RedisSpecAffinityPodAffinityPtr(v *RedisSpecAffinityPodAffinityArgs) RedisSpecAffinityPodAffinityPtrInput {
	return (*redisSpecAffinityPodAffinityPtrType)(v)
}

func (*redisSpecAffinityPodAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinity)(nil)).Elem()
}

func (i *redisSpecAffinityPodAffinityPtrType) ToRedisSpecAffinityPodAffinityPtrOutput() RedisSpecAffinityPodAffinityPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAffinityPtrType) ToRedisSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPtrOutput)
}

// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
type RedisSpecAffinityPodAffinityOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityOutput) ToRedisSpecAffinityPodAffinityOutput() RedisSpecAffinityPodAffinityOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityOutput) ToRedisSpecAffinityPodAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityOutput) ToRedisSpecAffinityPodAffinityPtrOutput() RedisSpecAffinityPodAffinityPtrOutput {
	return o.ToRedisSpecAffinityPodAffinityPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAffinityOutput) ToRedisSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAffinity) *RedisSpecAffinityPodAffinity {
		return &v
	}).(RedisSpecAffinityPodAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o RedisSpecAffinityPodAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinity) []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o RedisSpecAffinityPodAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinity) []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

type RedisSpecAffinityPodAffinityPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPtrOutput) ToRedisSpecAffinityPodAffinityPtrOutput() RedisSpecAffinityPodAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPtrOutput) ToRedisSpecAffinityPodAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPtrOutput) Elem() RedisSpecAffinityPodAffinityOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinity) RedisSpecAffinityPodAffinity {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAffinity
		return ret
	}).(RedisSpecAffinityPodAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o RedisSpecAffinityPodAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinity) []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o RedisSpecAffinityPodAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinity) []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// Required. A pod affinity term, associated with the corresponding weight.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) PodAffinityTerm() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return v.PodAffinityTerm
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) LabelSelector() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return v.LabelSelector
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) NamespaceSelector() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return v.NamespaceSelector
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput).ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs, RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
}

type redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs

func RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput {
	return (*redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return &v
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchExpressions() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) Elem() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
		return ret
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{ RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels struct {
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput).ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs, RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
}

type redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs

func RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput {
	return (*redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return &v
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchExpressions() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) Elem() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
		return ret
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray and RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{ RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray []RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchLabels struct {
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{ RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) LabelSelector() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return v.LabelSelector
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NamespaceSelector() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return v.NamespaceSelector
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput).ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs, RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
}

type redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs

func RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput {
	return (*redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return &v
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchExpressions() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) Elem() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
		return ret
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{ RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels struct {
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput).ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs, RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
}

type redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs

func RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput {
	return (*redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return &v
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchExpressions() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) Elem() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
		return ret
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray and RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{ RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray []RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchLabels struct {
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type RedisSpecAffinityPodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// RedisSpecAffinityPodAntiAffinityInput is an input type that accepts RedisSpecAffinityPodAntiAffinityArgs and RedisSpecAffinityPodAntiAffinityOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityInput` via:
//
//	RedisSpecAffinityPodAntiAffinityArgs{...}
type RedisSpecAffinityPodAntiAffinityInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityOutput() RedisSpecAffinityPodAntiAffinityOutput
	ToRedisSpecAffinityPodAntiAffinityOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityOutput
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type RedisSpecAffinityPodAntiAffinityArgs struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput `pulumi:"requiredDuringSchedulingIgnoredDuringExecution"`
}

func (RedisSpecAffinityPodAntiAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityArgs) ToRedisSpecAffinityPodAntiAffinityOutput() RedisSpecAffinityPodAntiAffinityOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityArgs) ToRedisSpecAffinityPodAntiAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityOutput)
}

func (i RedisSpecAffinityPodAntiAffinityArgs) ToRedisSpecAffinityPodAntiAffinityPtrOutput() RedisSpecAffinityPodAntiAffinityPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityArgs) ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityOutput).ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAntiAffinityPtrInput is an input type that accepts RedisSpecAffinityPodAntiAffinityArgs, RedisSpecAffinityPodAntiAffinityPtr and RedisSpecAffinityPodAntiAffinityPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPtrInput` via:
//
//	        RedisSpecAffinityPodAntiAffinityArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAntiAffinityPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPtrOutput() RedisSpecAffinityPodAntiAffinityPtrOutput
	ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPtrOutput
}

type redisSpecAffinityPodAntiAffinityPtrType RedisSpecAffinityPodAntiAffinityArgs

func RedisSpecAffinityPodAntiAffinityPtr(v *RedisSpecAffinityPodAntiAffinityArgs) RedisSpecAffinityPodAntiAffinityPtrInput {
	return (*redisSpecAffinityPodAntiAffinityPtrType)(v)
}

func (*redisSpecAffinityPodAntiAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (i *redisSpecAffinityPodAntiAffinityPtrType) ToRedisSpecAffinityPodAntiAffinityPtrOutput() RedisSpecAffinityPodAntiAffinityPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAntiAffinityPtrType) ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPtrOutput)
}

// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
type RedisSpecAffinityPodAntiAffinityOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityOutput) ToRedisSpecAffinityPodAntiAffinityOutput() RedisSpecAffinityPodAntiAffinityOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityOutput) ToRedisSpecAffinityPodAntiAffinityOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityOutput) ToRedisSpecAffinityPodAntiAffinityPtrOutput() RedisSpecAffinityPodAntiAffinityPtrOutput {
	return o.ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAntiAffinityOutput) ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAntiAffinity) *RedisSpecAffinityPodAntiAffinity {
		return &v
	}).(RedisSpecAffinityPodAntiAffinityPtrOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o RedisSpecAffinityPodAntiAffinityOutput) PreferredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinity) []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o RedisSpecAffinityPodAntiAffinityOutput) RequiredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinity) []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

type RedisSpecAffinityPodAntiAffinityPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinity)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPtrOutput) ToRedisSpecAffinityPodAntiAffinityPtrOutput() RedisSpecAffinityPodAntiAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPtrOutput) ToRedisSpecAffinityPodAntiAffinityPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPtrOutput) Elem() RedisSpecAffinityPodAntiAffinityOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinity) RedisSpecAffinityPodAntiAffinity {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAntiAffinity
		return ret
	}).(RedisSpecAffinityPodAntiAffinityOutput)
}

// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
func (o RedisSpecAffinityPodAntiAffinityPtrOutput) PreferredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinity) []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.PreferredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
func (o RedisSpecAffinityPodAntiAffinityPtrOutput) RequiredDuringSchedulingIgnoredDuringExecution() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinity) []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		if v == nil {
			return nil
		}
		return v.RequiredDuringSchedulingIgnoredDuringExecution
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int `pulumi:"weight"`
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...}
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// Required. A pod affinity term, associated with the corresponding weight.
	PodAffinityTerm RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput `pulumi:"podAffinityTerm"`
	// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{ RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// Required. A pod affinity term, associated with the corresponding weight.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) PodAffinityTerm() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
		return v.PodAffinityTerm
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{...}
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput
}

// Required. A pod affinity term, associated with the corresponding weight.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput)
}

// Required. A pod affinity term, associated with the corresponding weight.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) LabelSelector() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return v.LabelSelector
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) NamespaceSelector() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return v.NamespaceSelector
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput).ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs, RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput
}

type redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs

func RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtr(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput {
	return (*redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		return &v
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) Elem() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
		return ret
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{ RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchLabels struct {
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput).ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs, RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput
}

type redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs

func RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtr(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput {
	return (*redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		return &v
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) Elem() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
		return ret
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray and RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{ RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray []RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchLabels struct {
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces []string `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `pulumi:"topologyKey"`
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...}
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput `pulumi:"labelSelector"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
	NamespaceSelector RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput `pulumi:"namespaceSelector"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey pulumi.StringInput `pulumi:"topologyKey"`
}

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{ RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{...} }
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput)
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return o
}

// A label query over a set of resources, in this case pods.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) LabelSelector() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return v.LabelSelector
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) NamespaceSelector() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return v.NamespaceSelector
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) []string {
		return v.Namespaces
	}).(pulumi.StringArrayOutput)
}

// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput) TopologyKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution) string {
		return v.TopologyKey
	}).(pulumi.StringOutput)
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
		return vs[0].([]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution)[vs[1].(int)]
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput).ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs, RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput
}

type redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs

func RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtr(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput {
	return (*redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// A label query over a set of resources, in this case pods.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		return &v
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) Elem() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
		return ret
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{ RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchLabels struct {
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput).ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx)
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs, RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput` via:
//
//	        RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput
}

type redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs

func RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtr(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput {
	return (*redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType)(v)
}

func (*redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (i *redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrType) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		return &v
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) Elem() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
		return ret
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchExpressions() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...}
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray and RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{ RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{...} }
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
	ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray []RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput() RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) ToRedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
		return vs[0].([]RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchLabels struct {
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *RedisSpecEnvValueFrom `pulumi:"valueFrom"`
}

// RedisSpecEnvInput is an input type that accepts RedisSpecEnvArgs and RedisSpecEnvOutput values.
// You can construct a concrete instance of `RedisSpecEnvInput` via:
//
//	RedisSpecEnvArgs{...}
type RedisSpecEnvInput interface {
	pulumi.Input

	ToRedisSpecEnvOutput() RedisSpecEnvOutput
	ToRedisSpecEnvOutputWithContext(context.Context) RedisSpecEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom RedisSpecEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (RedisSpecEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnv)(nil)).Elem()
}

func (i RedisSpecEnvArgs) ToRedisSpecEnvOutput() RedisSpecEnvOutput {
	return i.ToRedisSpecEnvOutputWithContext(context.Background())
}

func (i RedisSpecEnvArgs) ToRedisSpecEnvOutputWithContext(ctx context.Context) RedisSpecEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvOutput)
}

// RedisSpecEnvArrayInput is an input type that accepts RedisSpecEnvArray and RedisSpecEnvArrayOutput values.
// You can construct a concrete instance of `RedisSpecEnvArrayInput` via:
//
//	RedisSpecEnvArray{ RedisSpecEnvArgs{...} }
type RedisSpecEnvArrayInput interface {
	pulumi.Input

	ToRedisSpecEnvArrayOutput() RedisSpecEnvArrayOutput
	ToRedisSpecEnvArrayOutputWithContext(context.Context) RedisSpecEnvArrayOutput
}

type RedisSpecEnvArray []RedisSpecEnvInput

func (RedisSpecEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecEnv)(nil)).Elem()
}

func (i RedisSpecEnvArray) ToRedisSpecEnvArrayOutput() RedisSpecEnvArrayOutput {
	return i.ToRedisSpecEnvArrayOutputWithContext(context.Background())
}

func (i RedisSpecEnvArray) ToRedisSpecEnvArrayOutputWithContext(ctx context.Context) RedisSpecEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecEnvOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnv)(nil)).Elem()
}

func (o RedisSpecEnvOutput) ToRedisSpecEnvOutput() RedisSpecEnvOutput {
	return o
}

func (o RedisSpecEnvOutput) ToRedisSpecEnvOutputWithContext(ctx context.Context) RedisSpecEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o RedisSpecEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o RedisSpecEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o RedisSpecEnvOutput) ValueFrom() RedisSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v RedisSpecEnv) *RedisSpecEnvValueFrom { return v.ValueFrom }).(RedisSpecEnvValueFromPtrOutput)
}

type RedisSpecEnvArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecEnv)(nil)).Elem()
}

func (o RedisSpecEnvArrayOutput) ToRedisSpecEnvArrayOutput() RedisSpecEnvArrayOutput {
	return o
}

func (o RedisSpecEnvArrayOutput) ToRedisSpecEnvArrayOutputWithContext(ctx context.Context) RedisSpecEnvArrayOutput {
	return o
}

func (o RedisSpecEnvArrayOutput) Index(i pulumi.IntInput) RedisSpecEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecEnv {
		return vs[0].([]RedisSpecEnv)[vs[1].(int)]
	}).(RedisSpecEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *RedisSpecEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *RedisSpecEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *RedisSpecEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *RedisSpecEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// RedisSpecEnvValueFromInput is an input type that accepts RedisSpecEnvValueFromArgs and RedisSpecEnvValueFromOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromInput` via:
//
//	RedisSpecEnvValueFromArgs{...}
type RedisSpecEnvValueFromInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromOutput() RedisSpecEnvValueFromOutput
	ToRedisSpecEnvValueFromOutputWithContext(context.Context) RedisSpecEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef RedisSpecEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef RedisSpecEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef RedisSpecEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef RedisSpecEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (RedisSpecEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFrom)(nil)).Elem()
}

func (i RedisSpecEnvValueFromArgs) ToRedisSpecEnvValueFromOutput() RedisSpecEnvValueFromOutput {
	return i.ToRedisSpecEnvValueFromOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromArgs) ToRedisSpecEnvValueFromOutputWithContext(ctx context.Context) RedisSpecEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromOutput)
}

func (i RedisSpecEnvValueFromArgs) ToRedisSpecEnvValueFromPtrOutput() RedisSpecEnvValueFromPtrOutput {
	return i.ToRedisSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromArgs) ToRedisSpecEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromOutput).ToRedisSpecEnvValueFromPtrOutputWithContext(ctx)
}

// RedisSpecEnvValueFromPtrInput is an input type that accepts RedisSpecEnvValueFromArgs, RedisSpecEnvValueFromPtr and RedisSpecEnvValueFromPtrOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromPtrInput` via:
//
//	        RedisSpecEnvValueFromArgs{...}
//
//	or:
//
//	        nil
type RedisSpecEnvValueFromPtrInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromPtrOutput() RedisSpecEnvValueFromPtrOutput
	ToRedisSpecEnvValueFromPtrOutputWithContext(context.Context) RedisSpecEnvValueFromPtrOutput
}

type redisSpecEnvValueFromPtrType RedisSpecEnvValueFromArgs

func RedisSpecEnvValueFromPtr(v *RedisSpecEnvValueFromArgs) RedisSpecEnvValueFromPtrInput {
	return (*redisSpecEnvValueFromPtrType)(v)
}

func (*redisSpecEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFrom)(nil)).Elem()
}

func (i *redisSpecEnvValueFromPtrType) ToRedisSpecEnvValueFromPtrOutput() RedisSpecEnvValueFromPtrOutput {
	return i.ToRedisSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *redisSpecEnvValueFromPtrType) ToRedisSpecEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecEnvValueFromOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecEnvValueFromOutput) ToRedisSpecEnvValueFromOutput() RedisSpecEnvValueFromOutput {
	return o
}

func (o RedisSpecEnvValueFromOutput) ToRedisSpecEnvValueFromOutputWithContext(ctx context.Context) RedisSpecEnvValueFromOutput {
	return o
}

func (o RedisSpecEnvValueFromOutput) ToRedisSpecEnvValueFromPtrOutput() RedisSpecEnvValueFromPtrOutput {
	return o.ToRedisSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (o RedisSpecEnvValueFromOutput) ToRedisSpecEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecEnvValueFrom) *RedisSpecEnvValueFrom {
		return &v
	}).(RedisSpecEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecEnvValueFromOutput) ConfigMapKeyRef() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFrom) *RedisSpecEnvValueFromConfigMapKeyRef { return v.ConfigMapKeyRef }).(RedisSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecEnvValueFromOutput) FieldRef() RedisSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFrom) *RedisSpecEnvValueFromFieldRef { return v.FieldRef }).(RedisSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecEnvValueFromOutput) ResourceFieldRef() RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFrom) *RedisSpecEnvValueFromResourceFieldRef { return v.ResourceFieldRef }).(RedisSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecEnvValueFromOutput) SecretKeyRef() RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFrom) *RedisSpecEnvValueFromSecretKeyRef { return v.SecretKeyRef }).(RedisSpecEnvValueFromSecretKeyRefPtrOutput)
}

type RedisSpecEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecEnvValueFromPtrOutput) ToRedisSpecEnvValueFromPtrOutput() RedisSpecEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromPtrOutput) ToRedisSpecEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromPtrOutput) Elem() RedisSpecEnvValueFromOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFrom) RedisSpecEnvValueFrom {
		if v != nil {
			return *v
		}
		var ret RedisSpecEnvValueFrom
		return ret
	}).(RedisSpecEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecEnvValueFromPtrOutput) ConfigMapKeyRef() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFrom) *RedisSpecEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(RedisSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecEnvValueFromPtrOutput) FieldRef() RedisSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFrom) *RedisSpecEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(RedisSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecEnvValueFromPtrOutput) ResourceFieldRef() RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFrom) *RedisSpecEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(RedisSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecEnvValueFromPtrOutput) SecretKeyRef() RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFrom) *RedisSpecEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(RedisSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecEnvValueFromConfigMapKeyRefInput is an input type that accepts RedisSpecEnvValueFromConfigMapKeyRefArgs and RedisSpecEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromConfigMapKeyRefInput` via:
//
//	RedisSpecEnvValueFromConfigMapKeyRefArgs{...}
type RedisSpecEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromConfigMapKeyRefOutput() RedisSpecEnvValueFromConfigMapKeyRefOutput
	ToRedisSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) RedisSpecEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type RedisSpecEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i RedisSpecEnvValueFromConfigMapKeyRefArgs) ToRedisSpecEnvValueFromConfigMapKeyRefOutput() RedisSpecEnvValueFromConfigMapKeyRefOutput {
	return i.ToRedisSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromConfigMapKeyRefArgs) ToRedisSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromConfigMapKeyRefOutput)
}

func (i RedisSpecEnvValueFromConfigMapKeyRefArgs) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromConfigMapKeyRefArgs) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromConfigMapKeyRefOutput).ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts RedisSpecEnvValueFromConfigMapKeyRefArgs, RedisSpecEnvValueFromConfigMapKeyRefPtr and RedisSpecEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromConfigMapKeyRefPtrInput` via:
//
//	        RedisSpecEnvValueFromConfigMapKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput
	ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) RedisSpecEnvValueFromConfigMapKeyRefPtrOutput
}

type redisSpecEnvValueFromConfigMapKeyRefPtrType RedisSpecEnvValueFromConfigMapKeyRefArgs

func RedisSpecEnvValueFromConfigMapKeyRefPtr(v *RedisSpecEnvValueFromConfigMapKeyRefArgs) RedisSpecEnvValueFromConfigMapKeyRefPtrInput {
	return (*redisSpecEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*redisSpecEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *redisSpecEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) ToRedisSpecEnvValueFromConfigMapKeyRefOutput() RedisSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) ToRedisSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecEnvValueFromConfigMapKeyRef) *RedisSpecEnvValueFromConfigMapKeyRef {
		return &v
	}).(RedisSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) Elem() RedisSpecEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromConfigMapKeyRef) RedisSpecEnvValueFromConfigMapKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecEnvValueFromConfigMapKeyRef
		return ret
	}).(RedisSpecEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// RedisSpecEnvValueFromFieldRefInput is an input type that accepts RedisSpecEnvValueFromFieldRefArgs and RedisSpecEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromFieldRefInput` via:
//
//	RedisSpecEnvValueFromFieldRefArgs{...}
type RedisSpecEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromFieldRefOutput() RedisSpecEnvValueFromFieldRefOutput
	ToRedisSpecEnvValueFromFieldRefOutputWithContext(context.Context) RedisSpecEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (RedisSpecEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i RedisSpecEnvValueFromFieldRefArgs) ToRedisSpecEnvValueFromFieldRefOutput() RedisSpecEnvValueFromFieldRefOutput {
	return i.ToRedisSpecEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromFieldRefArgs) ToRedisSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromFieldRefOutput)
}

func (i RedisSpecEnvValueFromFieldRefArgs) ToRedisSpecEnvValueFromFieldRefPtrOutput() RedisSpecEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromFieldRefArgs) ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromFieldRefOutput).ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecEnvValueFromFieldRefPtrInput is an input type that accepts RedisSpecEnvValueFromFieldRefArgs, RedisSpecEnvValueFromFieldRefPtr and RedisSpecEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromFieldRefPtrInput` via:
//
//	        RedisSpecEnvValueFromFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromFieldRefPtrOutput() RedisSpecEnvValueFromFieldRefPtrOutput
	ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(context.Context) RedisSpecEnvValueFromFieldRefPtrOutput
}

type redisSpecEnvValueFromFieldRefPtrType RedisSpecEnvValueFromFieldRefArgs

func RedisSpecEnvValueFromFieldRefPtr(v *RedisSpecEnvValueFromFieldRefArgs) RedisSpecEnvValueFromFieldRefPtrInput {
	return (*redisSpecEnvValueFromFieldRefPtrType)(v)
}

func (*redisSpecEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i *redisSpecEnvValueFromFieldRefPtrType) ToRedisSpecEnvValueFromFieldRefPtrOutput() RedisSpecEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecEnvValueFromFieldRefPtrType) ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromFieldRefOutput) ToRedisSpecEnvValueFromFieldRefOutput() RedisSpecEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecEnvValueFromFieldRefOutput) ToRedisSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecEnvValueFromFieldRefOutput) ToRedisSpecEnvValueFromFieldRefPtrOutput() RedisSpecEnvValueFromFieldRefPtrOutput {
	return o.ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecEnvValueFromFieldRefOutput) ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecEnvValueFromFieldRef) *RedisSpecEnvValueFromFieldRef {
		return &v
	}).(RedisSpecEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type RedisSpecEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromFieldRefPtrOutput) ToRedisSpecEnvValueFromFieldRefPtrOutput() RedisSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromFieldRefPtrOutput) ToRedisSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromFieldRefPtrOutput) Elem() RedisSpecEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromFieldRef) RedisSpecEnvValueFromFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecEnvValueFromFieldRef
		return ret
	}).(RedisSpecEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// RedisSpecEnvValueFromResourceFieldRefInput is an input type that accepts RedisSpecEnvValueFromResourceFieldRefArgs and RedisSpecEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromResourceFieldRefInput` via:
//
//	RedisSpecEnvValueFromResourceFieldRefArgs{...}
type RedisSpecEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromResourceFieldRefOutput() RedisSpecEnvValueFromResourceFieldRefOutput
	ToRedisSpecEnvValueFromResourceFieldRefOutputWithContext(context.Context) RedisSpecEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RedisSpecEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i RedisSpecEnvValueFromResourceFieldRefArgs) ToRedisSpecEnvValueFromResourceFieldRefOutput() RedisSpecEnvValueFromResourceFieldRefOutput {
	return i.ToRedisSpecEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromResourceFieldRefArgs) ToRedisSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromResourceFieldRefOutput)
}

func (i RedisSpecEnvValueFromResourceFieldRefArgs) ToRedisSpecEnvValueFromResourceFieldRefPtrOutput() RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromResourceFieldRefArgs) ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromResourceFieldRefOutput).ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecEnvValueFromResourceFieldRefPtrInput is an input type that accepts RedisSpecEnvValueFromResourceFieldRefArgs, RedisSpecEnvValueFromResourceFieldRefPtr and RedisSpecEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromResourceFieldRefPtrInput` via:
//
//	        RedisSpecEnvValueFromResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromResourceFieldRefPtrOutput() RedisSpecEnvValueFromResourceFieldRefPtrOutput
	ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) RedisSpecEnvValueFromResourceFieldRefPtrOutput
}

type redisSpecEnvValueFromResourceFieldRefPtrType RedisSpecEnvValueFromResourceFieldRefArgs

func RedisSpecEnvValueFromResourceFieldRefPtr(v *RedisSpecEnvValueFromResourceFieldRefArgs) RedisSpecEnvValueFromResourceFieldRefPtrInput {
	return (*redisSpecEnvValueFromResourceFieldRefPtrType)(v)
}

func (*redisSpecEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *redisSpecEnvValueFromResourceFieldRefPtrType) ToRedisSpecEnvValueFromResourceFieldRefPtrOutput() RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecEnvValueFromResourceFieldRefPtrType) ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromResourceFieldRefOutput) ToRedisSpecEnvValueFromResourceFieldRefOutput() RedisSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecEnvValueFromResourceFieldRefOutput) ToRedisSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecEnvValueFromResourceFieldRefOutput) ToRedisSpecEnvValueFromResourceFieldRefPtrOutput() RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecEnvValueFromResourceFieldRefOutput) ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecEnvValueFromResourceFieldRef) *RedisSpecEnvValueFromResourceFieldRef {
		return &v
	}).(RedisSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecEnvValueFromResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromResourceFieldRef) interface{} { return v.Divisor }).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type RedisSpecEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecEnvValueFromResourceFieldRefPtrOutput() RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromResourceFieldRefPtrOutput) Elem() RedisSpecEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromResourceFieldRef) RedisSpecEnvValueFromResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecEnvValueFromResourceFieldRef
		return ret
	}).(RedisSpecEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecEnvValueFromResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecEnvValueFromSecretKeyRefInput is an input type that accepts RedisSpecEnvValueFromSecretKeyRefArgs and RedisSpecEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromSecretKeyRefInput` via:
//
//	RedisSpecEnvValueFromSecretKeyRefArgs{...}
type RedisSpecEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromSecretKeyRefOutput() RedisSpecEnvValueFromSecretKeyRefOutput
	ToRedisSpecEnvValueFromSecretKeyRefOutputWithContext(context.Context) RedisSpecEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type RedisSpecEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i RedisSpecEnvValueFromSecretKeyRefArgs) ToRedisSpecEnvValueFromSecretKeyRefOutput() RedisSpecEnvValueFromSecretKeyRefOutput {
	return i.ToRedisSpecEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromSecretKeyRefArgs) ToRedisSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromSecretKeyRefOutput)
}

func (i RedisSpecEnvValueFromSecretKeyRefArgs) ToRedisSpecEnvValueFromSecretKeyRefPtrOutput() RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecEnvValueFromSecretKeyRefArgs) ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromSecretKeyRefOutput).ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecEnvValueFromSecretKeyRefPtrInput is an input type that accepts RedisSpecEnvValueFromSecretKeyRefArgs, RedisSpecEnvValueFromSecretKeyRefPtr and RedisSpecEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecEnvValueFromSecretKeyRefPtrInput` via:
//
//	        RedisSpecEnvValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecEnvValueFromSecretKeyRefPtrOutput() RedisSpecEnvValueFromSecretKeyRefPtrOutput
	ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) RedisSpecEnvValueFromSecretKeyRefPtrOutput
}

type redisSpecEnvValueFromSecretKeyRefPtrType RedisSpecEnvValueFromSecretKeyRefArgs

func RedisSpecEnvValueFromSecretKeyRefPtr(v *RedisSpecEnvValueFromSecretKeyRefArgs) RedisSpecEnvValueFromSecretKeyRefPtrInput {
	return (*redisSpecEnvValueFromSecretKeyRefPtrType)(v)
}

func (*redisSpecEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *redisSpecEnvValueFromSecretKeyRefPtrType) ToRedisSpecEnvValueFromSecretKeyRefPtrOutput() RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecEnvValueFromSecretKeyRefPtrType) ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromSecretKeyRefOutput) ToRedisSpecEnvValueFromSecretKeyRefOutput() RedisSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecEnvValueFromSecretKeyRefOutput) ToRedisSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecEnvValueFromSecretKeyRefOutput) ToRedisSpecEnvValueFromSecretKeyRefPtrOutput() RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecEnvValueFromSecretKeyRefOutput) ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecEnvValueFromSecretKeyRef) *RedisSpecEnvValueFromSecretKeyRef {
		return &v
	}).(RedisSpecEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecEnvValueFromSecretKeyRefPtrOutput() RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecEnvValueFromSecretKeyRefPtrOutput) Elem() RedisSpecEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromSecretKeyRef) RedisSpecEnvValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecEnvValueFromSecretKeyRef
		return ret
	}).(RedisSpecEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// InitContainer for each Redis pods
type RedisSpecInitContainer struct {
	Args    []string                    `pulumi:"args"`
	Command []string                    `pulumi:"command"`
	Enabled *bool                       `pulumi:"enabled"`
	Env     []RedisSpecInitContainerEnv `pulumi:"env"`
	Image   string                      `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *RedisSpecInitContainerResources `pulumi:"resources"`
}

// RedisSpecInitContainerInput is an input type that accepts RedisSpecInitContainerArgs and RedisSpecInitContainerOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerInput` via:
//
//	RedisSpecInitContainerArgs{...}
type RedisSpecInitContainerInput interface {
	pulumi.Input

	ToRedisSpecInitContainerOutput() RedisSpecInitContainerOutput
	ToRedisSpecInitContainerOutputWithContext(context.Context) RedisSpecInitContainerOutput
}

// InitContainer for each Redis pods
type RedisSpecInitContainerArgs struct {
	Args    pulumi.StringArrayInput             `pulumi:"args"`
	Command pulumi.StringArrayInput             `pulumi:"command"`
	Enabled pulumi.BoolPtrInput                 `pulumi:"enabled"`
	Env     RedisSpecInitContainerEnvArrayInput `pulumi:"env"`
	Image   pulumi.StringInput                  `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// ResourceRequirements describes the compute resource requirements.
	Resources RedisSpecInitContainerResourcesPtrInput `pulumi:"resources"`
}

func (RedisSpecInitContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainer)(nil)).Elem()
}

func (i RedisSpecInitContainerArgs) ToRedisSpecInitContainerOutput() RedisSpecInitContainerOutput {
	return i.ToRedisSpecInitContainerOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerArgs) ToRedisSpecInitContainerOutputWithContext(ctx context.Context) RedisSpecInitContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerOutput)
}

func (i RedisSpecInitContainerArgs) ToRedisSpecInitContainerPtrOutput() RedisSpecInitContainerPtrOutput {
	return i.ToRedisSpecInitContainerPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerArgs) ToRedisSpecInitContainerPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerOutput).ToRedisSpecInitContainerPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerPtrInput is an input type that accepts RedisSpecInitContainerArgs, RedisSpecInitContainerPtr and RedisSpecInitContainerPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerPtrInput` via:
//
//	        RedisSpecInitContainerArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerPtrOutput() RedisSpecInitContainerPtrOutput
	ToRedisSpecInitContainerPtrOutputWithContext(context.Context) RedisSpecInitContainerPtrOutput
}

type redisSpecInitContainerPtrType RedisSpecInitContainerArgs

func RedisSpecInitContainerPtr(v *RedisSpecInitContainerArgs) RedisSpecInitContainerPtrInput {
	return (*redisSpecInitContainerPtrType)(v)
}

func (*redisSpecInitContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainer)(nil)).Elem()
}

func (i *redisSpecInitContainerPtrType) ToRedisSpecInitContainerPtrOutput() RedisSpecInitContainerPtrOutput {
	return i.ToRedisSpecInitContainerPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerPtrType) ToRedisSpecInitContainerPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerPtrOutput)
}

// InitContainer for each Redis pods
type RedisSpecInitContainerOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainer)(nil)).Elem()
}

func (o RedisSpecInitContainerOutput) ToRedisSpecInitContainerOutput() RedisSpecInitContainerOutput {
	return o
}

func (o RedisSpecInitContainerOutput) ToRedisSpecInitContainerOutputWithContext(ctx context.Context) RedisSpecInitContainerOutput {
	return o
}

func (o RedisSpecInitContainerOutput) ToRedisSpecInitContainerPtrOutput() RedisSpecInitContainerPtrOutput {
	return o.ToRedisSpecInitContainerPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerOutput) ToRedisSpecInitContainerPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainer) *RedisSpecInitContainer {
		return &v
	}).(RedisSpecInitContainerPtrOutput)
}

func (o RedisSpecInitContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o RedisSpecInitContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o RedisSpecInitContainerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RedisSpecInitContainerOutput) Env() RedisSpecInitContainerEnvArrayOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) []RedisSpecInitContainerEnv { return v.Env }).(RedisSpecInitContainerEnvArrayOutput)
}

func (o RedisSpecInitContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) string { return v.Image }).(pulumi.StringOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecInitContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecInitContainerOutput) Resources() RedisSpecInitContainerResourcesPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainer) *RedisSpecInitContainerResources { return v.Resources }).(RedisSpecInitContainerResourcesPtrOutput)
}

type RedisSpecInitContainerPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainer)(nil)).Elem()
}

func (o RedisSpecInitContainerPtrOutput) ToRedisSpecInitContainerPtrOutput() RedisSpecInitContainerPtrOutput {
	return o
}

func (o RedisSpecInitContainerPtrOutput) ToRedisSpecInitContainerPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerPtrOutput {
	return o
}

func (o RedisSpecInitContainerPtrOutput) Elem() RedisSpecInitContainerOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) RedisSpecInitContainer {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainer
		return ret
	}).(RedisSpecInitContainerOutput)
}

func (o RedisSpecInitContainerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o RedisSpecInitContainerPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o RedisSpecInitContainerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RedisSpecInitContainerPtrOutput) Env() RedisSpecInitContainerEnvArrayOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) []RedisSpecInitContainerEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(RedisSpecInitContainerEnvArrayOutput)
}

func (o RedisSpecInitContainerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecInitContainerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecInitContainerPtrOutput) Resources() RedisSpecInitContainerResourcesPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainer) *RedisSpecInitContainerResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(RedisSpecInitContainerResourcesPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecInitContainerEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *RedisSpecInitContainerEnvValueFrom `pulumi:"valueFrom"`
}

// RedisSpecInitContainerEnvInput is an input type that accepts RedisSpecInitContainerEnvArgs and RedisSpecInitContainerEnvOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvInput` via:
//
//	RedisSpecInitContainerEnvArgs{...}
type RedisSpecInitContainerEnvInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvOutput() RedisSpecInitContainerEnvOutput
	ToRedisSpecInitContainerEnvOutputWithContext(context.Context) RedisSpecInitContainerEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecInitContainerEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom RedisSpecInitContainerEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (RedisSpecInitContainerEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnv)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvArgs) ToRedisSpecInitContainerEnvOutput() RedisSpecInitContainerEnvOutput {
	return i.ToRedisSpecInitContainerEnvOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvArgs) ToRedisSpecInitContainerEnvOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvOutput)
}

// RedisSpecInitContainerEnvArrayInput is an input type that accepts RedisSpecInitContainerEnvArray and RedisSpecInitContainerEnvArrayOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvArrayInput` via:
//
//	RedisSpecInitContainerEnvArray{ RedisSpecInitContainerEnvArgs{...} }
type RedisSpecInitContainerEnvArrayInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvArrayOutput() RedisSpecInitContainerEnvArrayOutput
	ToRedisSpecInitContainerEnvArrayOutputWithContext(context.Context) RedisSpecInitContainerEnvArrayOutput
}

type RedisSpecInitContainerEnvArray []RedisSpecInitContainerEnvInput

func (RedisSpecInitContainerEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecInitContainerEnv)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvArray) ToRedisSpecInitContainerEnvArrayOutput() RedisSpecInitContainerEnvArrayOutput {
	return i.ToRedisSpecInitContainerEnvArrayOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvArray) ToRedisSpecInitContainerEnvArrayOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecInitContainerEnvOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnv)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvOutput) ToRedisSpecInitContainerEnvOutput() RedisSpecInitContainerEnvOutput {
	return o
}

func (o RedisSpecInitContainerEnvOutput) ToRedisSpecInitContainerEnvOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o RedisSpecInitContainerEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o RedisSpecInitContainerEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o RedisSpecInitContainerEnvOutput) ValueFrom() RedisSpecInitContainerEnvValueFromPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnv) *RedisSpecInitContainerEnvValueFrom { return v.ValueFrom }).(RedisSpecInitContainerEnvValueFromPtrOutput)
}

type RedisSpecInitContainerEnvArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecInitContainerEnv)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvArrayOutput) ToRedisSpecInitContainerEnvArrayOutput() RedisSpecInitContainerEnvArrayOutput {
	return o
}

func (o RedisSpecInitContainerEnvArrayOutput) ToRedisSpecInitContainerEnvArrayOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvArrayOutput {
	return o
}

func (o RedisSpecInitContainerEnvArrayOutput) Index(i pulumi.IntInput) RedisSpecInitContainerEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecInitContainerEnv {
		return vs[0].([]RedisSpecInitContainerEnv)[vs[1].(int)]
	}).(RedisSpecInitContainerEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecInitContainerEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *RedisSpecInitContainerEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *RedisSpecInitContainerEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *RedisSpecInitContainerEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *RedisSpecInitContainerEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// RedisSpecInitContainerEnvValueFromInput is an input type that accepts RedisSpecInitContainerEnvValueFromArgs and RedisSpecInitContainerEnvValueFromOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromInput` via:
//
//	RedisSpecInitContainerEnvValueFromArgs{...}
type RedisSpecInitContainerEnvValueFromInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromOutput() RedisSpecInitContainerEnvValueFromOutput
	ToRedisSpecInitContainerEnvValueFromOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecInitContainerEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef RedisSpecInitContainerEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef RedisSpecInitContainerEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef RedisSpecInitContainerEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (RedisSpecInitContainerEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFrom)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvValueFromArgs) ToRedisSpecInitContainerEnvValueFromOutput() RedisSpecInitContainerEnvValueFromOutput {
	return i.ToRedisSpecInitContainerEnvValueFromOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromArgs) ToRedisSpecInitContainerEnvValueFromOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromOutput)
}

func (i RedisSpecInitContainerEnvValueFromArgs) ToRedisSpecInitContainerEnvValueFromPtrOutput() RedisSpecInitContainerEnvValueFromPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromArgs) ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromOutput).ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerEnvValueFromPtrInput is an input type that accepts RedisSpecInitContainerEnvValueFromArgs, RedisSpecInitContainerEnvValueFromPtr and RedisSpecInitContainerEnvValueFromPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromPtrInput` via:
//
//	        RedisSpecInitContainerEnvValueFromArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerEnvValueFromPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromPtrOutput() RedisSpecInitContainerEnvValueFromPtrOutput
	ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromPtrOutput
}

type redisSpecInitContainerEnvValueFromPtrType RedisSpecInitContainerEnvValueFromArgs

func RedisSpecInitContainerEnvValueFromPtr(v *RedisSpecInitContainerEnvValueFromArgs) RedisSpecInitContainerEnvValueFromPtrInput {
	return (*redisSpecInitContainerEnvValueFromPtrType)(v)
}

func (*redisSpecInitContainerEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFrom)(nil)).Elem()
}

func (i *redisSpecInitContainerEnvValueFromPtrType) ToRedisSpecInitContainerEnvValueFromPtrOutput() RedisSpecInitContainerEnvValueFromPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerEnvValueFromPtrType) ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecInitContainerEnvValueFromOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromOutput) ToRedisSpecInitContainerEnvValueFromOutput() RedisSpecInitContainerEnvValueFromOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromOutput) ToRedisSpecInitContainerEnvValueFromOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromOutput) ToRedisSpecInitContainerEnvValueFromPtrOutput() RedisSpecInitContainerEnvValueFromPtrOutput {
	return o.ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerEnvValueFromOutput) ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFrom {
		return &v
	}).(RedisSpecInitContainerEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecInitContainerEnvValueFromOutput) ConfigMapKeyRef() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecInitContainerEnvValueFromOutput) FieldRef() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromFieldRef {
		return v.FieldRef
	}).(RedisSpecInitContainerEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecInitContainerEnvValueFromOutput) ResourceFieldRef() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecInitContainerEnvValueFromOutput) SecretKeyRef() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput)
}

type RedisSpecInitContainerEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromPtrOutput) ToRedisSpecInitContainerEnvValueFromPtrOutput() RedisSpecInitContainerEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromPtrOutput) ToRedisSpecInitContainerEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromPtrOutput) Elem() RedisSpecInitContainerEnvValueFromOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFrom) RedisSpecInitContainerEnvValueFrom {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainerEnvValueFrom
		return ret
	}).(RedisSpecInitContainerEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecInitContainerEnvValueFromPtrOutput) ConfigMapKeyRef() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecInitContainerEnvValueFromPtrOutput) FieldRef() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(RedisSpecInitContainerEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecInitContainerEnvValueFromPtrOutput) ResourceFieldRef() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecInitContainerEnvValueFromPtrOutput) SecretKeyRef() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFrom) *RedisSpecInitContainerEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecInitContainerEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecInitContainerEnvValueFromConfigMapKeyRefInput is an input type that accepts RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs and RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromConfigMapKeyRefInput` via:
//
//	RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs{...}
type RedisSpecInitContainerEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput
	ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput {
	return i.ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput)
}

func (i RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput).ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs, RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtr and RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrInput` via:
//
//	        RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput
	ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput
}

type redisSpecInitContainerEnvValueFromConfigMapKeyRefPtrType RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs

func RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtr(v *RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs) RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrInput {
	return (*redisSpecInitContainerEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*redisSpecInitContainerEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *redisSpecInitContainerEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainerEnvValueFromConfigMapKeyRef) *RedisSpecInitContainerEnvValueFromConfigMapKeyRef {
		return &v
	}).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) Elem() RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromConfigMapKeyRef) RedisSpecInitContainerEnvValueFromConfigMapKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainerEnvValueFromConfigMapKeyRef
		return ret
	}).(RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecInitContainerEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// RedisSpecInitContainerEnvValueFromFieldRefInput is an input type that accepts RedisSpecInitContainerEnvValueFromFieldRefArgs and RedisSpecInitContainerEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromFieldRefInput` via:
//
//	RedisSpecInitContainerEnvValueFromFieldRefArgs{...}
type RedisSpecInitContainerEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromFieldRefOutput() RedisSpecInitContainerEnvValueFromFieldRefOutput
	ToRedisSpecInitContainerEnvValueFromFieldRefOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecInitContainerEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (RedisSpecInitContainerEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromFieldRef)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvValueFromFieldRefArgs) ToRedisSpecInitContainerEnvValueFromFieldRefOutput() RedisSpecInitContainerEnvValueFromFieldRefOutput {
	return i.ToRedisSpecInitContainerEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromFieldRefArgs) ToRedisSpecInitContainerEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromFieldRefOutput)
}

func (i RedisSpecInitContainerEnvValueFromFieldRefArgs) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromFieldRefArgs) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromFieldRefOutput).ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerEnvValueFromFieldRefPtrInput is an input type that accepts RedisSpecInitContainerEnvValueFromFieldRefArgs, RedisSpecInitContainerEnvValueFromFieldRefPtr and RedisSpecInitContainerEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromFieldRefPtrInput` via:
//
//	        RedisSpecInitContainerEnvValueFromFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput
	ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromFieldRefPtrOutput
}

type redisSpecInitContainerEnvValueFromFieldRefPtrType RedisSpecInitContainerEnvValueFromFieldRefArgs

func RedisSpecInitContainerEnvValueFromFieldRefPtr(v *RedisSpecInitContainerEnvValueFromFieldRefArgs) RedisSpecInitContainerEnvValueFromFieldRefPtrInput {
	return (*redisSpecInitContainerEnvValueFromFieldRefPtrType)(v)
}

func (*redisSpecInitContainerEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromFieldRef)(nil)).Elem()
}

func (i *redisSpecInitContainerEnvValueFromFieldRefPtrType) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerEnvValueFromFieldRefPtrType) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecInitContainerEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromFieldRefOutput) ToRedisSpecInitContainerEnvValueFromFieldRefOutput() RedisSpecInitContainerEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromFieldRefOutput) ToRedisSpecInitContainerEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromFieldRefOutput) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return o.ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerEnvValueFromFieldRefOutput) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainerEnvValueFromFieldRef) *RedisSpecInitContainerEnvValueFromFieldRef {
		return &v
	}).(RedisSpecInitContainerEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecInitContainerEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecInitContainerEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type RedisSpecInitContainerEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromFieldRefPtrOutput) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromFieldRefPtrOutput) ToRedisSpecInitContainerEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromFieldRefPtrOutput) Elem() RedisSpecInitContainerEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromFieldRef) RedisSpecInitContainerEnvValueFromFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainerEnvValueFromFieldRef
		return ret
	}).(RedisSpecInitContainerEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecInitContainerEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecInitContainerEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecInitContainerEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// RedisSpecInitContainerEnvValueFromResourceFieldRefInput is an input type that accepts RedisSpecInitContainerEnvValueFromResourceFieldRefArgs and RedisSpecInitContainerEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromResourceFieldRefInput` via:
//
//	RedisSpecInitContainerEnvValueFromResourceFieldRefArgs{...}
type RedisSpecInitContainerEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefOutput
	ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecInitContainerEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RedisSpecInitContainerEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvValueFromResourceFieldRefArgs) ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefOutput {
	return i.ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromResourceFieldRefArgs) ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromResourceFieldRefOutput)
}

func (i RedisSpecInitContainerEnvValueFromResourceFieldRefArgs) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromResourceFieldRefArgs) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromResourceFieldRefOutput).ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerEnvValueFromResourceFieldRefPtrInput is an input type that accepts RedisSpecInitContainerEnvValueFromResourceFieldRefArgs, RedisSpecInitContainerEnvValueFromResourceFieldRefPtr and RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromResourceFieldRefPtrInput` via:
//
//	        RedisSpecInitContainerEnvValueFromResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput
	ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput
}

type redisSpecInitContainerEnvValueFromResourceFieldRefPtrType RedisSpecInitContainerEnvValueFromResourceFieldRefArgs

func RedisSpecInitContainerEnvValueFromResourceFieldRefPtr(v *RedisSpecInitContainerEnvValueFromResourceFieldRefArgs) RedisSpecInitContainerEnvValueFromResourceFieldRefPtrInput {
	return (*redisSpecInitContainerEnvValueFromResourceFieldRefPtrType)(v)
}

func (*redisSpecInitContainerEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *redisSpecInitContainerEnvValueFromResourceFieldRefPtrType) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerEnvValueFromResourceFieldRefPtrType) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecInitContainerEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) ToRedisSpecInitContainerEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return o.ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainerEnvValueFromResourceFieldRef) *RedisSpecInitContainerEnvValueFromResourceFieldRef {
		return &v
	}).(RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromResourceFieldRef) interface{} { return v.Divisor }).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecInitContainerEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput() RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) Elem() RedisSpecInitContainerEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromResourceFieldRef) RedisSpecInitContainerEnvValueFromResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainerEnvValueFromResourceFieldRef
		return ret
	}).(RedisSpecInitContainerEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecInitContainerEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecInitContainerEnvValueFromSecretKeyRefInput is an input type that accepts RedisSpecInitContainerEnvValueFromSecretKeyRefArgs and RedisSpecInitContainerEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromSecretKeyRefInput` via:
//
//	RedisSpecInitContainerEnvValueFromSecretKeyRefArgs{...}
type RedisSpecInitContainerEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefOutput
	ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type RedisSpecInitContainerEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecInitContainerEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i RedisSpecInitContainerEnvValueFromSecretKeyRefArgs) ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefOutput {
	return i.ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromSecretKeyRefArgs) ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromSecretKeyRefOutput)
}

func (i RedisSpecInitContainerEnvValueFromSecretKeyRefArgs) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerEnvValueFromSecretKeyRefArgs) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromSecretKeyRefOutput).ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerEnvValueFromSecretKeyRefPtrInput is an input type that accepts RedisSpecInitContainerEnvValueFromSecretKeyRefArgs, RedisSpecInitContainerEnvValueFromSecretKeyRefPtr and RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerEnvValueFromSecretKeyRefPtrInput` via:
//
//	        RedisSpecInitContainerEnvValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput
	ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput
}

type redisSpecInitContainerEnvValueFromSecretKeyRefPtrType RedisSpecInitContainerEnvValueFromSecretKeyRefArgs

func RedisSpecInitContainerEnvValueFromSecretKeyRefPtr(v *RedisSpecInitContainerEnvValueFromSecretKeyRefArgs) RedisSpecInitContainerEnvValueFromSecretKeyRefPtrInput {
	return (*redisSpecInitContainerEnvValueFromSecretKeyRefPtrType)(v)
}

func (*redisSpecInitContainerEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *redisSpecInitContainerEnvValueFromSecretKeyRefPtrType) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerEnvValueFromSecretKeyRefPtrType) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecInitContainerEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) ToRedisSpecInitContainerEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return o.ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainerEnvValueFromSecretKeyRef) *RedisSpecInitContainerEnvValueFromSecretKeyRef {
		return &v
	}).(RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecInitContainerEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecInitContainerEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput() RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) Elem() RedisSpecInitContainerEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromSecretKeyRef) RedisSpecInitContainerEnvValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainerEnvValueFromSecretKeyRef
		return ret
	}).(RedisSpecInitContainerEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecInitContainerResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims []RedisSpecInitContainerResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// RedisSpecInitContainerResourcesInput is an input type that accepts RedisSpecInitContainerResourcesArgs and RedisSpecInitContainerResourcesOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerResourcesInput` via:
//
//	RedisSpecInitContainerResourcesArgs{...}
type RedisSpecInitContainerResourcesInput interface {
	pulumi.Input

	ToRedisSpecInitContainerResourcesOutput() RedisSpecInitContainerResourcesOutput
	ToRedisSpecInitContainerResourcesOutputWithContext(context.Context) RedisSpecInitContainerResourcesOutput
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecInitContainerResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims RedisSpecInitContainerResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (RedisSpecInitContainerResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerResources)(nil)).Elem()
}

func (i RedisSpecInitContainerResourcesArgs) ToRedisSpecInitContainerResourcesOutput() RedisSpecInitContainerResourcesOutput {
	return i.ToRedisSpecInitContainerResourcesOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerResourcesArgs) ToRedisSpecInitContainerResourcesOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerResourcesOutput)
}

func (i RedisSpecInitContainerResourcesArgs) ToRedisSpecInitContainerResourcesPtrOutput() RedisSpecInitContainerResourcesPtrOutput {
	return i.ToRedisSpecInitContainerResourcesPtrOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerResourcesArgs) ToRedisSpecInitContainerResourcesPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerResourcesOutput).ToRedisSpecInitContainerResourcesPtrOutputWithContext(ctx)
}

// RedisSpecInitContainerResourcesPtrInput is an input type that accepts RedisSpecInitContainerResourcesArgs, RedisSpecInitContainerResourcesPtr and RedisSpecInitContainerResourcesPtrOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerResourcesPtrInput` via:
//
//	        RedisSpecInitContainerResourcesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecInitContainerResourcesPtrInput interface {
	pulumi.Input

	ToRedisSpecInitContainerResourcesPtrOutput() RedisSpecInitContainerResourcesPtrOutput
	ToRedisSpecInitContainerResourcesPtrOutputWithContext(context.Context) RedisSpecInitContainerResourcesPtrOutput
}

type redisSpecInitContainerResourcesPtrType RedisSpecInitContainerResourcesArgs

func RedisSpecInitContainerResourcesPtr(v *RedisSpecInitContainerResourcesArgs) RedisSpecInitContainerResourcesPtrInput {
	return (*redisSpecInitContainerResourcesPtrType)(v)
}

func (*redisSpecInitContainerResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerResources)(nil)).Elem()
}

func (i *redisSpecInitContainerResourcesPtrType) ToRedisSpecInitContainerResourcesPtrOutput() RedisSpecInitContainerResourcesPtrOutput {
	return i.ToRedisSpecInitContainerResourcesPtrOutputWithContext(context.Background())
}

func (i *redisSpecInitContainerResourcesPtrType) ToRedisSpecInitContainerResourcesPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerResourcesPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecInitContainerResourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerResources)(nil)).Elem()
}

func (o RedisSpecInitContainerResourcesOutput) ToRedisSpecInitContainerResourcesOutput() RedisSpecInitContainerResourcesOutput {
	return o
}

func (o RedisSpecInitContainerResourcesOutput) ToRedisSpecInitContainerResourcesOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesOutput {
	return o
}

func (o RedisSpecInitContainerResourcesOutput) ToRedisSpecInitContainerResourcesPtrOutput() RedisSpecInitContainerResourcesPtrOutput {
	return o.ToRedisSpecInitContainerResourcesPtrOutputWithContext(context.Background())
}

func (o RedisSpecInitContainerResourcesOutput) ToRedisSpecInitContainerResourcesPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecInitContainerResources) *RedisSpecInitContainerResources {
		return &v
	}).(RedisSpecInitContainerResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecInitContainerResourcesOutput) Claims() RedisSpecInitContainerResourcesClaimsArrayOutput {
	return o.ApplyT(func(v RedisSpecInitContainerResources) []RedisSpecInitContainerResourcesClaims { return v.Claims }).(RedisSpecInitContainerResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecInitContainerResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecInitContainerResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecInitContainerResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecInitContainerResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type RedisSpecInitContainerResourcesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecInitContainerResources)(nil)).Elem()
}

func (o RedisSpecInitContainerResourcesPtrOutput) ToRedisSpecInitContainerResourcesPtrOutput() RedisSpecInitContainerResourcesPtrOutput {
	return o
}

func (o RedisSpecInitContainerResourcesPtrOutput) ToRedisSpecInitContainerResourcesPtrOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesPtrOutput {
	return o
}

func (o RedisSpecInitContainerResourcesPtrOutput) Elem() RedisSpecInitContainerResourcesOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerResources) RedisSpecInitContainerResources {
		if v != nil {
			return *v
		}
		var ret RedisSpecInitContainerResources
		return ret
	}).(RedisSpecInitContainerResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecInitContainerResourcesPtrOutput) Claims() RedisSpecInitContainerResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerResources) []RedisSpecInitContainerResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(RedisSpecInitContainerResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecInitContainerResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecInitContainerResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecInitContainerResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecInitContainerResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// RedisSpecInitContainerResourcesClaimsInput is an input type that accepts RedisSpecInitContainerResourcesClaimsArgs and RedisSpecInitContainerResourcesClaimsOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerResourcesClaimsInput` via:
//
//	RedisSpecInitContainerResourcesClaimsArgs{...}
type RedisSpecInitContainerResourcesClaimsInput interface {
	pulumi.Input

	ToRedisSpecInitContainerResourcesClaimsOutput() RedisSpecInitContainerResourcesClaimsOutput
	ToRedisSpecInitContainerResourcesClaimsOutputWithContext(context.Context) RedisSpecInitContainerResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecInitContainerResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecInitContainerResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerResourcesClaims)(nil)).Elem()
}

func (i RedisSpecInitContainerResourcesClaimsArgs) ToRedisSpecInitContainerResourcesClaimsOutput() RedisSpecInitContainerResourcesClaimsOutput {
	return i.ToRedisSpecInitContainerResourcesClaimsOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerResourcesClaimsArgs) ToRedisSpecInitContainerResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerResourcesClaimsOutput)
}

// RedisSpecInitContainerResourcesClaimsArrayInput is an input type that accepts RedisSpecInitContainerResourcesClaimsArray and RedisSpecInitContainerResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `RedisSpecInitContainerResourcesClaimsArrayInput` via:
//
//	RedisSpecInitContainerResourcesClaimsArray{ RedisSpecInitContainerResourcesClaimsArgs{...} }
type RedisSpecInitContainerResourcesClaimsArrayInput interface {
	pulumi.Input

	ToRedisSpecInitContainerResourcesClaimsArrayOutput() RedisSpecInitContainerResourcesClaimsArrayOutput
	ToRedisSpecInitContainerResourcesClaimsArrayOutputWithContext(context.Context) RedisSpecInitContainerResourcesClaimsArrayOutput
}

type RedisSpecInitContainerResourcesClaimsArray []RedisSpecInitContainerResourcesClaimsInput

func (RedisSpecInitContainerResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecInitContainerResourcesClaims)(nil)).Elem()
}

func (i RedisSpecInitContainerResourcesClaimsArray) ToRedisSpecInitContainerResourcesClaimsArrayOutput() RedisSpecInitContainerResourcesClaimsArrayOutput {
	return i.ToRedisSpecInitContainerResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i RedisSpecInitContainerResourcesClaimsArray) ToRedisSpecInitContainerResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecInitContainerResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecInitContainerResourcesClaimsOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecInitContainerResourcesClaims)(nil)).Elem()
}

func (o RedisSpecInitContainerResourcesClaimsOutput) ToRedisSpecInitContainerResourcesClaimsOutput() RedisSpecInitContainerResourcesClaimsOutput {
	return o
}

func (o RedisSpecInitContainerResourcesClaimsOutput) ToRedisSpecInitContainerResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o RedisSpecInitContainerResourcesClaimsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecInitContainerResourcesClaims) string { return v.Name }).(pulumi.StringOutput)
}

type RedisSpecInitContainerResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecInitContainerResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecInitContainerResourcesClaims)(nil)).Elem()
}

func (o RedisSpecInitContainerResourcesClaimsArrayOutput) ToRedisSpecInitContainerResourcesClaimsArrayOutput() RedisSpecInitContainerResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecInitContainerResourcesClaimsArrayOutput) ToRedisSpecInitContainerResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecInitContainerResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecInitContainerResourcesClaimsArrayOutput) Index(i pulumi.IntInput) RedisSpecInitContainerResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecInitContainerResourcesClaims {
		return vs[0].([]RedisSpecInitContainerResourcesClaims)[vs[1].(int)]
	}).(RedisSpecInitContainerResourcesClaimsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecInitContainerResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecInitContainerResourcesRequests struct {
}

// KubernetesConfig will be the JSON struct for Basic Redis Config
type RedisSpecKubernetesConfig struct {
	IgnoreAnnotations []string `pulumi:"ignoreAnnotations"`
	Image             string   `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy  *string                                     `pulumi:"imagePullPolicy"`
	ImagePullSecrets []RedisSpecKubernetesConfigImagePullSecrets `pulumi:"imagePullSecrets"`
	// ExistingPasswordSecret is the struct to access the existing secret
	RedisSecret *RedisSpecKubernetesConfigRedisSecret `pulumi:"redisSecret"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *RedisSpecKubernetesConfigResources `pulumi:"resources"`
	// ServiceConfig define the type of service to be created and its annotations
	Service *RedisSpecKubernetesConfigService `pulumi:"service"`
	// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
	UpdateStrategy *RedisSpecKubernetesConfigUpdateStrategy `pulumi:"updateStrategy"`
}

// RedisSpecKubernetesConfigInput is an input type that accepts RedisSpecKubernetesConfigArgs and RedisSpecKubernetesConfigOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigInput` via:
//
//	RedisSpecKubernetesConfigArgs{...}
type RedisSpecKubernetesConfigInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigOutput() RedisSpecKubernetesConfigOutput
	ToRedisSpecKubernetesConfigOutputWithContext(context.Context) RedisSpecKubernetesConfigOutput
}

// KubernetesConfig will be the JSON struct for Basic Redis Config
type RedisSpecKubernetesConfigArgs struct {
	IgnoreAnnotations pulumi.StringArrayInput `pulumi:"ignoreAnnotations"`
	Image             pulumi.StringInput      `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy  pulumi.StringPtrInput                               `pulumi:"imagePullPolicy"`
	ImagePullSecrets RedisSpecKubernetesConfigImagePullSecretsArrayInput `pulumi:"imagePullSecrets"`
	// ExistingPasswordSecret is the struct to access the existing secret
	RedisSecret RedisSpecKubernetesConfigRedisSecretPtrInput `pulumi:"redisSecret"`
	// ResourceRequirements describes the compute resource requirements.
	Resources RedisSpecKubernetesConfigResourcesPtrInput `pulumi:"resources"`
	// ServiceConfig define the type of service to be created and its annotations
	Service RedisSpecKubernetesConfigServicePtrInput `pulumi:"service"`
	// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
	UpdateStrategy RedisSpecKubernetesConfigUpdateStrategyPtrInput `pulumi:"updateStrategy"`
}

func (RedisSpecKubernetesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfig)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigArgs) ToRedisSpecKubernetesConfigOutput() RedisSpecKubernetesConfigOutput {
	return i.ToRedisSpecKubernetesConfigOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigArgs) ToRedisSpecKubernetesConfigOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigOutput)
}

func (i RedisSpecKubernetesConfigArgs) ToRedisSpecKubernetesConfigPtrOutput() RedisSpecKubernetesConfigPtrOutput {
	return i.ToRedisSpecKubernetesConfigPtrOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigArgs) ToRedisSpecKubernetesConfigPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigOutput).ToRedisSpecKubernetesConfigPtrOutputWithContext(ctx)
}

// RedisSpecKubernetesConfigPtrInput is an input type that accepts RedisSpecKubernetesConfigArgs, RedisSpecKubernetesConfigPtr and RedisSpecKubernetesConfigPtrOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigPtrInput` via:
//
//	        RedisSpecKubernetesConfigArgs{...}
//
//	or:
//
//	        nil
type RedisSpecKubernetesConfigPtrInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigPtrOutput() RedisSpecKubernetesConfigPtrOutput
	ToRedisSpecKubernetesConfigPtrOutputWithContext(context.Context) RedisSpecKubernetesConfigPtrOutput
}

type redisSpecKubernetesConfigPtrType RedisSpecKubernetesConfigArgs

func RedisSpecKubernetesConfigPtr(v *RedisSpecKubernetesConfigArgs) RedisSpecKubernetesConfigPtrInput {
	return (*redisSpecKubernetesConfigPtrType)(v)
}

func (*redisSpecKubernetesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfig)(nil)).Elem()
}

func (i *redisSpecKubernetesConfigPtrType) ToRedisSpecKubernetesConfigPtrOutput() RedisSpecKubernetesConfigPtrOutput {
	return i.ToRedisSpecKubernetesConfigPtrOutputWithContext(context.Background())
}

func (i *redisSpecKubernetesConfigPtrType) ToRedisSpecKubernetesConfigPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigPtrOutput)
}

// KubernetesConfig will be the JSON struct for Basic Redis Config
type RedisSpecKubernetesConfigOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfig)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigOutput) ToRedisSpecKubernetesConfigOutput() RedisSpecKubernetesConfigOutput {
	return o
}

func (o RedisSpecKubernetesConfigOutput) ToRedisSpecKubernetesConfigOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigOutput {
	return o
}

func (o RedisSpecKubernetesConfigOutput) ToRedisSpecKubernetesConfigPtrOutput() RedisSpecKubernetesConfigPtrOutput {
	return o.ToRedisSpecKubernetesConfigPtrOutputWithContext(context.Background())
}

func (o RedisSpecKubernetesConfigOutput) ToRedisSpecKubernetesConfigPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecKubernetesConfig) *RedisSpecKubernetesConfig {
		return &v
	}).(RedisSpecKubernetesConfigPtrOutput)
}

func (o RedisSpecKubernetesConfigOutput) IgnoreAnnotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) []string { return v.IgnoreAnnotations }).(pulumi.StringArrayOutput)
}

func (o RedisSpecKubernetesConfigOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) string { return v.Image }).(pulumi.StringOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecKubernetesConfigOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

func (o RedisSpecKubernetesConfigOutput) ImagePullSecrets() RedisSpecKubernetesConfigImagePullSecretsArrayOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) []RedisSpecKubernetesConfigImagePullSecrets {
		return v.ImagePullSecrets
	}).(RedisSpecKubernetesConfigImagePullSecretsArrayOutput)
}

// ExistingPasswordSecret is the struct to access the existing secret
func (o RedisSpecKubernetesConfigOutput) RedisSecret() RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigRedisSecret { return v.RedisSecret }).(RedisSpecKubernetesConfigRedisSecretPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecKubernetesConfigOutput) Resources() RedisSpecKubernetesConfigResourcesPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigResources { return v.Resources }).(RedisSpecKubernetesConfigResourcesPtrOutput)
}

// ServiceConfig define the type of service to be created and its annotations
func (o RedisSpecKubernetesConfigOutput) Service() RedisSpecKubernetesConfigServicePtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigService { return v.Service }).(RedisSpecKubernetesConfigServicePtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
func (o RedisSpecKubernetesConfigOutput) UpdateStrategy() RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigUpdateStrategy { return v.UpdateStrategy }).(RedisSpecKubernetesConfigUpdateStrategyPtrOutput)
}

type RedisSpecKubernetesConfigPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfig)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigPtrOutput) ToRedisSpecKubernetesConfigPtrOutput() RedisSpecKubernetesConfigPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigPtrOutput) ToRedisSpecKubernetesConfigPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigPtrOutput) Elem() RedisSpecKubernetesConfigOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) RedisSpecKubernetesConfig {
		if v != nil {
			return *v
		}
		var ret RedisSpecKubernetesConfig
		return ret
	}).(RedisSpecKubernetesConfigOutput)
}

func (o RedisSpecKubernetesConfigPtrOutput) IgnoreAnnotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) []string {
		if v == nil {
			return nil
		}
		return v.IgnoreAnnotations
	}).(pulumi.StringArrayOutput)
}

func (o RedisSpecKubernetesConfigPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecKubernetesConfigPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

func (o RedisSpecKubernetesConfigPtrOutput) ImagePullSecrets() RedisSpecKubernetesConfigImagePullSecretsArrayOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) []RedisSpecKubernetesConfigImagePullSecrets {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(RedisSpecKubernetesConfigImagePullSecretsArrayOutput)
}

// ExistingPasswordSecret is the struct to access the existing secret
func (o RedisSpecKubernetesConfigPtrOutput) RedisSecret() RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigRedisSecret {
		if v == nil {
			return nil
		}
		return v.RedisSecret
	}).(RedisSpecKubernetesConfigRedisSecretPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecKubernetesConfigPtrOutput) Resources() RedisSpecKubernetesConfigResourcesPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(RedisSpecKubernetesConfigResourcesPtrOutput)
}

// ServiceConfig define the type of service to be created and its annotations
func (o RedisSpecKubernetesConfigPtrOutput) Service() RedisSpecKubernetesConfigServicePtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(RedisSpecKubernetesConfigServicePtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
func (o RedisSpecKubernetesConfigPtrOutput) UpdateStrategy() RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfig) *RedisSpecKubernetesConfigUpdateStrategy {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(RedisSpecKubernetesConfigUpdateStrategyPtrOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type RedisSpecKubernetesConfigImagePullSecrets struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecKubernetesConfigImagePullSecretsInput is an input type that accepts RedisSpecKubernetesConfigImagePullSecretsArgs and RedisSpecKubernetesConfigImagePullSecretsOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigImagePullSecretsInput` via:
//
//	RedisSpecKubernetesConfigImagePullSecretsArgs{...}
type RedisSpecKubernetesConfigImagePullSecretsInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigImagePullSecretsOutput() RedisSpecKubernetesConfigImagePullSecretsOutput
	ToRedisSpecKubernetesConfigImagePullSecretsOutputWithContext(context.Context) RedisSpecKubernetesConfigImagePullSecretsOutput
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type RedisSpecKubernetesConfigImagePullSecretsArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecKubernetesConfigImagePullSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigImagePullSecrets)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigImagePullSecretsArgs) ToRedisSpecKubernetesConfigImagePullSecretsOutput() RedisSpecKubernetesConfigImagePullSecretsOutput {
	return i.ToRedisSpecKubernetesConfigImagePullSecretsOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigImagePullSecretsArgs) ToRedisSpecKubernetesConfigImagePullSecretsOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigImagePullSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigImagePullSecretsOutput)
}

// RedisSpecKubernetesConfigImagePullSecretsArrayInput is an input type that accepts RedisSpecKubernetesConfigImagePullSecretsArray and RedisSpecKubernetesConfigImagePullSecretsArrayOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigImagePullSecretsArrayInput` via:
//
//	RedisSpecKubernetesConfigImagePullSecretsArray{ RedisSpecKubernetesConfigImagePullSecretsArgs{...} }
type RedisSpecKubernetesConfigImagePullSecretsArrayInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigImagePullSecretsArrayOutput() RedisSpecKubernetesConfigImagePullSecretsArrayOutput
	ToRedisSpecKubernetesConfigImagePullSecretsArrayOutputWithContext(context.Context) RedisSpecKubernetesConfigImagePullSecretsArrayOutput
}

type RedisSpecKubernetesConfigImagePullSecretsArray []RedisSpecKubernetesConfigImagePullSecretsInput

func (RedisSpecKubernetesConfigImagePullSecretsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecKubernetesConfigImagePullSecrets)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigImagePullSecretsArray) ToRedisSpecKubernetesConfigImagePullSecretsArrayOutput() RedisSpecKubernetesConfigImagePullSecretsArrayOutput {
	return i.ToRedisSpecKubernetesConfigImagePullSecretsArrayOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigImagePullSecretsArray) ToRedisSpecKubernetesConfigImagePullSecretsArrayOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigImagePullSecretsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigImagePullSecretsArrayOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type RedisSpecKubernetesConfigImagePullSecretsOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigImagePullSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigImagePullSecrets)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigImagePullSecretsOutput) ToRedisSpecKubernetesConfigImagePullSecretsOutput() RedisSpecKubernetesConfigImagePullSecretsOutput {
	return o
}

func (o RedisSpecKubernetesConfigImagePullSecretsOutput) ToRedisSpecKubernetesConfigImagePullSecretsOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigImagePullSecretsOutput {
	return o
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecKubernetesConfigImagePullSecretsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigImagePullSecrets) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecKubernetesConfigImagePullSecretsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigImagePullSecretsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecKubernetesConfigImagePullSecrets)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigImagePullSecretsArrayOutput) ToRedisSpecKubernetesConfigImagePullSecretsArrayOutput() RedisSpecKubernetesConfigImagePullSecretsArrayOutput {
	return o
}

func (o RedisSpecKubernetesConfigImagePullSecretsArrayOutput) ToRedisSpecKubernetesConfigImagePullSecretsArrayOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigImagePullSecretsArrayOutput {
	return o
}

func (o RedisSpecKubernetesConfigImagePullSecretsArrayOutput) Index(i pulumi.IntInput) RedisSpecKubernetesConfigImagePullSecretsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecKubernetesConfigImagePullSecrets {
		return vs[0].([]RedisSpecKubernetesConfigImagePullSecrets)[vs[1].(int)]
	}).(RedisSpecKubernetesConfigImagePullSecretsOutput)
}

// ExistingPasswordSecret is the struct to access the existing secret
type RedisSpecKubernetesConfigRedisSecret struct {
	Key  *string `pulumi:"key"`
	Name *string `pulumi:"name"`
}

// RedisSpecKubernetesConfigRedisSecretInput is an input type that accepts RedisSpecKubernetesConfigRedisSecretArgs and RedisSpecKubernetesConfigRedisSecretOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigRedisSecretInput` via:
//
//	RedisSpecKubernetesConfigRedisSecretArgs{...}
type RedisSpecKubernetesConfigRedisSecretInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigRedisSecretOutput() RedisSpecKubernetesConfigRedisSecretOutput
	ToRedisSpecKubernetesConfigRedisSecretOutputWithContext(context.Context) RedisSpecKubernetesConfigRedisSecretOutput
}

// ExistingPasswordSecret is the struct to access the existing secret
type RedisSpecKubernetesConfigRedisSecretArgs struct {
	Key  pulumi.StringPtrInput `pulumi:"key"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecKubernetesConfigRedisSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigRedisSecret)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigRedisSecretArgs) ToRedisSpecKubernetesConfigRedisSecretOutput() RedisSpecKubernetesConfigRedisSecretOutput {
	return i.ToRedisSpecKubernetesConfigRedisSecretOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigRedisSecretArgs) ToRedisSpecKubernetesConfigRedisSecretOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigRedisSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigRedisSecretOutput)
}

func (i RedisSpecKubernetesConfigRedisSecretArgs) ToRedisSpecKubernetesConfigRedisSecretPtrOutput() RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return i.ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigRedisSecretArgs) ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigRedisSecretOutput).ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(ctx)
}

// RedisSpecKubernetesConfigRedisSecretPtrInput is an input type that accepts RedisSpecKubernetesConfigRedisSecretArgs, RedisSpecKubernetesConfigRedisSecretPtr and RedisSpecKubernetesConfigRedisSecretPtrOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigRedisSecretPtrInput` via:
//
//	        RedisSpecKubernetesConfigRedisSecretArgs{...}
//
//	or:
//
//	        nil
type RedisSpecKubernetesConfigRedisSecretPtrInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigRedisSecretPtrOutput() RedisSpecKubernetesConfigRedisSecretPtrOutput
	ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(context.Context) RedisSpecKubernetesConfigRedisSecretPtrOutput
}

type redisSpecKubernetesConfigRedisSecretPtrType RedisSpecKubernetesConfigRedisSecretArgs

func RedisSpecKubernetesConfigRedisSecretPtr(v *RedisSpecKubernetesConfigRedisSecretArgs) RedisSpecKubernetesConfigRedisSecretPtrInput {
	return (*redisSpecKubernetesConfigRedisSecretPtrType)(v)
}

func (*redisSpecKubernetesConfigRedisSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigRedisSecret)(nil)).Elem()
}

func (i *redisSpecKubernetesConfigRedisSecretPtrType) ToRedisSpecKubernetesConfigRedisSecretPtrOutput() RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return i.ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(context.Background())
}

func (i *redisSpecKubernetesConfigRedisSecretPtrType) ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigRedisSecretPtrOutput)
}

// ExistingPasswordSecret is the struct to access the existing secret
type RedisSpecKubernetesConfigRedisSecretOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigRedisSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigRedisSecret)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigRedisSecretOutput) ToRedisSpecKubernetesConfigRedisSecretOutput() RedisSpecKubernetesConfigRedisSecretOutput {
	return o
}

func (o RedisSpecKubernetesConfigRedisSecretOutput) ToRedisSpecKubernetesConfigRedisSecretOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigRedisSecretOutput {
	return o
}

func (o RedisSpecKubernetesConfigRedisSecretOutput) ToRedisSpecKubernetesConfigRedisSecretPtrOutput() RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return o.ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(context.Background())
}

func (o RedisSpecKubernetesConfigRedisSecretOutput) ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecKubernetesConfigRedisSecret) *RedisSpecKubernetesConfigRedisSecret {
		return &v
	}).(RedisSpecKubernetesConfigRedisSecretPtrOutput)
}

func (o RedisSpecKubernetesConfigRedisSecretOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigRedisSecret) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o RedisSpecKubernetesConfigRedisSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigRedisSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecKubernetesConfigRedisSecretPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigRedisSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigRedisSecret)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigRedisSecretPtrOutput) ToRedisSpecKubernetesConfigRedisSecretPtrOutput() RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigRedisSecretPtrOutput) ToRedisSpecKubernetesConfigRedisSecretPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigRedisSecretPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigRedisSecretPtrOutput) Elem() RedisSpecKubernetesConfigRedisSecretOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigRedisSecret) RedisSpecKubernetesConfigRedisSecret {
		if v != nil {
			return *v
		}
		var ret RedisSpecKubernetesConfigRedisSecret
		return ret
	}).(RedisSpecKubernetesConfigRedisSecretOutput)
}

func (o RedisSpecKubernetesConfigRedisSecretPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigRedisSecret) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o RedisSpecKubernetesConfigRedisSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigRedisSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecKubernetesConfigResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims []RedisSpecKubernetesConfigResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// RedisSpecKubernetesConfigResourcesInput is an input type that accepts RedisSpecKubernetesConfigResourcesArgs and RedisSpecKubernetesConfigResourcesOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigResourcesInput` via:
//
//	RedisSpecKubernetesConfigResourcesArgs{...}
type RedisSpecKubernetesConfigResourcesInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigResourcesOutput() RedisSpecKubernetesConfigResourcesOutput
	ToRedisSpecKubernetesConfigResourcesOutputWithContext(context.Context) RedisSpecKubernetesConfigResourcesOutput
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecKubernetesConfigResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims RedisSpecKubernetesConfigResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (RedisSpecKubernetesConfigResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigResources)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigResourcesArgs) ToRedisSpecKubernetesConfigResourcesOutput() RedisSpecKubernetesConfigResourcesOutput {
	return i.ToRedisSpecKubernetesConfigResourcesOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigResourcesArgs) ToRedisSpecKubernetesConfigResourcesOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigResourcesOutput)
}

func (i RedisSpecKubernetesConfigResourcesArgs) ToRedisSpecKubernetesConfigResourcesPtrOutput() RedisSpecKubernetesConfigResourcesPtrOutput {
	return i.ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigResourcesArgs) ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigResourcesOutput).ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(ctx)
}

// RedisSpecKubernetesConfigResourcesPtrInput is an input type that accepts RedisSpecKubernetesConfigResourcesArgs, RedisSpecKubernetesConfigResourcesPtr and RedisSpecKubernetesConfigResourcesPtrOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigResourcesPtrInput` via:
//
//	        RedisSpecKubernetesConfigResourcesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecKubernetesConfigResourcesPtrInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigResourcesPtrOutput() RedisSpecKubernetesConfigResourcesPtrOutput
	ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(context.Context) RedisSpecKubernetesConfigResourcesPtrOutput
}

type redisSpecKubernetesConfigResourcesPtrType RedisSpecKubernetesConfigResourcesArgs

func RedisSpecKubernetesConfigResourcesPtr(v *RedisSpecKubernetesConfigResourcesArgs) RedisSpecKubernetesConfigResourcesPtrInput {
	return (*redisSpecKubernetesConfigResourcesPtrType)(v)
}

func (*redisSpecKubernetesConfigResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigResources)(nil)).Elem()
}

func (i *redisSpecKubernetesConfigResourcesPtrType) ToRedisSpecKubernetesConfigResourcesPtrOutput() RedisSpecKubernetesConfigResourcesPtrOutput {
	return i.ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(context.Background())
}

func (i *redisSpecKubernetesConfigResourcesPtrType) ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigResourcesPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecKubernetesConfigResourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigResources)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigResourcesOutput) ToRedisSpecKubernetesConfigResourcesOutput() RedisSpecKubernetesConfigResourcesOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesOutput) ToRedisSpecKubernetesConfigResourcesOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesOutput) ToRedisSpecKubernetesConfigResourcesPtrOutput() RedisSpecKubernetesConfigResourcesPtrOutput {
	return o.ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(context.Background())
}

func (o RedisSpecKubernetesConfigResourcesOutput) ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecKubernetesConfigResources) *RedisSpecKubernetesConfigResources {
		return &v
	}).(RedisSpecKubernetesConfigResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecKubernetesConfigResourcesOutput) Claims() RedisSpecKubernetesConfigResourcesClaimsArrayOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigResources) []RedisSpecKubernetesConfigResourcesClaims { return v.Claims }).(RedisSpecKubernetesConfigResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecKubernetesConfigResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecKubernetesConfigResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type RedisSpecKubernetesConfigResourcesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigResources)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigResourcesPtrOutput) ToRedisSpecKubernetesConfigResourcesPtrOutput() RedisSpecKubernetesConfigResourcesPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesPtrOutput) ToRedisSpecKubernetesConfigResourcesPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesPtrOutput) Elem() RedisSpecKubernetesConfigResourcesOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigResources) RedisSpecKubernetesConfigResources {
		if v != nil {
			return *v
		}
		var ret RedisSpecKubernetesConfigResources
		return ret
	}).(RedisSpecKubernetesConfigResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecKubernetesConfigResourcesPtrOutput) Claims() RedisSpecKubernetesConfigResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigResources) []RedisSpecKubernetesConfigResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(RedisSpecKubernetesConfigResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecKubernetesConfigResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecKubernetesConfigResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecKubernetesConfigResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// RedisSpecKubernetesConfigResourcesClaimsInput is an input type that accepts RedisSpecKubernetesConfigResourcesClaimsArgs and RedisSpecKubernetesConfigResourcesClaimsOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigResourcesClaimsInput` via:
//
//	RedisSpecKubernetesConfigResourcesClaimsArgs{...}
type RedisSpecKubernetesConfigResourcesClaimsInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigResourcesClaimsOutput() RedisSpecKubernetesConfigResourcesClaimsOutput
	ToRedisSpecKubernetesConfigResourcesClaimsOutputWithContext(context.Context) RedisSpecKubernetesConfigResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecKubernetesConfigResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecKubernetesConfigResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigResourcesClaims)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigResourcesClaimsArgs) ToRedisSpecKubernetesConfigResourcesClaimsOutput() RedisSpecKubernetesConfigResourcesClaimsOutput {
	return i.ToRedisSpecKubernetesConfigResourcesClaimsOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigResourcesClaimsArgs) ToRedisSpecKubernetesConfigResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigResourcesClaimsOutput)
}

// RedisSpecKubernetesConfigResourcesClaimsArrayInput is an input type that accepts RedisSpecKubernetesConfigResourcesClaimsArray and RedisSpecKubernetesConfigResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigResourcesClaimsArrayInput` via:
//
//	RedisSpecKubernetesConfigResourcesClaimsArray{ RedisSpecKubernetesConfigResourcesClaimsArgs{...} }
type RedisSpecKubernetesConfigResourcesClaimsArrayInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigResourcesClaimsArrayOutput() RedisSpecKubernetesConfigResourcesClaimsArrayOutput
	ToRedisSpecKubernetesConfigResourcesClaimsArrayOutputWithContext(context.Context) RedisSpecKubernetesConfigResourcesClaimsArrayOutput
}

type RedisSpecKubernetesConfigResourcesClaimsArray []RedisSpecKubernetesConfigResourcesClaimsInput

func (RedisSpecKubernetesConfigResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecKubernetesConfigResourcesClaims)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigResourcesClaimsArray) ToRedisSpecKubernetesConfigResourcesClaimsArrayOutput() RedisSpecKubernetesConfigResourcesClaimsArrayOutput {
	return i.ToRedisSpecKubernetesConfigResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigResourcesClaimsArray) ToRedisSpecKubernetesConfigResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecKubernetesConfigResourcesClaimsOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigResourcesClaims)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigResourcesClaimsOutput) ToRedisSpecKubernetesConfigResourcesClaimsOutput() RedisSpecKubernetesConfigResourcesClaimsOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesClaimsOutput) ToRedisSpecKubernetesConfigResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o RedisSpecKubernetesConfigResourcesClaimsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigResourcesClaims) string { return v.Name }).(pulumi.StringOutput)
}

type RedisSpecKubernetesConfigResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecKubernetesConfigResourcesClaims)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigResourcesClaimsArrayOutput) ToRedisSpecKubernetesConfigResourcesClaimsArrayOutput() RedisSpecKubernetesConfigResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesClaimsArrayOutput) ToRedisSpecKubernetesConfigResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecKubernetesConfigResourcesClaimsArrayOutput) Index(i pulumi.IntInput) RedisSpecKubernetesConfigResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecKubernetesConfigResourcesClaims {
		return vs[0].([]RedisSpecKubernetesConfigResourcesClaims)[vs[1].(int)]
	}).(RedisSpecKubernetesConfigResourcesClaimsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecKubernetesConfigResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecKubernetesConfigResourcesRequests struct {
}

// ServiceConfig define the type of service to be created and its annotations
type RedisSpecKubernetesConfigService struct {
	Annotations map[string]string `pulumi:"annotations"`
	ServiceType *string           `pulumi:"serviceType"`
}

// RedisSpecKubernetesConfigServiceInput is an input type that accepts RedisSpecKubernetesConfigServiceArgs and RedisSpecKubernetesConfigServiceOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigServiceInput` via:
//
//	RedisSpecKubernetesConfigServiceArgs{...}
type RedisSpecKubernetesConfigServiceInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigServiceOutput() RedisSpecKubernetesConfigServiceOutput
	ToRedisSpecKubernetesConfigServiceOutputWithContext(context.Context) RedisSpecKubernetesConfigServiceOutput
}

// ServiceConfig define the type of service to be created and its annotations
type RedisSpecKubernetesConfigServiceArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
}

func (RedisSpecKubernetesConfigServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigService)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigServiceArgs) ToRedisSpecKubernetesConfigServiceOutput() RedisSpecKubernetesConfigServiceOutput {
	return i.ToRedisSpecKubernetesConfigServiceOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigServiceArgs) ToRedisSpecKubernetesConfigServiceOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigServiceOutput)
}

func (i RedisSpecKubernetesConfigServiceArgs) ToRedisSpecKubernetesConfigServicePtrOutput() RedisSpecKubernetesConfigServicePtrOutput {
	return i.ToRedisSpecKubernetesConfigServicePtrOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigServiceArgs) ToRedisSpecKubernetesConfigServicePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigServiceOutput).ToRedisSpecKubernetesConfigServicePtrOutputWithContext(ctx)
}

// RedisSpecKubernetesConfigServicePtrInput is an input type that accepts RedisSpecKubernetesConfigServiceArgs, RedisSpecKubernetesConfigServicePtr and RedisSpecKubernetesConfigServicePtrOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigServicePtrInput` via:
//
//	        RedisSpecKubernetesConfigServiceArgs{...}
//
//	or:
//
//	        nil
type RedisSpecKubernetesConfigServicePtrInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigServicePtrOutput() RedisSpecKubernetesConfigServicePtrOutput
	ToRedisSpecKubernetesConfigServicePtrOutputWithContext(context.Context) RedisSpecKubernetesConfigServicePtrOutput
}

type redisSpecKubernetesConfigServicePtrType RedisSpecKubernetesConfigServiceArgs

func RedisSpecKubernetesConfigServicePtr(v *RedisSpecKubernetesConfigServiceArgs) RedisSpecKubernetesConfigServicePtrInput {
	return (*redisSpecKubernetesConfigServicePtrType)(v)
}

func (*redisSpecKubernetesConfigServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigService)(nil)).Elem()
}

func (i *redisSpecKubernetesConfigServicePtrType) ToRedisSpecKubernetesConfigServicePtrOutput() RedisSpecKubernetesConfigServicePtrOutput {
	return i.ToRedisSpecKubernetesConfigServicePtrOutputWithContext(context.Background())
}

func (i *redisSpecKubernetesConfigServicePtrType) ToRedisSpecKubernetesConfigServicePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigServicePtrOutput)
}

// ServiceConfig define the type of service to be created and its annotations
type RedisSpecKubernetesConfigServiceOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigService)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigServiceOutput) ToRedisSpecKubernetesConfigServiceOutput() RedisSpecKubernetesConfigServiceOutput {
	return o
}

func (o RedisSpecKubernetesConfigServiceOutput) ToRedisSpecKubernetesConfigServiceOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigServiceOutput {
	return o
}

func (o RedisSpecKubernetesConfigServiceOutput) ToRedisSpecKubernetesConfigServicePtrOutput() RedisSpecKubernetesConfigServicePtrOutput {
	return o.ToRedisSpecKubernetesConfigServicePtrOutputWithContext(context.Background())
}

func (o RedisSpecKubernetesConfigServiceOutput) ToRedisSpecKubernetesConfigServicePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecKubernetesConfigService) *RedisSpecKubernetesConfigService {
		return &v
	}).(RedisSpecKubernetesConfigServicePtrOutput)
}

func (o RedisSpecKubernetesConfigServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigService) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o RedisSpecKubernetesConfigServiceOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigService) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

type RedisSpecKubernetesConfigServicePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigService)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigServicePtrOutput) ToRedisSpecKubernetesConfigServicePtrOutput() RedisSpecKubernetesConfigServicePtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigServicePtrOutput) ToRedisSpecKubernetesConfigServicePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigServicePtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigServicePtrOutput) Elem() RedisSpecKubernetesConfigServiceOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigService) RedisSpecKubernetesConfigService {
		if v != nil {
			return *v
		}
		var ret RedisSpecKubernetesConfigService
		return ret
	}).(RedisSpecKubernetesConfigServiceOutput)
}

func (o RedisSpecKubernetesConfigServicePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o RedisSpecKubernetesConfigServicePtrOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigService) *string {
		if v == nil {
			return nil
		}
		return v.ServiceType
	}).(pulumi.StringPtrOutput)
}

type RedisSpecKubernetesConfigServiceAnnotations struct {
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type RedisSpecKubernetesConfigUpdateStrategy struct {
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	RollingUpdate *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate `pulumi:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
	Type *string `pulumi:"type"`
}

// RedisSpecKubernetesConfigUpdateStrategyInput is an input type that accepts RedisSpecKubernetesConfigUpdateStrategyArgs and RedisSpecKubernetesConfigUpdateStrategyOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigUpdateStrategyInput` via:
//
//	RedisSpecKubernetesConfigUpdateStrategyArgs{...}
type RedisSpecKubernetesConfigUpdateStrategyInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigUpdateStrategyOutput() RedisSpecKubernetesConfigUpdateStrategyOutput
	ToRedisSpecKubernetesConfigUpdateStrategyOutputWithContext(context.Context) RedisSpecKubernetesConfigUpdateStrategyOutput
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type RedisSpecKubernetesConfigUpdateStrategyArgs struct {
	// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
	RollingUpdate RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrInput `pulumi:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RedisSpecKubernetesConfigUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategy)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigUpdateStrategyArgs) ToRedisSpecKubernetesConfigUpdateStrategyOutput() RedisSpecKubernetesConfigUpdateStrategyOutput {
	return i.ToRedisSpecKubernetesConfigUpdateStrategyOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigUpdateStrategyArgs) ToRedisSpecKubernetesConfigUpdateStrategyOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigUpdateStrategyOutput)
}

func (i RedisSpecKubernetesConfigUpdateStrategyArgs) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutput() RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return i.ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigUpdateStrategyArgs) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigUpdateStrategyOutput).ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(ctx)
}

// RedisSpecKubernetesConfigUpdateStrategyPtrInput is an input type that accepts RedisSpecKubernetesConfigUpdateStrategyArgs, RedisSpecKubernetesConfigUpdateStrategyPtr and RedisSpecKubernetesConfigUpdateStrategyPtrOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigUpdateStrategyPtrInput` via:
//
//	        RedisSpecKubernetesConfigUpdateStrategyArgs{...}
//
//	or:
//
//	        nil
type RedisSpecKubernetesConfigUpdateStrategyPtrInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigUpdateStrategyPtrOutput() RedisSpecKubernetesConfigUpdateStrategyPtrOutput
	ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(context.Context) RedisSpecKubernetesConfigUpdateStrategyPtrOutput
}

type redisSpecKubernetesConfigUpdateStrategyPtrType RedisSpecKubernetesConfigUpdateStrategyArgs

func RedisSpecKubernetesConfigUpdateStrategyPtr(v *RedisSpecKubernetesConfigUpdateStrategyArgs) RedisSpecKubernetesConfigUpdateStrategyPtrInput {
	return (*redisSpecKubernetesConfigUpdateStrategyPtrType)(v)
}

func (*redisSpecKubernetesConfigUpdateStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigUpdateStrategy)(nil)).Elem()
}

func (i *redisSpecKubernetesConfigUpdateStrategyPtrType) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutput() RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return i.ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i *redisSpecKubernetesConfigUpdateStrategyPtrType) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigUpdateStrategyPtrOutput)
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
type RedisSpecKubernetesConfigUpdateStrategyOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategy)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigUpdateStrategyOutput) ToRedisSpecKubernetesConfigUpdateStrategyOutput() RedisSpecKubernetesConfigUpdateStrategyOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyOutput) ToRedisSpecKubernetesConfigUpdateStrategyOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyOutput) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutput() RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return o.ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(context.Background())
}

func (o RedisSpecKubernetesConfigUpdateStrategyOutput) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecKubernetesConfigUpdateStrategy) *RedisSpecKubernetesConfigUpdateStrategy {
		return &v
	}).(RedisSpecKubernetesConfigUpdateStrategyPtrOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
func (o RedisSpecKubernetesConfigUpdateStrategyOutput) RollingUpdate() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigUpdateStrategy) *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate {
		return v.RollingUpdate
	}).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput)
}

// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
func (o RedisSpecKubernetesConfigUpdateStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigUpdateStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RedisSpecKubernetesConfigUpdateStrategyPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigUpdateStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigUpdateStrategy)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigUpdateStrategyPtrOutput) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutput() RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyPtrOutput) ToRedisSpecKubernetesConfigUpdateStrategyPtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyPtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyPtrOutput) Elem() RedisSpecKubernetesConfigUpdateStrategyOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigUpdateStrategy) RedisSpecKubernetesConfigUpdateStrategy {
		if v != nil {
			return *v
		}
		var ret RedisSpecKubernetesConfigUpdateStrategy
		return ret
	}).(RedisSpecKubernetesConfigUpdateStrategyOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
func (o RedisSpecKubernetesConfigUpdateStrategyPtrOutput) RollingUpdate() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigUpdateStrategy) *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput)
}

// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
func (o RedisSpecKubernetesConfigUpdateStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigUpdateStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
type RedisSpecKubernetesConfigUpdateStrategyRollingUpdate struct {
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
	// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
	Partition *int `pulumi:"partition"`
}

// RedisSpecKubernetesConfigUpdateStrategyRollingUpdateInput is an input type that accepts RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs and RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigUpdateStrategyRollingUpdateInput` via:
//
//	RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs{...}
type RedisSpecKubernetesConfigUpdateStrategyRollingUpdateInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput
	ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutputWithContext(context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
type RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs struct {
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
	// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
	Partition pulumi.IntPtrInput `pulumi:"partition"`
}

func (RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategyRollingUpdate)(nil)).Elem()
}

func (i RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput {
	return i.ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput)
}

func (i RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return i.ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (i RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput).ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(ctx)
}

// RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrInput is an input type that accepts RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs, RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtr and RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput values.
// You can construct a concrete instance of `RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrInput` via:
//
//	        RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs{...}
//
//	or:
//
//	        nil
type RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrInput interface {
	pulumi.Input

	ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput
	ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput
}

type redisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrType RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs

func RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtr(v *RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs) RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrInput {
	return (*redisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrType)(v)
}

func (*redisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigUpdateStrategyRollingUpdate)(nil)).Elem()
}

func (i *redisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrType) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return i.ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (i *redisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrType) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput)
}

// RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
type RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategyRollingUpdate)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return o.ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(context.Background())
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecKubernetesConfigUpdateStrategyRollingUpdate) *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate {
		return &v
	}).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigUpdateStrategyRollingUpdate) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecKubernetesConfigUpdateStrategyRollingUpdate) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

type RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecKubernetesConfigUpdateStrategyRollingUpdate)(nil)).Elem()
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput() RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput) ToRedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutputWithContext(ctx context.Context) RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput {
	return o
}

func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput) Elem() RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate) RedisSpecKubernetesConfigUpdateStrategyRollingUpdate {
		if v != nil {
			return *v
		}
		var ret RedisSpecKubernetesConfigUpdateStrategyRollingUpdate
		return ret
	}).(RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput)
}

// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
func (o RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecKubernetesConfigUpdateStrategyRollingUpdate) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
type RedisSpecLivenessProbe struct {
	FailureThreshold    *int `pulumi:"failureThreshold"`
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	PeriodSeconds       *int `pulumi:"periodSeconds"`
	SuccessThreshold    *int `pulumi:"successThreshold"`
	TimeoutSeconds      *int `pulumi:"timeoutSeconds"`
}

// Defaults sets the appropriate defaults for RedisSpecLivenessProbe
func (val *RedisSpecLivenessProbe) Defaults() *RedisSpecLivenessProbe {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 3
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.InitialDelaySeconds == nil {
		initialDelaySeconds_ := 1
		tmp.InitialDelaySeconds = &initialDelaySeconds_
	}
	if tmp.PeriodSeconds == nil {
		periodSeconds_ := 10
		tmp.PeriodSeconds = &periodSeconds_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.TimeoutSeconds == nil {
		timeoutSeconds_ := 1
		tmp.TimeoutSeconds = &timeoutSeconds_
	}
	return &tmp
}

// RedisSpecLivenessProbeInput is an input type that accepts RedisSpecLivenessProbeArgs and RedisSpecLivenessProbeOutput values.
// You can construct a concrete instance of `RedisSpecLivenessProbeInput` via:
//
//	RedisSpecLivenessProbeArgs{...}
type RedisSpecLivenessProbeInput interface {
	pulumi.Input

	ToRedisSpecLivenessProbeOutput() RedisSpecLivenessProbeOutput
	ToRedisSpecLivenessProbeOutputWithContext(context.Context) RedisSpecLivenessProbeOutput
}

// Probe is a interface for ReadinessProbe and LivenessProbe
type RedisSpecLivenessProbeArgs struct {
	FailureThreshold    pulumi.IntPtrInput `pulumi:"failureThreshold"`
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	PeriodSeconds       pulumi.IntPtrInput `pulumi:"periodSeconds"`
	SuccessThreshold    pulumi.IntPtrInput `pulumi:"successThreshold"`
	TimeoutSeconds      pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

// Defaults sets the appropriate defaults for RedisSpecLivenessProbeArgs
func (val *RedisSpecLivenessProbeArgs) Defaults() *RedisSpecLivenessProbeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		tmp.FailureThreshold = pulumi.IntPtr(3)
	}
	if tmp.InitialDelaySeconds == nil {
		tmp.InitialDelaySeconds = pulumi.IntPtr(1)
	}
	if tmp.PeriodSeconds == nil {
		tmp.PeriodSeconds = pulumi.IntPtr(10)
	}
	if tmp.SuccessThreshold == nil {
		tmp.SuccessThreshold = pulumi.IntPtr(1)
	}
	if tmp.TimeoutSeconds == nil {
		tmp.TimeoutSeconds = pulumi.IntPtr(1)
	}
	return &tmp
}
func (RedisSpecLivenessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecLivenessProbe)(nil)).Elem()
}

func (i RedisSpecLivenessProbeArgs) ToRedisSpecLivenessProbeOutput() RedisSpecLivenessProbeOutput {
	return i.ToRedisSpecLivenessProbeOutputWithContext(context.Background())
}

func (i RedisSpecLivenessProbeArgs) ToRedisSpecLivenessProbeOutputWithContext(ctx context.Context) RedisSpecLivenessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecLivenessProbeOutput)
}

func (i RedisSpecLivenessProbeArgs) ToRedisSpecLivenessProbePtrOutput() RedisSpecLivenessProbePtrOutput {
	return i.ToRedisSpecLivenessProbePtrOutputWithContext(context.Background())
}

func (i RedisSpecLivenessProbeArgs) ToRedisSpecLivenessProbePtrOutputWithContext(ctx context.Context) RedisSpecLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecLivenessProbeOutput).ToRedisSpecLivenessProbePtrOutputWithContext(ctx)
}

// RedisSpecLivenessProbePtrInput is an input type that accepts RedisSpecLivenessProbeArgs, RedisSpecLivenessProbePtr and RedisSpecLivenessProbePtrOutput values.
// You can construct a concrete instance of `RedisSpecLivenessProbePtrInput` via:
//
//	        RedisSpecLivenessProbeArgs{...}
//
//	or:
//
//	        nil
type RedisSpecLivenessProbePtrInput interface {
	pulumi.Input

	ToRedisSpecLivenessProbePtrOutput() RedisSpecLivenessProbePtrOutput
	ToRedisSpecLivenessProbePtrOutputWithContext(context.Context) RedisSpecLivenessProbePtrOutput
}

type redisSpecLivenessProbePtrType RedisSpecLivenessProbeArgs

func RedisSpecLivenessProbePtr(v *RedisSpecLivenessProbeArgs) RedisSpecLivenessProbePtrInput {
	return (*redisSpecLivenessProbePtrType)(v)
}

func (*redisSpecLivenessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecLivenessProbe)(nil)).Elem()
}

func (i *redisSpecLivenessProbePtrType) ToRedisSpecLivenessProbePtrOutput() RedisSpecLivenessProbePtrOutput {
	return i.ToRedisSpecLivenessProbePtrOutputWithContext(context.Background())
}

func (i *redisSpecLivenessProbePtrType) ToRedisSpecLivenessProbePtrOutputWithContext(ctx context.Context) RedisSpecLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecLivenessProbePtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
type RedisSpecLivenessProbeOutput struct{ *pulumi.OutputState }

func (RedisSpecLivenessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecLivenessProbe)(nil)).Elem()
}

func (o RedisSpecLivenessProbeOutput) ToRedisSpecLivenessProbeOutput() RedisSpecLivenessProbeOutput {
	return o
}

func (o RedisSpecLivenessProbeOutput) ToRedisSpecLivenessProbeOutputWithContext(ctx context.Context) RedisSpecLivenessProbeOutput {
	return o
}

func (o RedisSpecLivenessProbeOutput) ToRedisSpecLivenessProbePtrOutput() RedisSpecLivenessProbePtrOutput {
	return o.ToRedisSpecLivenessProbePtrOutputWithContext(context.Background())
}

func (o RedisSpecLivenessProbeOutput) ToRedisSpecLivenessProbePtrOutputWithContext(ctx context.Context) RedisSpecLivenessProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecLivenessProbe) *RedisSpecLivenessProbe {
		return &v
	}).(RedisSpecLivenessProbePtrOutput)
}

func (o RedisSpecLivenessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecLivenessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecLivenessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecLivenessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecLivenessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecLivenessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type RedisSpecLivenessProbePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecLivenessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecLivenessProbe)(nil)).Elem()
}

func (o RedisSpecLivenessProbePtrOutput) ToRedisSpecLivenessProbePtrOutput() RedisSpecLivenessProbePtrOutput {
	return o
}

func (o RedisSpecLivenessProbePtrOutput) ToRedisSpecLivenessProbePtrOutputWithContext(ctx context.Context) RedisSpecLivenessProbePtrOutput {
	return o
}

func (o RedisSpecLivenessProbePtrOutput) Elem() RedisSpecLivenessProbeOutput {
	return o.ApplyT(func(v *RedisSpecLivenessProbe) RedisSpecLivenessProbe {
		if v != nil {
			return *v
		}
		var ret RedisSpecLivenessProbe
		return ret
	}).(RedisSpecLivenessProbeOutput)
}

func (o RedisSpecLivenessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecLivenessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type RedisSpecNodeSelector struct {
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type RedisSpecPodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//      If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup *int `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions *RedisSpecPodSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile *RedisSpecPodSecurityContextSeccompProfile `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []int `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls []RedisSpecPodSecurityContextSysctls `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions *RedisSpecPodSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// RedisSpecPodSecurityContextInput is an input type that accepts RedisSpecPodSecurityContextArgs and RedisSpecPodSecurityContextOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextInput` via:
//
//	RedisSpecPodSecurityContextArgs{...}
type RedisSpecPodSecurityContextInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextOutput() RedisSpecPodSecurityContextOutput
	ToRedisSpecPodSecurityContextOutputWithContext(context.Context) RedisSpecPodSecurityContextOutput
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type RedisSpecPodSecurityContextArgs struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
	//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	//      If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
	FsGroup pulumi.IntPtrInput `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy pulumi.StringPtrInput `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions RedisSpecPodSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile RedisSpecPodSecurityContextSeccompProfilePtrInput `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
	Sysctls RedisSpecPodSecurityContextSysctlsArrayInput `pulumi:"sysctls"`
	// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions RedisSpecPodSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (RedisSpecPodSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContext)(nil)).Elem()
}

func (i RedisSpecPodSecurityContextArgs) ToRedisSpecPodSecurityContextOutput() RedisSpecPodSecurityContextOutput {
	return i.ToRedisSpecPodSecurityContextOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextArgs) ToRedisSpecPodSecurityContextOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextOutput)
}

func (i RedisSpecPodSecurityContextArgs) ToRedisSpecPodSecurityContextPtrOutput() RedisSpecPodSecurityContextPtrOutput {
	return i.ToRedisSpecPodSecurityContextPtrOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextArgs) ToRedisSpecPodSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextOutput).ToRedisSpecPodSecurityContextPtrOutputWithContext(ctx)
}

// RedisSpecPodSecurityContextPtrInput is an input type that accepts RedisSpecPodSecurityContextArgs, RedisSpecPodSecurityContextPtr and RedisSpecPodSecurityContextPtrOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextPtrInput` via:
//
//	        RedisSpecPodSecurityContextArgs{...}
//
//	or:
//
//	        nil
type RedisSpecPodSecurityContextPtrInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextPtrOutput() RedisSpecPodSecurityContextPtrOutput
	ToRedisSpecPodSecurityContextPtrOutputWithContext(context.Context) RedisSpecPodSecurityContextPtrOutput
}

type redisSpecPodSecurityContextPtrType RedisSpecPodSecurityContextArgs

func RedisSpecPodSecurityContextPtr(v *RedisSpecPodSecurityContextArgs) RedisSpecPodSecurityContextPtrInput {
	return (*redisSpecPodSecurityContextPtrType)(v)
}

func (*redisSpecPodSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContext)(nil)).Elem()
}

func (i *redisSpecPodSecurityContextPtrType) ToRedisSpecPodSecurityContextPtrOutput() RedisSpecPodSecurityContextPtrOutput {
	return i.ToRedisSpecPodSecurityContextPtrOutputWithContext(context.Background())
}

func (i *redisSpecPodSecurityContextPtrType) ToRedisSpecPodSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextPtrOutput)
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
type RedisSpecPodSecurityContextOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContext)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextOutput) ToRedisSpecPodSecurityContextOutput() RedisSpecPodSecurityContextOutput {
	return o
}

func (o RedisSpecPodSecurityContextOutput) ToRedisSpecPodSecurityContextOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextOutput {
	return o
}

func (o RedisSpecPodSecurityContextOutput) ToRedisSpecPodSecurityContextPtrOutput() RedisSpecPodSecurityContextPtrOutput {
	return o.ToRedisSpecPodSecurityContextPtrOutputWithContext(context.Background())
}

func (o RedisSpecPodSecurityContextOutput) ToRedisSpecPodSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecPodSecurityContext) *RedisSpecPodSecurityContext {
		return &v
	}).(RedisSpecPodSecurityContextPtrOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//     If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *int { return v.FsGroup }).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *string { return v.FsGroupChangePolicy }).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecPodSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) SeLinuxOptions() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *RedisSpecPodSecurityContextSeLinuxOptions {
		return v.SeLinuxOptions
	}).(RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) SeccompProfile() RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *RedisSpecPodSecurityContextSeccompProfile {
		return v.SeccompProfile
	}).(RedisSpecPodSecurityContextSeccompProfilePtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) []int { return v.SupplementalGroups }).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextOutput) Sysctls() RedisSpecPodSecurityContextSysctlsArrayOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) []RedisSpecPodSecurityContextSysctls { return v.Sysctls }).(RedisSpecPodSecurityContextSysctlsArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o RedisSpecPodSecurityContextOutput) WindowsOptions() RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContext) *RedisSpecPodSecurityContextWindowsOptions {
		return v.WindowsOptions
	}).(RedisSpecPodSecurityContextWindowsOptionsPtrOutput)
}

type RedisSpecPodSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContext)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextPtrOutput) ToRedisSpecPodSecurityContextPtrOutput() RedisSpecPodSecurityContextPtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextPtrOutput) ToRedisSpecPodSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextPtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextPtrOutput) Elem() RedisSpecPodSecurityContextOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) RedisSpecPodSecurityContext {
		if v != nil {
			return *v
		}
		var ret RedisSpecPodSecurityContext
		return ret
	}).(RedisSpecPodSecurityContextOutput)
}

// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
//  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
//     If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.FsGroup
	}).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.FsGroupChangePolicy
	}).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecPodSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) SeLinuxOptions() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *RedisSpecPodSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) SeccompProfile() RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *RedisSpecPodSecurityContextSeccompProfile {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(RedisSpecPodSecurityContextSeccompProfilePtrOutput)
}

// A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) []int {
		if v == nil {
			return nil
		}
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecPodSecurityContextPtrOutput) Sysctls() RedisSpecPodSecurityContextSysctlsArrayOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) []RedisSpecPodSecurityContextSysctls {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(RedisSpecPodSecurityContextSysctlsArrayOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o RedisSpecPodSecurityContextPtrOutput) WindowsOptions() RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContext) *RedisSpecPodSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(RedisSpecPodSecurityContextWindowsOptionsPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecPodSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// RedisSpecPodSecurityContextSeLinuxOptionsInput is an input type that accepts RedisSpecPodSecurityContextSeLinuxOptionsArgs and RedisSpecPodSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextSeLinuxOptionsInput` via:
//
//	RedisSpecPodSecurityContextSeLinuxOptionsArgs{...}
type RedisSpecPodSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextSeLinuxOptionsOutput() RedisSpecPodSecurityContextSeLinuxOptionsOutput
	ToRedisSpecPodSecurityContextSeLinuxOptionsOutputWithContext(context.Context) RedisSpecPodSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecPodSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RedisSpecPodSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i RedisSpecPodSecurityContextSeLinuxOptionsArgs) ToRedisSpecPodSecurityContextSeLinuxOptionsOutput() RedisSpecPodSecurityContextSeLinuxOptionsOutput {
	return i.ToRedisSpecPodSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextSeLinuxOptionsArgs) ToRedisSpecPodSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSeLinuxOptionsOutput)
}

func (i RedisSpecPodSecurityContextSeLinuxOptionsArgs) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutput() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextSeLinuxOptionsArgs) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSeLinuxOptionsOutput).ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// RedisSpecPodSecurityContextSeLinuxOptionsPtrInput is an input type that accepts RedisSpecPodSecurityContextSeLinuxOptionsArgs, RedisSpecPodSecurityContextSeLinuxOptionsPtr and RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextSeLinuxOptionsPtrInput` via:
//
//	        RedisSpecPodSecurityContextSeLinuxOptionsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecPodSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutput() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput
	ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput
}

type redisSpecPodSecurityContextSeLinuxOptionsPtrType RedisSpecPodSecurityContextSeLinuxOptionsArgs

func RedisSpecPodSecurityContextSeLinuxOptionsPtr(v *RedisSpecPodSecurityContextSeLinuxOptionsArgs) RedisSpecPodSecurityContextSeLinuxOptionsPtrInput {
	return (*redisSpecPodSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*redisSpecPodSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *redisSpecPodSecurityContextSeLinuxOptionsPtrType) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutput() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *redisSpecPodSecurityContextSeLinuxOptionsPtrType) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecPodSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) ToRedisSpecPodSecurityContextSeLinuxOptionsOutput() RedisSpecPodSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) ToRedisSpecPodSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutput() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecPodSecurityContextSeLinuxOptions) *RedisSpecPodSecurityContextSeLinuxOptions {
		return &v
	}).(RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutput() RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) ToRedisSpecPodSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) Elem() RedisSpecPodSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeLinuxOptions) RedisSpecPodSecurityContextSeLinuxOptions {
		if v != nil {
			return *v
		}
		var ret RedisSpecPodSecurityContextSeLinuxOptions
		return ret
	}).(RedisSpecPodSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecPodSecurityContextSeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `pulumi:"type"`
}

// RedisSpecPodSecurityContextSeccompProfileInput is an input type that accepts RedisSpecPodSecurityContextSeccompProfileArgs and RedisSpecPodSecurityContextSeccompProfileOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextSeccompProfileInput` via:
//
//	RedisSpecPodSecurityContextSeccompProfileArgs{...}
type RedisSpecPodSecurityContextSeccompProfileInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextSeccompProfileOutput() RedisSpecPodSecurityContextSeccompProfileOutput
	ToRedisSpecPodSecurityContextSeccompProfileOutputWithContext(context.Context) RedisSpecPodSecurityContextSeccompProfileOutput
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecPodSecurityContextSeccompProfileArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisSpecPodSecurityContextSeccompProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextSeccompProfile)(nil)).Elem()
}

func (i RedisSpecPodSecurityContextSeccompProfileArgs) ToRedisSpecPodSecurityContextSeccompProfileOutput() RedisSpecPodSecurityContextSeccompProfileOutput {
	return i.ToRedisSpecPodSecurityContextSeccompProfileOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextSeccompProfileArgs) ToRedisSpecPodSecurityContextSeccompProfileOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeccompProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSeccompProfileOutput)
}

func (i RedisSpecPodSecurityContextSeccompProfileArgs) ToRedisSpecPodSecurityContextSeccompProfilePtrOutput() RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return i.ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextSeccompProfileArgs) ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSeccompProfileOutput).ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(ctx)
}

// RedisSpecPodSecurityContextSeccompProfilePtrInput is an input type that accepts RedisSpecPodSecurityContextSeccompProfileArgs, RedisSpecPodSecurityContextSeccompProfilePtr and RedisSpecPodSecurityContextSeccompProfilePtrOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextSeccompProfilePtrInput` via:
//
//	        RedisSpecPodSecurityContextSeccompProfileArgs{...}
//
//	or:
//
//	        nil
type RedisSpecPodSecurityContextSeccompProfilePtrInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextSeccompProfilePtrOutput() RedisSpecPodSecurityContextSeccompProfilePtrOutput
	ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(context.Context) RedisSpecPodSecurityContextSeccompProfilePtrOutput
}

type redisSpecPodSecurityContextSeccompProfilePtrType RedisSpecPodSecurityContextSeccompProfileArgs

func RedisSpecPodSecurityContextSeccompProfilePtr(v *RedisSpecPodSecurityContextSeccompProfileArgs) RedisSpecPodSecurityContextSeccompProfilePtrInput {
	return (*redisSpecPodSecurityContextSeccompProfilePtrType)(v)
}

func (*redisSpecPodSecurityContextSeccompProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContextSeccompProfile)(nil)).Elem()
}

func (i *redisSpecPodSecurityContextSeccompProfilePtrType) ToRedisSpecPodSecurityContextSeccompProfilePtrOutput() RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return i.ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i *redisSpecPodSecurityContextSeccompProfilePtrType) ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSeccompProfilePtrOutput)
}

// The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecPodSecurityContextSeccompProfileOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextSeccompProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextSeccompProfile)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextSeccompProfileOutput) ToRedisSpecPodSecurityContextSeccompProfileOutput() RedisSpecPodSecurityContextSeccompProfileOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeccompProfileOutput) ToRedisSpecPodSecurityContextSeccompProfileOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeccompProfileOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeccompProfileOutput) ToRedisSpecPodSecurityContextSeccompProfilePtrOutput() RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return o.ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (o RedisSpecPodSecurityContextSeccompProfileOutput) ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecPodSecurityContextSeccompProfile) *RedisSpecPodSecurityContextSeccompProfile {
		return &v
	}).(RedisSpecPodSecurityContextSeccompProfilePtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
func (o RedisSpecPodSecurityContextSeccompProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSeccompProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
//	Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o RedisSpecPodSecurityContextSeccompProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSeccompProfile) string { return v.Type }).(pulumi.StringOutput)
}

type RedisSpecPodSecurityContextSeccompProfilePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextSeccompProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContextSeccompProfile)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextSeccompProfilePtrOutput) ToRedisSpecPodSecurityContextSeccompProfilePtrOutput() RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeccompProfilePtrOutput) ToRedisSpecPodSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextSeccompProfilePtrOutput) Elem() RedisSpecPodSecurityContextSeccompProfileOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeccompProfile) RedisSpecPodSecurityContextSeccompProfile {
		if v != nil {
			return *v
		}
		var ret RedisSpecPodSecurityContextSeccompProfile
		return ret
	}).(RedisSpecPodSecurityContextSeccompProfileOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
func (o RedisSpecPodSecurityContextSeccompProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
//	Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o RedisSpecPodSecurityContextSeccompProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Sysctl defines a kernel parameter to be set
type RedisSpecPodSecurityContextSysctls struct {
	// Name of a property to set
	Name string `pulumi:"name"`
	// Value of a property to set
	Value string `pulumi:"value"`
}

// RedisSpecPodSecurityContextSysctlsInput is an input type that accepts RedisSpecPodSecurityContextSysctlsArgs and RedisSpecPodSecurityContextSysctlsOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextSysctlsInput` via:
//
//	RedisSpecPodSecurityContextSysctlsArgs{...}
type RedisSpecPodSecurityContextSysctlsInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextSysctlsOutput() RedisSpecPodSecurityContextSysctlsOutput
	ToRedisSpecPodSecurityContextSysctlsOutputWithContext(context.Context) RedisSpecPodSecurityContextSysctlsOutput
}

// Sysctl defines a kernel parameter to be set
type RedisSpecPodSecurityContextSysctlsArgs struct {
	// Name of a property to set
	Name pulumi.StringInput `pulumi:"name"`
	// Value of a property to set
	Value pulumi.StringInput `pulumi:"value"`
}

func (RedisSpecPodSecurityContextSysctlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextSysctls)(nil)).Elem()
}

func (i RedisSpecPodSecurityContextSysctlsArgs) ToRedisSpecPodSecurityContextSysctlsOutput() RedisSpecPodSecurityContextSysctlsOutput {
	return i.ToRedisSpecPodSecurityContextSysctlsOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextSysctlsArgs) ToRedisSpecPodSecurityContextSysctlsOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSysctlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSysctlsOutput)
}

// RedisSpecPodSecurityContextSysctlsArrayInput is an input type that accepts RedisSpecPodSecurityContextSysctlsArray and RedisSpecPodSecurityContextSysctlsArrayOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextSysctlsArrayInput` via:
//
//	RedisSpecPodSecurityContextSysctlsArray{ RedisSpecPodSecurityContextSysctlsArgs{...} }
type RedisSpecPodSecurityContextSysctlsArrayInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextSysctlsArrayOutput() RedisSpecPodSecurityContextSysctlsArrayOutput
	ToRedisSpecPodSecurityContextSysctlsArrayOutputWithContext(context.Context) RedisSpecPodSecurityContextSysctlsArrayOutput
}

type RedisSpecPodSecurityContextSysctlsArray []RedisSpecPodSecurityContextSysctlsInput

func (RedisSpecPodSecurityContextSysctlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecPodSecurityContextSysctls)(nil)).Elem()
}

func (i RedisSpecPodSecurityContextSysctlsArray) ToRedisSpecPodSecurityContextSysctlsArrayOutput() RedisSpecPodSecurityContextSysctlsArrayOutput {
	return i.ToRedisSpecPodSecurityContextSysctlsArrayOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextSysctlsArray) ToRedisSpecPodSecurityContextSysctlsArrayOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSysctlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextSysctlsArrayOutput)
}

// Sysctl defines a kernel parameter to be set
type RedisSpecPodSecurityContextSysctlsOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextSysctlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextSysctls)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextSysctlsOutput) ToRedisSpecPodSecurityContextSysctlsOutput() RedisSpecPodSecurityContextSysctlsOutput {
	return o
}

func (o RedisSpecPodSecurityContextSysctlsOutput) ToRedisSpecPodSecurityContextSysctlsOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSysctlsOutput {
	return o
}

// Name of a property to set
func (o RedisSpecPodSecurityContextSysctlsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSysctls) string { return v.Name }).(pulumi.StringOutput)
}

// Value of a property to set
func (o RedisSpecPodSecurityContextSysctlsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextSysctls) string { return v.Value }).(pulumi.StringOutput)
}

type RedisSpecPodSecurityContextSysctlsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextSysctlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecPodSecurityContextSysctls)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextSysctlsArrayOutput) ToRedisSpecPodSecurityContextSysctlsArrayOutput() RedisSpecPodSecurityContextSysctlsArrayOutput {
	return o
}

func (o RedisSpecPodSecurityContextSysctlsArrayOutput) ToRedisSpecPodSecurityContextSysctlsArrayOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextSysctlsArrayOutput {
	return o
}

func (o RedisSpecPodSecurityContextSysctlsArrayOutput) Index(i pulumi.IntInput) RedisSpecPodSecurityContextSysctlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecPodSecurityContextSysctls {
		return vs[0].([]RedisSpecPodSecurityContextSysctls)[vs[1].(int)]
	}).(RedisSpecPodSecurityContextSysctlsOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
type RedisSpecPodSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// RedisSpecPodSecurityContextWindowsOptionsInput is an input type that accepts RedisSpecPodSecurityContextWindowsOptionsArgs and RedisSpecPodSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextWindowsOptionsInput` via:
//
//	RedisSpecPodSecurityContextWindowsOptionsArgs{...}
type RedisSpecPodSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextWindowsOptionsOutput() RedisSpecPodSecurityContextWindowsOptionsOutput
	ToRedisSpecPodSecurityContextWindowsOptionsOutputWithContext(context.Context) RedisSpecPodSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
type RedisSpecPodSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (RedisSpecPodSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextWindowsOptions)(nil)).Elem()
}

func (i RedisSpecPodSecurityContextWindowsOptionsArgs) ToRedisSpecPodSecurityContextWindowsOptionsOutput() RedisSpecPodSecurityContextWindowsOptionsOutput {
	return i.ToRedisSpecPodSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextWindowsOptionsArgs) ToRedisSpecPodSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextWindowsOptionsOutput)
}

func (i RedisSpecPodSecurityContextWindowsOptionsArgs) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutput() RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return i.ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i RedisSpecPodSecurityContextWindowsOptionsArgs) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextWindowsOptionsOutput).ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// RedisSpecPodSecurityContextWindowsOptionsPtrInput is an input type that accepts RedisSpecPodSecurityContextWindowsOptionsArgs, RedisSpecPodSecurityContextWindowsOptionsPtr and RedisSpecPodSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `RedisSpecPodSecurityContextWindowsOptionsPtrInput` via:
//
//	        RedisSpecPodSecurityContextWindowsOptionsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecPodSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToRedisSpecPodSecurityContextWindowsOptionsPtrOutput() RedisSpecPodSecurityContextWindowsOptionsPtrOutput
	ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) RedisSpecPodSecurityContextWindowsOptionsPtrOutput
}

type redisSpecPodSecurityContextWindowsOptionsPtrType RedisSpecPodSecurityContextWindowsOptionsArgs

func RedisSpecPodSecurityContextWindowsOptionsPtr(v *RedisSpecPodSecurityContextWindowsOptionsArgs) RedisSpecPodSecurityContextWindowsOptionsPtrInput {
	return (*redisSpecPodSecurityContextWindowsOptionsPtrType)(v)
}

func (*redisSpecPodSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *redisSpecPodSecurityContextWindowsOptionsPtrType) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutput() RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return i.ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *redisSpecPodSecurityContextWindowsOptionsPtrType) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecPodSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
type RedisSpecPodSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecPodSecurityContextWindowsOptions)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextWindowsOptionsOutput) ToRedisSpecPodSecurityContextWindowsOptionsOutput() RedisSpecPodSecurityContextWindowsOptionsOutput {
	return o
}

func (o RedisSpecPodSecurityContextWindowsOptionsOutput) ToRedisSpecPodSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextWindowsOptionsOutput {
	return o
}

func (o RedisSpecPodSecurityContextWindowsOptionsOutput) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutput() RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return o.ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o RedisSpecPodSecurityContextWindowsOptionsOutput) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecPodSecurityContextWindowsOptions) *RedisSpecPodSecurityContextWindowsOptions {
		return &v
	}).(RedisSpecPodSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o RedisSpecPodSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o RedisSpecPodSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o RedisSpecPodSecurityContextWindowsOptionsOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextWindowsOptions) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecPodSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecPodSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type RedisSpecPodSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecPodSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecPodSecurityContextWindowsOptions)(nil)).Elem()
}

func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutput() RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) ToRedisSpecPodSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecPodSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) Elem() RedisSpecPodSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextWindowsOptions) RedisSpecPodSecurityContextWindowsOptions {
		if v != nil {
			return *v
		}
		var ret RedisSpecPodSecurityContextWindowsOptions
		return ret
	}).(RedisSpecPodSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextWindowsOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecPodSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecPodSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
type RedisSpecReadinessProbe struct {
	FailureThreshold    *int `pulumi:"failureThreshold"`
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	PeriodSeconds       *int `pulumi:"periodSeconds"`
	SuccessThreshold    *int `pulumi:"successThreshold"`
	TimeoutSeconds      *int `pulumi:"timeoutSeconds"`
}

// Defaults sets the appropriate defaults for RedisSpecReadinessProbe
func (val *RedisSpecReadinessProbe) Defaults() *RedisSpecReadinessProbe {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 3
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.InitialDelaySeconds == nil {
		initialDelaySeconds_ := 1
		tmp.InitialDelaySeconds = &initialDelaySeconds_
	}
	if tmp.PeriodSeconds == nil {
		periodSeconds_ := 10
		tmp.PeriodSeconds = &periodSeconds_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.TimeoutSeconds == nil {
		timeoutSeconds_ := 1
		tmp.TimeoutSeconds = &timeoutSeconds_
	}
	return &tmp
}

// RedisSpecReadinessProbeInput is an input type that accepts RedisSpecReadinessProbeArgs and RedisSpecReadinessProbeOutput values.
// You can construct a concrete instance of `RedisSpecReadinessProbeInput` via:
//
//	RedisSpecReadinessProbeArgs{...}
type RedisSpecReadinessProbeInput interface {
	pulumi.Input

	ToRedisSpecReadinessProbeOutput() RedisSpecReadinessProbeOutput
	ToRedisSpecReadinessProbeOutputWithContext(context.Context) RedisSpecReadinessProbeOutput
}

// Probe is a interface for ReadinessProbe and LivenessProbe
type RedisSpecReadinessProbeArgs struct {
	FailureThreshold    pulumi.IntPtrInput `pulumi:"failureThreshold"`
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	PeriodSeconds       pulumi.IntPtrInput `pulumi:"periodSeconds"`
	SuccessThreshold    pulumi.IntPtrInput `pulumi:"successThreshold"`
	TimeoutSeconds      pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

// Defaults sets the appropriate defaults for RedisSpecReadinessProbeArgs
func (val *RedisSpecReadinessProbeArgs) Defaults() *RedisSpecReadinessProbeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		tmp.FailureThreshold = pulumi.IntPtr(3)
	}
	if tmp.InitialDelaySeconds == nil {
		tmp.InitialDelaySeconds = pulumi.IntPtr(1)
	}
	if tmp.PeriodSeconds == nil {
		tmp.PeriodSeconds = pulumi.IntPtr(10)
	}
	if tmp.SuccessThreshold == nil {
		tmp.SuccessThreshold = pulumi.IntPtr(1)
	}
	if tmp.TimeoutSeconds == nil {
		tmp.TimeoutSeconds = pulumi.IntPtr(1)
	}
	return &tmp
}
func (RedisSpecReadinessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecReadinessProbe)(nil)).Elem()
}

func (i RedisSpecReadinessProbeArgs) ToRedisSpecReadinessProbeOutput() RedisSpecReadinessProbeOutput {
	return i.ToRedisSpecReadinessProbeOutputWithContext(context.Background())
}

func (i RedisSpecReadinessProbeArgs) ToRedisSpecReadinessProbeOutputWithContext(ctx context.Context) RedisSpecReadinessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecReadinessProbeOutput)
}

func (i RedisSpecReadinessProbeArgs) ToRedisSpecReadinessProbePtrOutput() RedisSpecReadinessProbePtrOutput {
	return i.ToRedisSpecReadinessProbePtrOutputWithContext(context.Background())
}

func (i RedisSpecReadinessProbeArgs) ToRedisSpecReadinessProbePtrOutputWithContext(ctx context.Context) RedisSpecReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecReadinessProbeOutput).ToRedisSpecReadinessProbePtrOutputWithContext(ctx)
}

// RedisSpecReadinessProbePtrInput is an input type that accepts RedisSpecReadinessProbeArgs, RedisSpecReadinessProbePtr and RedisSpecReadinessProbePtrOutput values.
// You can construct a concrete instance of `RedisSpecReadinessProbePtrInput` via:
//
//	        RedisSpecReadinessProbeArgs{...}
//
//	or:
//
//	        nil
type RedisSpecReadinessProbePtrInput interface {
	pulumi.Input

	ToRedisSpecReadinessProbePtrOutput() RedisSpecReadinessProbePtrOutput
	ToRedisSpecReadinessProbePtrOutputWithContext(context.Context) RedisSpecReadinessProbePtrOutput
}

type redisSpecReadinessProbePtrType RedisSpecReadinessProbeArgs

func RedisSpecReadinessProbePtr(v *RedisSpecReadinessProbeArgs) RedisSpecReadinessProbePtrInput {
	return (*redisSpecReadinessProbePtrType)(v)
}

func (*redisSpecReadinessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecReadinessProbe)(nil)).Elem()
}

func (i *redisSpecReadinessProbePtrType) ToRedisSpecReadinessProbePtrOutput() RedisSpecReadinessProbePtrOutput {
	return i.ToRedisSpecReadinessProbePtrOutputWithContext(context.Background())
}

func (i *redisSpecReadinessProbePtrType) ToRedisSpecReadinessProbePtrOutputWithContext(ctx context.Context) RedisSpecReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecReadinessProbePtrOutput)
}

// Probe is a interface for ReadinessProbe and LivenessProbe
type RedisSpecReadinessProbeOutput struct{ *pulumi.OutputState }

func (RedisSpecReadinessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecReadinessProbe)(nil)).Elem()
}

func (o RedisSpecReadinessProbeOutput) ToRedisSpecReadinessProbeOutput() RedisSpecReadinessProbeOutput {
	return o
}

func (o RedisSpecReadinessProbeOutput) ToRedisSpecReadinessProbeOutputWithContext(ctx context.Context) RedisSpecReadinessProbeOutput {
	return o
}

func (o RedisSpecReadinessProbeOutput) ToRedisSpecReadinessProbePtrOutput() RedisSpecReadinessProbePtrOutput {
	return o.ToRedisSpecReadinessProbePtrOutputWithContext(context.Background())
}

func (o RedisSpecReadinessProbeOutput) ToRedisSpecReadinessProbePtrOutputWithContext(ctx context.Context) RedisSpecReadinessProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecReadinessProbe) *RedisSpecReadinessProbe {
		return &v
	}).(RedisSpecReadinessProbePtrOutput)
}

func (o RedisSpecReadinessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecReadinessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecReadinessProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecReadinessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecReadinessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecReadinessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type RedisSpecReadinessProbePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecReadinessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecReadinessProbe)(nil)).Elem()
}

func (o RedisSpecReadinessProbePtrOutput) ToRedisSpecReadinessProbePtrOutput() RedisSpecReadinessProbePtrOutput {
	return o
}

func (o RedisSpecReadinessProbePtrOutput) ToRedisSpecReadinessProbePtrOutputWithContext(ctx context.Context) RedisSpecReadinessProbePtrOutput {
	return o
}

func (o RedisSpecReadinessProbePtrOutput) Elem() RedisSpecReadinessProbeOutput {
	return o.ApplyT(func(v *RedisSpecReadinessProbe) RedisSpecReadinessProbe {
		if v != nil {
			return *v
		}
		var ret RedisSpecReadinessProbe
		return ret
	}).(RedisSpecReadinessProbeOutput)
}

func (o RedisSpecReadinessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o RedisSpecReadinessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// RedisConfig defines the external configuration of Redis
type RedisSpecRedisConfig struct {
	AdditionalRedisConfig *string `pulumi:"additionalRedisConfig"`
}

// RedisSpecRedisConfigInput is an input type that accepts RedisSpecRedisConfigArgs and RedisSpecRedisConfigOutput values.
// You can construct a concrete instance of `RedisSpecRedisConfigInput` via:
//
//	RedisSpecRedisConfigArgs{...}
type RedisSpecRedisConfigInput interface {
	pulumi.Input

	ToRedisSpecRedisConfigOutput() RedisSpecRedisConfigOutput
	ToRedisSpecRedisConfigOutputWithContext(context.Context) RedisSpecRedisConfigOutput
}

// RedisConfig defines the external configuration of Redis
type RedisSpecRedisConfigArgs struct {
	AdditionalRedisConfig pulumi.StringPtrInput `pulumi:"additionalRedisConfig"`
}

func (RedisSpecRedisConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisConfig)(nil)).Elem()
}

func (i RedisSpecRedisConfigArgs) ToRedisSpecRedisConfigOutput() RedisSpecRedisConfigOutput {
	return i.ToRedisSpecRedisConfigOutputWithContext(context.Background())
}

func (i RedisSpecRedisConfigArgs) ToRedisSpecRedisConfigOutputWithContext(ctx context.Context) RedisSpecRedisConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisConfigOutput)
}

func (i RedisSpecRedisConfigArgs) ToRedisSpecRedisConfigPtrOutput() RedisSpecRedisConfigPtrOutput {
	return i.ToRedisSpecRedisConfigPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisConfigArgs) ToRedisSpecRedisConfigPtrOutputWithContext(ctx context.Context) RedisSpecRedisConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisConfigOutput).ToRedisSpecRedisConfigPtrOutputWithContext(ctx)
}

// RedisSpecRedisConfigPtrInput is an input type that accepts RedisSpecRedisConfigArgs, RedisSpecRedisConfigPtr and RedisSpecRedisConfigPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisConfigPtrInput` via:
//
//	        RedisSpecRedisConfigArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisConfigPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisConfigPtrOutput() RedisSpecRedisConfigPtrOutput
	ToRedisSpecRedisConfigPtrOutputWithContext(context.Context) RedisSpecRedisConfigPtrOutput
}

type redisSpecRedisConfigPtrType RedisSpecRedisConfigArgs

func RedisSpecRedisConfigPtr(v *RedisSpecRedisConfigArgs) RedisSpecRedisConfigPtrInput {
	return (*redisSpecRedisConfigPtrType)(v)
}

func (*redisSpecRedisConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisConfig)(nil)).Elem()
}

func (i *redisSpecRedisConfigPtrType) ToRedisSpecRedisConfigPtrOutput() RedisSpecRedisConfigPtrOutput {
	return i.ToRedisSpecRedisConfigPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisConfigPtrType) ToRedisSpecRedisConfigPtrOutputWithContext(ctx context.Context) RedisSpecRedisConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisConfigPtrOutput)
}

// RedisConfig defines the external configuration of Redis
type RedisSpecRedisConfigOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisConfig)(nil)).Elem()
}

func (o RedisSpecRedisConfigOutput) ToRedisSpecRedisConfigOutput() RedisSpecRedisConfigOutput {
	return o
}

func (o RedisSpecRedisConfigOutput) ToRedisSpecRedisConfigOutputWithContext(ctx context.Context) RedisSpecRedisConfigOutput {
	return o
}

func (o RedisSpecRedisConfigOutput) ToRedisSpecRedisConfigPtrOutput() RedisSpecRedisConfigPtrOutput {
	return o.ToRedisSpecRedisConfigPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisConfigOutput) ToRedisSpecRedisConfigPtrOutputWithContext(ctx context.Context) RedisSpecRedisConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisConfig) *RedisSpecRedisConfig {
		return &v
	}).(RedisSpecRedisConfigPtrOutput)
}

func (o RedisSpecRedisConfigOutput) AdditionalRedisConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisConfig) *string { return v.AdditionalRedisConfig }).(pulumi.StringPtrOutput)
}

type RedisSpecRedisConfigPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisConfig)(nil)).Elem()
}

func (o RedisSpecRedisConfigPtrOutput) ToRedisSpecRedisConfigPtrOutput() RedisSpecRedisConfigPtrOutput {
	return o
}

func (o RedisSpecRedisConfigPtrOutput) ToRedisSpecRedisConfigPtrOutputWithContext(ctx context.Context) RedisSpecRedisConfigPtrOutput {
	return o
}

func (o RedisSpecRedisConfigPtrOutput) Elem() RedisSpecRedisConfigOutput {
	return o.ApplyT(func(v *RedisSpecRedisConfig) RedisSpecRedisConfig {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisConfig
		return ret
	}).(RedisSpecRedisConfigOutput)
}

func (o RedisSpecRedisConfigPtrOutput) AdditionalRedisConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisConfig) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalRedisConfig
	}).(pulumi.StringPtrOutput)
}

// RedisExporter interface will have the information for redis exporter related stuff
type RedisSpecRedisExporter struct {
	Enabled *bool                       `pulumi:"enabled"`
	Env     []RedisSpecRedisExporterEnv `pulumi:"env"`
	Image   string                      `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *RedisSpecRedisExporterResources `pulumi:"resources"`
}

// RedisSpecRedisExporterInput is an input type that accepts RedisSpecRedisExporterArgs and RedisSpecRedisExporterOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterInput` via:
//
//	RedisSpecRedisExporterArgs{...}
type RedisSpecRedisExporterInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterOutput() RedisSpecRedisExporterOutput
	ToRedisSpecRedisExporterOutputWithContext(context.Context) RedisSpecRedisExporterOutput
}

// RedisExporter interface will have the information for redis exporter related stuff
type RedisSpecRedisExporterArgs struct {
	Enabled pulumi.BoolPtrInput                 `pulumi:"enabled"`
	Env     RedisSpecRedisExporterEnvArrayInput `pulumi:"env"`
	Image   pulumi.StringInput                  `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// ResourceRequirements describes the compute resource requirements.
	Resources RedisSpecRedisExporterResourcesPtrInput `pulumi:"resources"`
}

func (RedisSpecRedisExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporter)(nil)).Elem()
}

func (i RedisSpecRedisExporterArgs) ToRedisSpecRedisExporterOutput() RedisSpecRedisExporterOutput {
	return i.ToRedisSpecRedisExporterOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterArgs) ToRedisSpecRedisExporterOutputWithContext(ctx context.Context) RedisSpecRedisExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterOutput)
}

func (i RedisSpecRedisExporterArgs) ToRedisSpecRedisExporterPtrOutput() RedisSpecRedisExporterPtrOutput {
	return i.ToRedisSpecRedisExporterPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterArgs) ToRedisSpecRedisExporterPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterOutput).ToRedisSpecRedisExporterPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterPtrInput is an input type that accepts RedisSpecRedisExporterArgs, RedisSpecRedisExporterPtr and RedisSpecRedisExporterPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterPtrInput` via:
//
//	        RedisSpecRedisExporterArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterPtrOutput() RedisSpecRedisExporterPtrOutput
	ToRedisSpecRedisExporterPtrOutputWithContext(context.Context) RedisSpecRedisExporterPtrOutput
}

type redisSpecRedisExporterPtrType RedisSpecRedisExporterArgs

func RedisSpecRedisExporterPtr(v *RedisSpecRedisExporterArgs) RedisSpecRedisExporterPtrInput {
	return (*redisSpecRedisExporterPtrType)(v)
}

func (*redisSpecRedisExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporter)(nil)).Elem()
}

func (i *redisSpecRedisExporterPtrType) ToRedisSpecRedisExporterPtrOutput() RedisSpecRedisExporterPtrOutput {
	return i.ToRedisSpecRedisExporterPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterPtrType) ToRedisSpecRedisExporterPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterPtrOutput)
}

// RedisExporter interface will have the information for redis exporter related stuff
type RedisSpecRedisExporterOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporter)(nil)).Elem()
}

func (o RedisSpecRedisExporterOutput) ToRedisSpecRedisExporterOutput() RedisSpecRedisExporterOutput {
	return o
}

func (o RedisSpecRedisExporterOutput) ToRedisSpecRedisExporterOutputWithContext(ctx context.Context) RedisSpecRedisExporterOutput {
	return o
}

func (o RedisSpecRedisExporterOutput) ToRedisSpecRedisExporterPtrOutput() RedisSpecRedisExporterPtrOutput {
	return o.ToRedisSpecRedisExporterPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterOutput) ToRedisSpecRedisExporterPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporter) *RedisSpecRedisExporter {
		return &v
	}).(RedisSpecRedisExporterPtrOutput)
}

func (o RedisSpecRedisExporterOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporter) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RedisSpecRedisExporterOutput) Env() RedisSpecRedisExporterEnvArrayOutput {
	return o.ApplyT(func(v RedisSpecRedisExporter) []RedisSpecRedisExporterEnv { return v.Env }).(RedisSpecRedisExporterEnvArrayOutput)
}

func (o RedisSpecRedisExporterOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporter) string { return v.Image }).(pulumi.StringOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecRedisExporterOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporter) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecRedisExporterOutput) Resources() RedisSpecRedisExporterResourcesPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporter) *RedisSpecRedisExporterResources { return v.Resources }).(RedisSpecRedisExporterResourcesPtrOutput)
}

type RedisSpecRedisExporterPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporter)(nil)).Elem()
}

func (o RedisSpecRedisExporterPtrOutput) ToRedisSpecRedisExporterPtrOutput() RedisSpecRedisExporterPtrOutput {
	return o
}

func (o RedisSpecRedisExporterPtrOutput) ToRedisSpecRedisExporterPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterPtrOutput {
	return o
}

func (o RedisSpecRedisExporterPtrOutput) Elem() RedisSpecRedisExporterOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporter) RedisSpecRedisExporter {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporter
		return ret
	}).(RedisSpecRedisExporterOutput)
}

func (o RedisSpecRedisExporterPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporter) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o RedisSpecRedisExporterPtrOutput) Env() RedisSpecRedisExporterEnvArrayOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporter) []RedisSpecRedisExporterEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(RedisSpecRedisExporterEnvArrayOutput)
}

func (o RedisSpecRedisExporterPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporter) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecRedisExporterPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporter) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecRedisExporterPtrOutput) Resources() RedisSpecRedisExporterResourcesPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporter) *RedisSpecRedisExporterResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(RedisSpecRedisExporterResourcesPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecRedisExporterEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *RedisSpecRedisExporterEnvValueFrom `pulumi:"valueFrom"`
}

// RedisSpecRedisExporterEnvInput is an input type that accepts RedisSpecRedisExporterEnvArgs and RedisSpecRedisExporterEnvOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvInput` via:
//
//	RedisSpecRedisExporterEnvArgs{...}
type RedisSpecRedisExporterEnvInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvOutput() RedisSpecRedisExporterEnvOutput
	ToRedisSpecRedisExporterEnvOutputWithContext(context.Context) RedisSpecRedisExporterEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecRedisExporterEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom RedisSpecRedisExporterEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (RedisSpecRedisExporterEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnv)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvArgs) ToRedisSpecRedisExporterEnvOutput() RedisSpecRedisExporterEnvOutput {
	return i.ToRedisSpecRedisExporterEnvOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvArgs) ToRedisSpecRedisExporterEnvOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvOutput)
}

// RedisSpecRedisExporterEnvArrayInput is an input type that accepts RedisSpecRedisExporterEnvArray and RedisSpecRedisExporterEnvArrayOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvArrayInput` via:
//
//	RedisSpecRedisExporterEnvArray{ RedisSpecRedisExporterEnvArgs{...} }
type RedisSpecRedisExporterEnvArrayInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvArrayOutput() RedisSpecRedisExporterEnvArrayOutput
	ToRedisSpecRedisExporterEnvArrayOutputWithContext(context.Context) RedisSpecRedisExporterEnvArrayOutput
}

type RedisSpecRedisExporterEnvArray []RedisSpecRedisExporterEnvInput

func (RedisSpecRedisExporterEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecRedisExporterEnv)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvArray) ToRedisSpecRedisExporterEnvArrayOutput() RedisSpecRedisExporterEnvArrayOutput {
	return i.ToRedisSpecRedisExporterEnvArrayOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvArray) ToRedisSpecRedisExporterEnvArrayOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecRedisExporterEnvOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnv)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvOutput) ToRedisSpecRedisExporterEnvOutput() RedisSpecRedisExporterEnvOutput {
	return o
}

func (o RedisSpecRedisExporterEnvOutput) ToRedisSpecRedisExporterEnvOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o RedisSpecRedisExporterEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o RedisSpecRedisExporterEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o RedisSpecRedisExporterEnvOutput) ValueFrom() RedisSpecRedisExporterEnvValueFromPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnv) *RedisSpecRedisExporterEnvValueFrom { return v.ValueFrom }).(RedisSpecRedisExporterEnvValueFromPtrOutput)
}

type RedisSpecRedisExporterEnvArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecRedisExporterEnv)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvArrayOutput) ToRedisSpecRedisExporterEnvArrayOutput() RedisSpecRedisExporterEnvArrayOutput {
	return o
}

func (o RedisSpecRedisExporterEnvArrayOutput) ToRedisSpecRedisExporterEnvArrayOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvArrayOutput {
	return o
}

func (o RedisSpecRedisExporterEnvArrayOutput) Index(i pulumi.IntInput) RedisSpecRedisExporterEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecRedisExporterEnv {
		return vs[0].([]RedisSpecRedisExporterEnv)[vs[1].(int)]
	}).(RedisSpecRedisExporterEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecRedisExporterEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *RedisSpecRedisExporterEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *RedisSpecRedisExporterEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *RedisSpecRedisExporterEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// RedisSpecRedisExporterEnvValueFromInput is an input type that accepts RedisSpecRedisExporterEnvValueFromArgs and RedisSpecRedisExporterEnvValueFromOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromInput` via:
//
//	RedisSpecRedisExporterEnvValueFromArgs{...}
type RedisSpecRedisExporterEnvValueFromInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromOutput() RedisSpecRedisExporterEnvValueFromOutput
	ToRedisSpecRedisExporterEnvValueFromOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecRedisExporterEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef RedisSpecRedisExporterEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (RedisSpecRedisExporterEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFrom)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvValueFromArgs) ToRedisSpecRedisExporterEnvValueFromOutput() RedisSpecRedisExporterEnvValueFromOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromArgs) ToRedisSpecRedisExporterEnvValueFromOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromOutput)
}

func (i RedisSpecRedisExporterEnvValueFromArgs) ToRedisSpecRedisExporterEnvValueFromPtrOutput() RedisSpecRedisExporterEnvValueFromPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromArgs) ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromOutput).ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterEnvValueFromPtrInput is an input type that accepts RedisSpecRedisExporterEnvValueFromArgs, RedisSpecRedisExporterEnvValueFromPtr and RedisSpecRedisExporterEnvValueFromPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromPtrInput` via:
//
//	        RedisSpecRedisExporterEnvValueFromArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterEnvValueFromPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromPtrOutput() RedisSpecRedisExporterEnvValueFromPtrOutput
	ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromPtrOutput
}

type redisSpecRedisExporterEnvValueFromPtrType RedisSpecRedisExporterEnvValueFromArgs

func RedisSpecRedisExporterEnvValueFromPtr(v *RedisSpecRedisExporterEnvValueFromArgs) RedisSpecRedisExporterEnvValueFromPtrInput {
	return (*redisSpecRedisExporterEnvValueFromPtrType)(v)
}

func (*redisSpecRedisExporterEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFrom)(nil)).Elem()
}

func (i *redisSpecRedisExporterEnvValueFromPtrType) ToRedisSpecRedisExporterEnvValueFromPtrOutput() RedisSpecRedisExporterEnvValueFromPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterEnvValueFromPtrType) ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecRedisExporterEnvValueFromOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromOutput) ToRedisSpecRedisExporterEnvValueFromOutput() RedisSpecRedisExporterEnvValueFromOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromOutput) ToRedisSpecRedisExporterEnvValueFromOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromOutput) ToRedisSpecRedisExporterEnvValueFromPtrOutput() RedisSpecRedisExporterEnvValueFromPtrOutput {
	return o.ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterEnvValueFromOutput) ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFrom {
		return &v
	}).(RedisSpecRedisExporterEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecRedisExporterEnvValueFromOutput) ConfigMapKeyRef() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecRedisExporterEnvValueFromOutput) FieldRef() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromFieldRef {
		return v.FieldRef
	}).(RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecRedisExporterEnvValueFromOutput) ResourceFieldRef() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecRedisExporterEnvValueFromOutput) SecretKeyRef() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput)
}

type RedisSpecRedisExporterEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromPtrOutput) ToRedisSpecRedisExporterEnvValueFromPtrOutput() RedisSpecRedisExporterEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromPtrOutput) ToRedisSpecRedisExporterEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromPtrOutput) Elem() RedisSpecRedisExporterEnvValueFromOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFrom) RedisSpecRedisExporterEnvValueFrom {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporterEnvValueFrom
		return ret
	}).(RedisSpecRedisExporterEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecRedisExporterEnvValueFromPtrOutput) ConfigMapKeyRef() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecRedisExporterEnvValueFromPtrOutput) FieldRef() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecRedisExporterEnvValueFromPtrOutput) ResourceFieldRef() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecRedisExporterEnvValueFromPtrOutput) SecretKeyRef() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFrom) *RedisSpecRedisExporterEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecRedisExporterEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecRedisExporterEnvValueFromConfigMapKeyRefInput is an input type that accepts RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs and RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromConfigMapKeyRefInput` via:
//
//	RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs{...}
type RedisSpecRedisExporterEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput
	ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput)
}

func (i RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput).ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs, RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtr and RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrInput` via:
//
//	        RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput
	ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput
}

type redisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrType RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs

func RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtr(v *RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrInput {
	return (*redisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*redisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *redisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef {
		return &v
	}).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) Elem() RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) RedisSpecRedisExporterEnvValueFromConfigMapKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporterEnvValueFromConfigMapKeyRef
		return ret
	}).(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecRedisExporterEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// RedisSpecRedisExporterEnvValueFromFieldRefInput is an input type that accepts RedisSpecRedisExporterEnvValueFromFieldRefArgs and RedisSpecRedisExporterEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromFieldRefInput` via:
//
//	RedisSpecRedisExporterEnvValueFromFieldRefArgs{...}
type RedisSpecRedisExporterEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromFieldRefOutput() RedisSpecRedisExporterEnvValueFromFieldRefOutput
	ToRedisSpecRedisExporterEnvValueFromFieldRefOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecRedisExporterEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (RedisSpecRedisExporterEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromFieldRef)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvValueFromFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromFieldRefOutput() RedisSpecRedisExporterEnvValueFromFieldRefOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromFieldRefOutput)
}

func (i RedisSpecRedisExporterEnvValueFromFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromFieldRefOutput).ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterEnvValueFromFieldRefPtrInput is an input type that accepts RedisSpecRedisExporterEnvValueFromFieldRefArgs, RedisSpecRedisExporterEnvValueFromFieldRefPtr and RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromFieldRefPtrInput` via:
//
//	        RedisSpecRedisExporterEnvValueFromFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput
	ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput
}

type redisSpecRedisExporterEnvValueFromFieldRefPtrType RedisSpecRedisExporterEnvValueFromFieldRefArgs

func RedisSpecRedisExporterEnvValueFromFieldRefPtr(v *RedisSpecRedisExporterEnvValueFromFieldRefArgs) RedisSpecRedisExporterEnvValueFromFieldRefPtrInput {
	return (*redisSpecRedisExporterEnvValueFromFieldRefPtrType)(v)
}

func (*redisSpecRedisExporterEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromFieldRef)(nil)).Elem()
}

func (i *redisSpecRedisExporterEnvValueFromFieldRefPtrType) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterEnvValueFromFieldRefPtrType) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecRedisExporterEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromFieldRefOutput() RedisSpecRedisExporterEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return o.ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporterEnvValueFromFieldRef) *RedisSpecRedisExporterEnvValueFromFieldRef {
		return &v
	}).(RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecRedisExporterEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecRedisExporterEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput) Elem() RedisSpecRedisExporterEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromFieldRef) RedisSpecRedisExporterEnvValueFromFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporterEnvValueFromFieldRef
		return ret
	}).(RedisSpecRedisExporterEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecRedisExporterEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// RedisSpecRedisExporterEnvValueFromResourceFieldRefInput is an input type that accepts RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs and RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromResourceFieldRefInput` via:
//
//	RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs{...}
type RedisSpecRedisExporterEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput
	ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput)
}

func (i RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput).ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrInput is an input type that accepts RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs, RedisSpecRedisExporterEnvValueFromResourceFieldRefPtr and RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrInput` via:
//
//	        RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput
	ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput
}

type redisSpecRedisExporterEnvValueFromResourceFieldRefPtrType RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs

func RedisSpecRedisExporterEnvValueFromResourceFieldRefPtr(v *RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs) RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrInput {
	return (*redisSpecRedisExporterEnvValueFromResourceFieldRefPtrType)(v)
}

func (*redisSpecRedisExporterEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *redisSpecRedisExporterEnvValueFromResourceFieldRefPtrType) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterEnvValueFromResourceFieldRefPtrType) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return o.ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporterEnvValueFromResourceFieldRef) *RedisSpecRedisExporterEnvValueFromResourceFieldRef {
		return &v
	}).(RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromResourceFieldRef) interface{} { return v.Divisor }).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput() RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) Elem() RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromResourceFieldRef) RedisSpecRedisExporterEnvValueFromResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporterEnvValueFromResourceFieldRef
		return ret
	}).(RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecRedisExporterEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecRedisExporterEnvValueFromSecretKeyRefInput is an input type that accepts RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs and RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromSecretKeyRefInput` via:
//
//	RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs{...}
type RedisSpecRedisExporterEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput
	ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput)
}

func (i RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput).ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrInput is an input type that accepts RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs, RedisSpecRedisExporterEnvValueFromSecretKeyRefPtr and RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrInput` via:
//
//	        RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput
	ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput
}

type redisSpecRedisExporterEnvValueFromSecretKeyRefPtrType RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs

func RedisSpecRedisExporterEnvValueFromSecretKeyRefPtr(v *RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs) RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrInput {
	return (*redisSpecRedisExporterEnvValueFromSecretKeyRefPtrType)(v)
}

func (*redisSpecRedisExporterEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *redisSpecRedisExporterEnvValueFromSecretKeyRefPtrType) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterEnvValueFromSecretKeyRefPtrType) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return o.ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporterEnvValueFromSecretKeyRef) *RedisSpecRedisExporterEnvValueFromSecretKeyRef {
		return &v
	}).(RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput() RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) Elem() RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromSecretKeyRef) RedisSpecRedisExporterEnvValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporterEnvValueFromSecretKeyRef
		return ret
	}).(RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecRedisExporterResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims []RedisSpecRedisExporterResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// RedisSpecRedisExporterResourcesInput is an input type that accepts RedisSpecRedisExporterResourcesArgs and RedisSpecRedisExporterResourcesOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterResourcesInput` via:
//
//	RedisSpecRedisExporterResourcesArgs{...}
type RedisSpecRedisExporterResourcesInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterResourcesOutput() RedisSpecRedisExporterResourcesOutput
	ToRedisSpecRedisExporterResourcesOutputWithContext(context.Context) RedisSpecRedisExporterResourcesOutput
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecRedisExporterResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims RedisSpecRedisExporterResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (RedisSpecRedisExporterResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterResources)(nil)).Elem()
}

func (i RedisSpecRedisExporterResourcesArgs) ToRedisSpecRedisExporterResourcesOutput() RedisSpecRedisExporterResourcesOutput {
	return i.ToRedisSpecRedisExporterResourcesOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterResourcesArgs) ToRedisSpecRedisExporterResourcesOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterResourcesOutput)
}

func (i RedisSpecRedisExporterResourcesArgs) ToRedisSpecRedisExporterResourcesPtrOutput() RedisSpecRedisExporterResourcesPtrOutput {
	return i.ToRedisSpecRedisExporterResourcesPtrOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterResourcesArgs) ToRedisSpecRedisExporterResourcesPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterResourcesOutput).ToRedisSpecRedisExporterResourcesPtrOutputWithContext(ctx)
}

// RedisSpecRedisExporterResourcesPtrInput is an input type that accepts RedisSpecRedisExporterResourcesArgs, RedisSpecRedisExporterResourcesPtr and RedisSpecRedisExporterResourcesPtrOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterResourcesPtrInput` via:
//
//	        RedisSpecRedisExporterResourcesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecRedisExporterResourcesPtrInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterResourcesPtrOutput() RedisSpecRedisExporterResourcesPtrOutput
	ToRedisSpecRedisExporterResourcesPtrOutputWithContext(context.Context) RedisSpecRedisExporterResourcesPtrOutput
}

type redisSpecRedisExporterResourcesPtrType RedisSpecRedisExporterResourcesArgs

func RedisSpecRedisExporterResourcesPtr(v *RedisSpecRedisExporterResourcesArgs) RedisSpecRedisExporterResourcesPtrInput {
	return (*redisSpecRedisExporterResourcesPtrType)(v)
}

func (*redisSpecRedisExporterResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterResources)(nil)).Elem()
}

func (i *redisSpecRedisExporterResourcesPtrType) ToRedisSpecRedisExporterResourcesPtrOutput() RedisSpecRedisExporterResourcesPtrOutput {
	return i.ToRedisSpecRedisExporterResourcesPtrOutputWithContext(context.Background())
}

func (i *redisSpecRedisExporterResourcesPtrType) ToRedisSpecRedisExporterResourcesPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterResourcesPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecRedisExporterResourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterResources)(nil)).Elem()
}

func (o RedisSpecRedisExporterResourcesOutput) ToRedisSpecRedisExporterResourcesOutput() RedisSpecRedisExporterResourcesOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesOutput) ToRedisSpecRedisExporterResourcesOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesOutput) ToRedisSpecRedisExporterResourcesPtrOutput() RedisSpecRedisExporterResourcesPtrOutput {
	return o.ToRedisSpecRedisExporterResourcesPtrOutputWithContext(context.Background())
}

func (o RedisSpecRedisExporterResourcesOutput) ToRedisSpecRedisExporterResourcesPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecRedisExporterResources) *RedisSpecRedisExporterResources {
		return &v
	}).(RedisSpecRedisExporterResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecRedisExporterResourcesOutput) Claims() RedisSpecRedisExporterResourcesClaimsArrayOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterResources) []RedisSpecRedisExporterResourcesClaims { return v.Claims }).(RedisSpecRedisExporterResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecRedisExporterResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecRedisExporterResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type RedisSpecRedisExporterResourcesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecRedisExporterResources)(nil)).Elem()
}

func (o RedisSpecRedisExporterResourcesPtrOutput) ToRedisSpecRedisExporterResourcesPtrOutput() RedisSpecRedisExporterResourcesPtrOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesPtrOutput) ToRedisSpecRedisExporterResourcesPtrOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesPtrOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesPtrOutput) Elem() RedisSpecRedisExporterResourcesOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterResources) RedisSpecRedisExporterResources {
		if v != nil {
			return *v
		}
		var ret RedisSpecRedisExporterResources
		return ret
	}).(RedisSpecRedisExporterResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecRedisExporterResourcesPtrOutput) Claims() RedisSpecRedisExporterResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterResources) []RedisSpecRedisExporterResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(RedisSpecRedisExporterResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecRedisExporterResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecRedisExporterResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecRedisExporterResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecRedisExporterResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// RedisSpecRedisExporterResourcesClaimsInput is an input type that accepts RedisSpecRedisExporterResourcesClaimsArgs and RedisSpecRedisExporterResourcesClaimsOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterResourcesClaimsInput` via:
//
//	RedisSpecRedisExporterResourcesClaimsArgs{...}
type RedisSpecRedisExporterResourcesClaimsInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterResourcesClaimsOutput() RedisSpecRedisExporterResourcesClaimsOutput
	ToRedisSpecRedisExporterResourcesClaimsOutputWithContext(context.Context) RedisSpecRedisExporterResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecRedisExporterResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecRedisExporterResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterResourcesClaims)(nil)).Elem()
}

func (i RedisSpecRedisExporterResourcesClaimsArgs) ToRedisSpecRedisExporterResourcesClaimsOutput() RedisSpecRedisExporterResourcesClaimsOutput {
	return i.ToRedisSpecRedisExporterResourcesClaimsOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterResourcesClaimsArgs) ToRedisSpecRedisExporterResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterResourcesClaimsOutput)
}

// RedisSpecRedisExporterResourcesClaimsArrayInput is an input type that accepts RedisSpecRedisExporterResourcesClaimsArray and RedisSpecRedisExporterResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `RedisSpecRedisExporterResourcesClaimsArrayInput` via:
//
//	RedisSpecRedisExporterResourcesClaimsArray{ RedisSpecRedisExporterResourcesClaimsArgs{...} }
type RedisSpecRedisExporterResourcesClaimsArrayInput interface {
	pulumi.Input

	ToRedisSpecRedisExporterResourcesClaimsArrayOutput() RedisSpecRedisExporterResourcesClaimsArrayOutput
	ToRedisSpecRedisExporterResourcesClaimsArrayOutputWithContext(context.Context) RedisSpecRedisExporterResourcesClaimsArrayOutput
}

type RedisSpecRedisExporterResourcesClaimsArray []RedisSpecRedisExporterResourcesClaimsInput

func (RedisSpecRedisExporterResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecRedisExporterResourcesClaims)(nil)).Elem()
}

func (i RedisSpecRedisExporterResourcesClaimsArray) ToRedisSpecRedisExporterResourcesClaimsArrayOutput() RedisSpecRedisExporterResourcesClaimsArrayOutput {
	return i.ToRedisSpecRedisExporterResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i RedisSpecRedisExporterResourcesClaimsArray) ToRedisSpecRedisExporterResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecRedisExporterResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecRedisExporterResourcesClaimsOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecRedisExporterResourcesClaims)(nil)).Elem()
}

func (o RedisSpecRedisExporterResourcesClaimsOutput) ToRedisSpecRedisExporterResourcesClaimsOutput() RedisSpecRedisExporterResourcesClaimsOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesClaimsOutput) ToRedisSpecRedisExporterResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o RedisSpecRedisExporterResourcesClaimsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecRedisExporterResourcesClaims) string { return v.Name }).(pulumi.StringOutput)
}

type RedisSpecRedisExporterResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecRedisExporterResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecRedisExporterResourcesClaims)(nil)).Elem()
}

func (o RedisSpecRedisExporterResourcesClaimsArrayOutput) ToRedisSpecRedisExporterResourcesClaimsArrayOutput() RedisSpecRedisExporterResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesClaimsArrayOutput) ToRedisSpecRedisExporterResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecRedisExporterResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecRedisExporterResourcesClaimsArrayOutput) Index(i pulumi.IntInput) RedisSpecRedisExporterResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecRedisExporterResourcesClaims {
		return vs[0].([]RedisSpecRedisExporterResourcesClaims)[vs[1].(int)]
	}).(RedisSpecRedisExporterResourcesClaimsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecRedisExporterResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecRedisExporterResourcesRequests struct {
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type RedisSpecSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities *RedisSpecSecurityContextCapabilities `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions *RedisSpecSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile *RedisSpecSecurityContextSeccompProfile `pulumi:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions *RedisSpecSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// RedisSpecSecurityContextInput is an input type that accepts RedisSpecSecurityContextArgs and RedisSpecSecurityContextOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextInput` via:
//
//	RedisSpecSecurityContextArgs{...}
type RedisSpecSecurityContextInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextOutput() RedisSpecSecurityContextOutput
	ToRedisSpecSecurityContextOutputWithContext(context.Context) RedisSpecSecurityContextOutput
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type RedisSpecSecurityContextArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
	Capabilities RedisSpecSecurityContextCapabilitiesPtrInput `pulumi:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
	SeLinuxOptions RedisSpecSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
	SeccompProfile RedisSpecSecurityContextSeccompProfilePtrInput `pulumi:"seccompProfile"`
	// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
	WindowsOptions RedisSpecSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (RedisSpecSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContext)(nil)).Elem()
}

func (i RedisSpecSecurityContextArgs) ToRedisSpecSecurityContextOutput() RedisSpecSecurityContextOutput {
	return i.ToRedisSpecSecurityContextOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextArgs) ToRedisSpecSecurityContextOutputWithContext(ctx context.Context) RedisSpecSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextOutput)
}

func (i RedisSpecSecurityContextArgs) ToRedisSpecSecurityContextPtrOutput() RedisSpecSecurityContextPtrOutput {
	return i.ToRedisSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextArgs) ToRedisSpecSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextOutput).ToRedisSpecSecurityContextPtrOutputWithContext(ctx)
}

// RedisSpecSecurityContextPtrInput is an input type that accepts RedisSpecSecurityContextArgs, RedisSpecSecurityContextPtr and RedisSpecSecurityContextPtrOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextPtrInput` via:
//
//	        RedisSpecSecurityContextArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSecurityContextPtrInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextPtrOutput() RedisSpecSecurityContextPtrOutput
	ToRedisSpecSecurityContextPtrOutputWithContext(context.Context) RedisSpecSecurityContextPtrOutput
}

type redisSpecSecurityContextPtrType RedisSpecSecurityContextArgs

func RedisSpecSecurityContextPtr(v *RedisSpecSecurityContextArgs) RedisSpecSecurityContextPtrInput {
	return (*redisSpecSecurityContextPtrType)(v)
}

func (*redisSpecSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContext)(nil)).Elem()
}

func (i *redisSpecSecurityContextPtrType) ToRedisSpecSecurityContextPtrOutput() RedisSpecSecurityContextPtrOutput {
	return i.ToRedisSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (i *redisSpecSecurityContextPtrType) ToRedisSpecSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextPtrOutput)
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
type RedisSpecSecurityContextOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContext)(nil)).Elem()
}

func (o RedisSpecSecurityContextOutput) ToRedisSpecSecurityContextOutput() RedisSpecSecurityContextOutput {
	return o
}

func (o RedisSpecSecurityContextOutput) ToRedisSpecSecurityContextOutputWithContext(ctx context.Context) RedisSpecSecurityContextOutput {
	return o
}

func (o RedisSpecSecurityContextOutput) ToRedisSpecSecurityContextPtrOutput() RedisSpecSecurityContextPtrOutput {
	return o.ToRedisSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (o RedisSpecSecurityContextOutput) ToRedisSpecSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSecurityContext) *RedisSpecSecurityContext {
		return &v
	}).(RedisSpecSecurityContextPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) Capabilities() RedisSpecSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *RedisSpecSecurityContextCapabilities { return v.Capabilities }).(RedisSpecSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) SeLinuxOptions() RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *RedisSpecSecurityContextSeLinuxOptions { return v.SeLinuxOptions }).(RedisSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextOutput) SeccompProfile() RedisSpecSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *RedisSpecSecurityContextSeccompProfile { return v.SeccompProfile }).(RedisSpecSecurityContextSeccompProfilePtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o RedisSpecSecurityContextOutput) WindowsOptions() RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContext) *RedisSpecSecurityContextWindowsOptions { return v.WindowsOptions }).(RedisSpecSecurityContextWindowsOptionsPtrOutput)
}

type RedisSpecSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContext)(nil)).Elem()
}

func (o RedisSpecSecurityContextPtrOutput) ToRedisSpecSecurityContextPtrOutput() RedisSpecSecurityContextPtrOutput {
	return o
}

func (o RedisSpecSecurityContextPtrOutput) ToRedisSpecSecurityContextPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextPtrOutput {
	return o
}

func (o RedisSpecSecurityContextPtrOutput) Elem() RedisSpecSecurityContextOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) RedisSpecSecurityContext {
		if v != nil {
			return *v
		}
		var ret RedisSpecSecurityContext
		return ret
	}).(RedisSpecSecurityContextOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) Capabilities() RedisSpecSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *RedisSpecSecurityContextCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(RedisSpecSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) SeLinuxOptions() RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *RedisSpecSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(RedisSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
func (o RedisSpecSecurityContextPtrOutput) SeccompProfile() RedisSpecSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *RedisSpecSecurityContextSeccompProfile {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(RedisSpecSecurityContextSeccompProfilePtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
func (o RedisSpecSecurityContextPtrOutput) WindowsOptions() RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContext) *RedisSpecSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(RedisSpecSecurityContextWindowsOptionsPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextCapabilities struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// RedisSpecSecurityContextCapabilitiesInput is an input type that accepts RedisSpecSecurityContextCapabilitiesArgs and RedisSpecSecurityContextCapabilitiesOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextCapabilitiesInput` via:
//
//	RedisSpecSecurityContextCapabilitiesArgs{...}
type RedisSpecSecurityContextCapabilitiesInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextCapabilitiesOutput() RedisSpecSecurityContextCapabilitiesOutput
	ToRedisSpecSecurityContextCapabilitiesOutputWithContext(context.Context) RedisSpecSecurityContextCapabilitiesOutput
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextCapabilitiesArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (RedisSpecSecurityContextCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextCapabilities)(nil)).Elem()
}

func (i RedisSpecSecurityContextCapabilitiesArgs) ToRedisSpecSecurityContextCapabilitiesOutput() RedisSpecSecurityContextCapabilitiesOutput {
	return i.ToRedisSpecSecurityContextCapabilitiesOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextCapabilitiesArgs) ToRedisSpecSecurityContextCapabilitiesOutputWithContext(ctx context.Context) RedisSpecSecurityContextCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextCapabilitiesOutput)
}

func (i RedisSpecSecurityContextCapabilitiesArgs) ToRedisSpecSecurityContextCapabilitiesPtrOutput() RedisSpecSecurityContextCapabilitiesPtrOutput {
	return i.ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextCapabilitiesArgs) ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextCapabilitiesOutput).ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(ctx)
}

// RedisSpecSecurityContextCapabilitiesPtrInput is an input type that accepts RedisSpecSecurityContextCapabilitiesArgs, RedisSpecSecurityContextCapabilitiesPtr and RedisSpecSecurityContextCapabilitiesPtrOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextCapabilitiesPtrInput` via:
//
//	        RedisSpecSecurityContextCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSecurityContextCapabilitiesPtrInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextCapabilitiesPtrOutput() RedisSpecSecurityContextCapabilitiesPtrOutput
	ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(context.Context) RedisSpecSecurityContextCapabilitiesPtrOutput
}

type redisSpecSecurityContextCapabilitiesPtrType RedisSpecSecurityContextCapabilitiesArgs

func RedisSpecSecurityContextCapabilitiesPtr(v *RedisSpecSecurityContextCapabilitiesArgs) RedisSpecSecurityContextCapabilitiesPtrInput {
	return (*redisSpecSecurityContextCapabilitiesPtrType)(v)
}

func (*redisSpecSecurityContextCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextCapabilities)(nil)).Elem()
}

func (i *redisSpecSecurityContextCapabilitiesPtrType) ToRedisSpecSecurityContextCapabilitiesPtrOutput() RedisSpecSecurityContextCapabilitiesPtrOutput {
	return i.ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *redisSpecSecurityContextCapabilitiesPtrType) ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextCapabilitiesPtrOutput)
}

// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextCapabilitiesOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextCapabilities)(nil)).Elem()
}

func (o RedisSpecSecurityContextCapabilitiesOutput) ToRedisSpecSecurityContextCapabilitiesOutput() RedisSpecSecurityContextCapabilitiesOutput {
	return o
}

func (o RedisSpecSecurityContextCapabilitiesOutput) ToRedisSpecSecurityContextCapabilitiesOutputWithContext(ctx context.Context) RedisSpecSecurityContextCapabilitiesOutput {
	return o
}

func (o RedisSpecSecurityContextCapabilitiesOutput) ToRedisSpecSecurityContextCapabilitiesPtrOutput() RedisSpecSecurityContextCapabilitiesPtrOutput {
	return o.ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (o RedisSpecSecurityContextCapabilitiesOutput) ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSecurityContextCapabilities) *RedisSpecSecurityContextCapabilities {
		return &v
	}).(RedisSpecSecurityContextCapabilitiesPtrOutput)
}

// Added capabilities
func (o RedisSpecSecurityContextCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o RedisSpecSecurityContextCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type RedisSpecSecurityContextCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextCapabilities)(nil)).Elem()
}

func (o RedisSpecSecurityContextCapabilitiesPtrOutput) ToRedisSpecSecurityContextCapabilitiesPtrOutput() RedisSpecSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o RedisSpecSecurityContextCapabilitiesPtrOutput) ToRedisSpecSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o RedisSpecSecurityContextCapabilitiesPtrOutput) Elem() RedisSpecSecurityContextCapabilitiesOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextCapabilities) RedisSpecSecurityContextCapabilities {
		if v != nil {
			return *v
		}
		var ret RedisSpecSecurityContextCapabilities
		return ret
	}).(RedisSpecSecurityContextCapabilitiesOutput)
}

// Added capabilities
func (o RedisSpecSecurityContextCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o RedisSpecSecurityContextCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// RedisSpecSecurityContextSeLinuxOptionsInput is an input type that accepts RedisSpecSecurityContextSeLinuxOptionsArgs and RedisSpecSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextSeLinuxOptionsInput` via:
//
//	RedisSpecSecurityContextSeLinuxOptionsArgs{...}
type RedisSpecSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextSeLinuxOptionsOutput() RedisSpecSecurityContextSeLinuxOptionsOutput
	ToRedisSpecSecurityContextSeLinuxOptionsOutputWithContext(context.Context) RedisSpecSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RedisSpecSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i RedisSpecSecurityContextSeLinuxOptionsArgs) ToRedisSpecSecurityContextSeLinuxOptionsOutput() RedisSpecSecurityContextSeLinuxOptionsOutput {
	return i.ToRedisSpecSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextSeLinuxOptionsArgs) ToRedisSpecSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextSeLinuxOptionsOutput)
}

func (i RedisSpecSecurityContextSeLinuxOptionsArgs) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutput() RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextSeLinuxOptionsArgs) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextSeLinuxOptionsOutput).ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// RedisSpecSecurityContextSeLinuxOptionsPtrInput is an input type that accepts RedisSpecSecurityContextSeLinuxOptionsArgs, RedisSpecSecurityContextSeLinuxOptionsPtr and RedisSpecSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextSeLinuxOptionsPtrInput` via:
//
//	        RedisSpecSecurityContextSeLinuxOptionsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextSeLinuxOptionsPtrOutput() RedisSpecSecurityContextSeLinuxOptionsPtrOutput
	ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) RedisSpecSecurityContextSeLinuxOptionsPtrOutput
}

type redisSpecSecurityContextSeLinuxOptionsPtrType RedisSpecSecurityContextSeLinuxOptionsArgs

func RedisSpecSecurityContextSeLinuxOptionsPtr(v *RedisSpecSecurityContextSeLinuxOptionsArgs) RedisSpecSecurityContextSeLinuxOptionsPtrInput {
	return (*redisSpecSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*redisSpecSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *redisSpecSecurityContextSeLinuxOptionsPtrType) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutput() RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *redisSpecSecurityContextSeLinuxOptionsPtrType) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o RedisSpecSecurityContextSeLinuxOptionsOutput) ToRedisSpecSecurityContextSeLinuxOptionsOutput() RedisSpecSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o RedisSpecSecurityContextSeLinuxOptionsOutput) ToRedisSpecSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o RedisSpecSecurityContextSeLinuxOptionsOutput) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutput() RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o RedisSpecSecurityContextSeLinuxOptionsOutput) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSecurityContextSeLinuxOptions) *RedisSpecSecurityContextSeLinuxOptions {
		return &v
	}).(RedisSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RedisSpecSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutput() RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) ToRedisSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) Elem() RedisSpecSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeLinuxOptions) RedisSpecSecurityContextSeLinuxOptions {
		if v != nil {
			return *v
		}
		var ret RedisSpecSecurityContextSeLinuxOptions
		return ret
	}).(RedisSpecSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o RedisSpecSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextSeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `pulumi:"type"`
}

// RedisSpecSecurityContextSeccompProfileInput is an input type that accepts RedisSpecSecurityContextSeccompProfileArgs and RedisSpecSecurityContextSeccompProfileOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextSeccompProfileInput` via:
//
//	RedisSpecSecurityContextSeccompProfileArgs{...}
type RedisSpecSecurityContextSeccompProfileInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextSeccompProfileOutput() RedisSpecSecurityContextSeccompProfileOutput
	ToRedisSpecSecurityContextSeccompProfileOutputWithContext(context.Context) RedisSpecSecurityContextSeccompProfileOutput
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextSeccompProfileArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:
	//  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisSpecSecurityContextSeccompProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (i RedisSpecSecurityContextSeccompProfileArgs) ToRedisSpecSecurityContextSeccompProfileOutput() RedisSpecSecurityContextSeccompProfileOutput {
	return i.ToRedisSpecSecurityContextSeccompProfileOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextSeccompProfileArgs) ToRedisSpecSecurityContextSeccompProfileOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeccompProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextSeccompProfileOutput)
}

func (i RedisSpecSecurityContextSeccompProfileArgs) ToRedisSpecSecurityContextSeccompProfilePtrOutput() RedisSpecSecurityContextSeccompProfilePtrOutput {
	return i.ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextSeccompProfileArgs) ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextSeccompProfileOutput).ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx)
}

// RedisSpecSecurityContextSeccompProfilePtrInput is an input type that accepts RedisSpecSecurityContextSeccompProfileArgs, RedisSpecSecurityContextSeccompProfilePtr and RedisSpecSecurityContextSeccompProfilePtrOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextSeccompProfilePtrInput` via:
//
//	        RedisSpecSecurityContextSeccompProfileArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSecurityContextSeccompProfilePtrInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextSeccompProfilePtrOutput() RedisSpecSecurityContextSeccompProfilePtrOutput
	ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Context) RedisSpecSecurityContextSeccompProfilePtrOutput
}

type redisSpecSecurityContextSeccompProfilePtrType RedisSpecSecurityContextSeccompProfileArgs

func RedisSpecSecurityContextSeccompProfilePtr(v *RedisSpecSecurityContextSeccompProfileArgs) RedisSpecSecurityContextSeccompProfilePtrInput {
	return (*redisSpecSecurityContextSeccompProfilePtrType)(v)
}

func (*redisSpecSecurityContextSeccompProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (i *redisSpecSecurityContextSeccompProfilePtrType) ToRedisSpecSecurityContextSeccompProfilePtrOutput() RedisSpecSecurityContextSeccompProfilePtrOutput {
	return i.ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i *redisSpecSecurityContextSeccompProfilePtrType) ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextSeccompProfilePtrOutput)
}

// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
type RedisSpecSecurityContextSeccompProfileOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextSeccompProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (o RedisSpecSecurityContextSeccompProfileOutput) ToRedisSpecSecurityContextSeccompProfileOutput() RedisSpecSecurityContextSeccompProfileOutput {
	return o
}

func (o RedisSpecSecurityContextSeccompProfileOutput) ToRedisSpecSecurityContextSeccompProfileOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeccompProfileOutput {
	return o
}

func (o RedisSpecSecurityContextSeccompProfileOutput) ToRedisSpecSecurityContextSeccompProfilePtrOutput() RedisSpecSecurityContextSeccompProfilePtrOutput {
	return o.ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (o RedisSpecSecurityContextSeccompProfileOutput) ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeccompProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSecurityContextSeccompProfile) *RedisSpecSecurityContextSeccompProfile {
		return &v
	}).(RedisSpecSecurityContextSeccompProfilePtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
func (o RedisSpecSecurityContextSeccompProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextSeccompProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
//	Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o RedisSpecSecurityContextSeccompProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextSeccompProfile) string { return v.Type }).(pulumi.StringOutput)
}

type RedisSpecSecurityContextSeccompProfilePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextSeccompProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (o RedisSpecSecurityContextSeccompProfilePtrOutput) ToRedisSpecSecurityContextSeccompProfilePtrOutput() RedisSpecSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o RedisSpecSecurityContextSeccompProfilePtrOutput) ToRedisSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o RedisSpecSecurityContextSeccompProfilePtrOutput) Elem() RedisSpecSecurityContextSeccompProfileOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeccompProfile) RedisSpecSecurityContextSeccompProfile {
		if v != nil {
			return *v
		}
		var ret RedisSpecSecurityContextSeccompProfile
		return ret
	}).(RedisSpecSecurityContextSeccompProfileOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
func (o RedisSpecSecurityContextSeccompProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied. Valid options are:
//
//	Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
func (o RedisSpecSecurityContextSeccompProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
type RedisSpecSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// RedisSpecSecurityContextWindowsOptionsInput is an input type that accepts RedisSpecSecurityContextWindowsOptionsArgs and RedisSpecSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextWindowsOptionsInput` via:
//
//	RedisSpecSecurityContextWindowsOptionsArgs{...}
type RedisSpecSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextWindowsOptionsOutput() RedisSpecSecurityContextWindowsOptionsOutput
	ToRedisSpecSecurityContextWindowsOptionsOutputWithContext(context.Context) RedisSpecSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
type RedisSpecSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (RedisSpecSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (i RedisSpecSecurityContextWindowsOptionsArgs) ToRedisSpecSecurityContextWindowsOptionsOutput() RedisSpecSecurityContextWindowsOptionsOutput {
	return i.ToRedisSpecSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextWindowsOptionsArgs) ToRedisSpecSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) RedisSpecSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextWindowsOptionsOutput)
}

func (i RedisSpecSecurityContextWindowsOptionsArgs) ToRedisSpecSecurityContextWindowsOptionsPtrOutput() RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return i.ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i RedisSpecSecurityContextWindowsOptionsArgs) ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextWindowsOptionsOutput).ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// RedisSpecSecurityContextWindowsOptionsPtrInput is an input type that accepts RedisSpecSecurityContextWindowsOptionsArgs, RedisSpecSecurityContextWindowsOptionsPtr and RedisSpecSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `RedisSpecSecurityContextWindowsOptionsPtrInput` via:
//
//	        RedisSpecSecurityContextWindowsOptionsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToRedisSpecSecurityContextWindowsOptionsPtrOutput() RedisSpecSecurityContextWindowsOptionsPtrOutput
	ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) RedisSpecSecurityContextWindowsOptionsPtrOutput
}

type redisSpecSecurityContextWindowsOptionsPtrType RedisSpecSecurityContextWindowsOptionsArgs

func RedisSpecSecurityContextWindowsOptionsPtr(v *RedisSpecSecurityContextWindowsOptionsArgs) RedisSpecSecurityContextWindowsOptionsPtrInput {
	return (*redisSpecSecurityContextWindowsOptionsPtrType)(v)
}

func (*redisSpecSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *redisSpecSecurityContextWindowsOptionsPtrType) ToRedisSpecSecurityContextWindowsOptionsPtrOutput() RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return i.ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *redisSpecSecurityContextWindowsOptionsPtrType) ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
type RedisSpecSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (o RedisSpecSecurityContextWindowsOptionsOutput) ToRedisSpecSecurityContextWindowsOptionsOutput() RedisSpecSecurityContextWindowsOptionsOutput {
	return o
}

func (o RedisSpecSecurityContextWindowsOptionsOutput) ToRedisSpecSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) RedisSpecSecurityContextWindowsOptionsOutput {
	return o
}

func (o RedisSpecSecurityContextWindowsOptionsOutput) ToRedisSpecSecurityContextWindowsOptionsPtrOutput() RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o RedisSpecSecurityContextWindowsOptionsOutput) ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSecurityContextWindowsOptions) *RedisSpecSecurityContextWindowsOptions {
		return &v
	}).(RedisSpecSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o RedisSpecSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o RedisSpecSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o RedisSpecSecurityContextWindowsOptionsOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextWindowsOptions) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type RedisSpecSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) ToRedisSpecSecurityContextWindowsOptionsPtrOutput() RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) ToRedisSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) RedisSpecSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) Elem() RedisSpecSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextWindowsOptions) RedisSpecSecurityContextWindowsOptions {
		if v != nil {
			return *v
		}
		var ret RedisSpecSecurityContextWindowsOptions
		return ret
	}).(RedisSpecSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextWindowsOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o RedisSpecSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// Sidecar for each Redis pods
type RedisSpecSidecars struct {
	Command []string               `pulumi:"command"`
	Env     []RedisSpecSidecarsEnv `pulumi:"env"`
	Image   string                 `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy *string                      `pulumi:"imagePullPolicy"`
	MountPath       []RedisSpecSidecarsMountPath `pulumi:"mountPath"`
	Name            string                       `pulumi:"name"`
	Ports           []RedisSpecSidecarsPorts     `pulumi:"ports"`
	// ResourceRequirements describes the compute resource requirements.
	Resources *RedisSpecSidecarsResources `pulumi:"resources"`
}

// RedisSpecSidecarsInput is an input type that accepts RedisSpecSidecarsArgs and RedisSpecSidecarsOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsInput` via:
//
//	RedisSpecSidecarsArgs{...}
type RedisSpecSidecarsInput interface {
	pulumi.Input

	ToRedisSpecSidecarsOutput() RedisSpecSidecarsOutput
	ToRedisSpecSidecarsOutputWithContext(context.Context) RedisSpecSidecarsOutput
}

// Sidecar for each Redis pods
type RedisSpecSidecarsArgs struct {
	Command pulumi.StringArrayInput        `pulumi:"command"`
	Env     RedisSpecSidecarsEnvArrayInput `pulumi:"env"`
	Image   pulumi.StringInput             `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy pulumi.StringPtrInput                `pulumi:"imagePullPolicy"`
	MountPath       RedisSpecSidecarsMountPathArrayInput `pulumi:"mountPath"`
	Name            pulumi.StringInput                   `pulumi:"name"`
	Ports           RedisSpecSidecarsPortsArrayInput     `pulumi:"ports"`
	// ResourceRequirements describes the compute resource requirements.
	Resources RedisSpecSidecarsResourcesPtrInput `pulumi:"resources"`
}

func (RedisSpecSidecarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecars)(nil)).Elem()
}

func (i RedisSpecSidecarsArgs) ToRedisSpecSidecarsOutput() RedisSpecSidecarsOutput {
	return i.ToRedisSpecSidecarsOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsArgs) ToRedisSpecSidecarsOutputWithContext(ctx context.Context) RedisSpecSidecarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsOutput)
}

// RedisSpecSidecarsArrayInput is an input type that accepts RedisSpecSidecarsArray and RedisSpecSidecarsArrayOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsArrayInput` via:
//
//	RedisSpecSidecarsArray{ RedisSpecSidecarsArgs{...} }
type RedisSpecSidecarsArrayInput interface {
	pulumi.Input

	ToRedisSpecSidecarsArrayOutput() RedisSpecSidecarsArrayOutput
	ToRedisSpecSidecarsArrayOutputWithContext(context.Context) RedisSpecSidecarsArrayOutput
}

type RedisSpecSidecarsArray []RedisSpecSidecarsInput

func (RedisSpecSidecarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecars)(nil)).Elem()
}

func (i RedisSpecSidecarsArray) ToRedisSpecSidecarsArrayOutput() RedisSpecSidecarsArrayOutput {
	return i.ToRedisSpecSidecarsArrayOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsArray) ToRedisSpecSidecarsArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsArrayOutput)
}

// Sidecar for each Redis pods
type RedisSpecSidecarsOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecars)(nil)).Elem()
}

func (o RedisSpecSidecarsOutput) ToRedisSpecSidecarsOutput() RedisSpecSidecarsOutput {
	return o
}

func (o RedisSpecSidecarsOutput) ToRedisSpecSidecarsOutputWithContext(ctx context.Context) RedisSpecSidecarsOutput {
	return o
}

func (o RedisSpecSidecarsOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecSidecars) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o RedisSpecSidecarsOutput) Env() RedisSpecSidecarsEnvArrayOutput {
	return o.ApplyT(func(v RedisSpecSidecars) []RedisSpecSidecarsEnv { return v.Env }).(RedisSpecSidecarsEnvArrayOutput)
}

func (o RedisSpecSidecarsOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecars) string { return v.Image }).(pulumi.StringOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o RedisSpecSidecarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

func (o RedisSpecSidecarsOutput) MountPath() RedisSpecSidecarsMountPathArrayOutput {
	return o.ApplyT(func(v RedisSpecSidecars) []RedisSpecSidecarsMountPath { return v.MountPath }).(RedisSpecSidecarsMountPathArrayOutput)
}

func (o RedisSpecSidecarsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecars) string { return v.Name }).(pulumi.StringOutput)
}

func (o RedisSpecSidecarsOutput) Ports() RedisSpecSidecarsPortsArrayOutput {
	return o.ApplyT(func(v RedisSpecSidecars) []RedisSpecSidecarsPorts { return v.Ports }).(RedisSpecSidecarsPortsArrayOutput)
}

// ResourceRequirements describes the compute resource requirements.
func (o RedisSpecSidecarsOutput) Resources() RedisSpecSidecarsResourcesPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecars) *RedisSpecSidecarsResources { return v.Resources }).(RedisSpecSidecarsResourcesPtrOutput)
}

type RedisSpecSidecarsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecars)(nil)).Elem()
}

func (o RedisSpecSidecarsArrayOutput) ToRedisSpecSidecarsArrayOutput() RedisSpecSidecarsArrayOutput {
	return o
}

func (o RedisSpecSidecarsArrayOutput) ToRedisSpecSidecarsArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsArrayOutput {
	return o
}

func (o RedisSpecSidecarsArrayOutput) Index(i pulumi.IntInput) RedisSpecSidecarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecSidecars {
		return vs[0].([]RedisSpecSidecars)[vs[1].(int)]
	}).(RedisSpecSidecarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecSidecarsEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *RedisSpecSidecarsEnvValueFrom `pulumi:"valueFrom"`
}

// RedisSpecSidecarsEnvInput is an input type that accepts RedisSpecSidecarsEnvArgs and RedisSpecSidecarsEnvOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvInput` via:
//
//	RedisSpecSidecarsEnvArgs{...}
type RedisSpecSidecarsEnvInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvOutput() RedisSpecSidecarsEnvOutput
	ToRedisSpecSidecarsEnvOutputWithContext(context.Context) RedisSpecSidecarsEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecSidecarsEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom RedisSpecSidecarsEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (RedisSpecSidecarsEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnv)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvArgs) ToRedisSpecSidecarsEnvOutput() RedisSpecSidecarsEnvOutput {
	return i.ToRedisSpecSidecarsEnvOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvArgs) ToRedisSpecSidecarsEnvOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvOutput)
}

// RedisSpecSidecarsEnvArrayInput is an input type that accepts RedisSpecSidecarsEnvArray and RedisSpecSidecarsEnvArrayOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvArrayInput` via:
//
//	RedisSpecSidecarsEnvArray{ RedisSpecSidecarsEnvArgs{...} }
type RedisSpecSidecarsEnvArrayInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvArrayOutput() RedisSpecSidecarsEnvArrayOutput
	ToRedisSpecSidecarsEnvArrayOutputWithContext(context.Context) RedisSpecSidecarsEnvArrayOutput
}

type RedisSpecSidecarsEnvArray []RedisSpecSidecarsEnvInput

func (RedisSpecSidecarsEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsEnv)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvArray) ToRedisSpecSidecarsEnvArrayOutput() RedisSpecSidecarsEnvArrayOutput {
	return i.ToRedisSpecSidecarsEnvArrayOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvArray) ToRedisSpecSidecarsEnvArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type RedisSpecSidecarsEnvOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnv)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvOutput) ToRedisSpecSidecarsEnvOutput() RedisSpecSidecarsEnvOutput {
	return o
}

func (o RedisSpecSidecarsEnvOutput) ToRedisSpecSidecarsEnvOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o RedisSpecSidecarsEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o RedisSpecSidecarsEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o RedisSpecSidecarsEnvOutput) ValueFrom() RedisSpecSidecarsEnvValueFromPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnv) *RedisSpecSidecarsEnvValueFrom { return v.ValueFrom }).(RedisSpecSidecarsEnvValueFromPtrOutput)
}

type RedisSpecSidecarsEnvArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsEnv)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvArrayOutput) ToRedisSpecSidecarsEnvArrayOutput() RedisSpecSidecarsEnvArrayOutput {
	return o
}

func (o RedisSpecSidecarsEnvArrayOutput) ToRedisSpecSidecarsEnvArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvArrayOutput {
	return o
}

func (o RedisSpecSidecarsEnvArrayOutput) Index(i pulumi.IntInput) RedisSpecSidecarsEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecSidecarsEnv {
		return vs[0].([]RedisSpecSidecarsEnv)[vs[1].(int)]
	}).(RedisSpecSidecarsEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecSidecarsEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *RedisSpecSidecarsEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *RedisSpecSidecarsEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *RedisSpecSidecarsEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *RedisSpecSidecarsEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// RedisSpecSidecarsEnvValueFromInput is an input type that accepts RedisSpecSidecarsEnvValueFromArgs and RedisSpecSidecarsEnvValueFromOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromInput` via:
//
//	RedisSpecSidecarsEnvValueFromArgs{...}
type RedisSpecSidecarsEnvValueFromInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromOutput() RedisSpecSidecarsEnvValueFromOutput
	ToRedisSpecSidecarsEnvValueFromOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecSidecarsEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef RedisSpecSidecarsEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef RedisSpecSidecarsEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef RedisSpecSidecarsEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (RedisSpecSidecarsEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFrom)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvValueFromArgs) ToRedisSpecSidecarsEnvValueFromOutput() RedisSpecSidecarsEnvValueFromOutput {
	return i.ToRedisSpecSidecarsEnvValueFromOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromArgs) ToRedisSpecSidecarsEnvValueFromOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromOutput)
}

func (i RedisSpecSidecarsEnvValueFromArgs) ToRedisSpecSidecarsEnvValueFromPtrOutput() RedisSpecSidecarsEnvValueFromPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromArgs) ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromOutput).ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(ctx)
}

// RedisSpecSidecarsEnvValueFromPtrInput is an input type that accepts RedisSpecSidecarsEnvValueFromArgs, RedisSpecSidecarsEnvValueFromPtr and RedisSpecSidecarsEnvValueFromPtrOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromPtrInput` via:
//
//	        RedisSpecSidecarsEnvValueFromArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSidecarsEnvValueFromPtrInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromPtrOutput() RedisSpecSidecarsEnvValueFromPtrOutput
	ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromPtrOutput
}

type redisSpecSidecarsEnvValueFromPtrType RedisSpecSidecarsEnvValueFromArgs

func RedisSpecSidecarsEnvValueFromPtr(v *RedisSpecSidecarsEnvValueFromArgs) RedisSpecSidecarsEnvValueFromPtrInput {
	return (*redisSpecSidecarsEnvValueFromPtrType)(v)
}

func (*redisSpecSidecarsEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFrom)(nil)).Elem()
}

func (i *redisSpecSidecarsEnvValueFromPtrType) ToRedisSpecSidecarsEnvValueFromPtrOutput() RedisSpecSidecarsEnvValueFromPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *redisSpecSidecarsEnvValueFromPtrType) ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type RedisSpecSidecarsEnvValueFromOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromOutput) ToRedisSpecSidecarsEnvValueFromOutput() RedisSpecSidecarsEnvValueFromOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromOutput) ToRedisSpecSidecarsEnvValueFromOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromOutput) ToRedisSpecSidecarsEnvValueFromPtrOutput() RedisSpecSidecarsEnvValueFromPtrOutput {
	return o.ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(context.Background())
}

func (o RedisSpecSidecarsEnvValueFromOutput) ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFrom {
		return &v
	}).(RedisSpecSidecarsEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecSidecarsEnvValueFromOutput) ConfigMapKeyRef() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecSidecarsEnvValueFromOutput) FieldRef() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromFieldRef { return v.FieldRef }).(RedisSpecSidecarsEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecSidecarsEnvValueFromOutput) ResourceFieldRef() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecSidecarsEnvValueFromOutput) SecretKeyRef() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput)
}

type RedisSpecSidecarsEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFrom)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromPtrOutput) ToRedisSpecSidecarsEnvValueFromPtrOutput() RedisSpecSidecarsEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromPtrOutput) ToRedisSpecSidecarsEnvValueFromPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromPtrOutput) Elem() RedisSpecSidecarsEnvValueFromOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFrom) RedisSpecSidecarsEnvValueFrom {
		if v != nil {
			return *v
		}
		var ret RedisSpecSidecarsEnvValueFrom
		return ret
	}).(RedisSpecSidecarsEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o RedisSpecSidecarsEnvValueFromPtrOutput) ConfigMapKeyRef() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o RedisSpecSidecarsEnvValueFromPtrOutput) FieldRef() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(RedisSpecSidecarsEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o RedisSpecSidecarsEnvValueFromPtrOutput) ResourceFieldRef() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o RedisSpecSidecarsEnvValueFromPtrOutput) SecretKeyRef() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFrom) *RedisSpecSidecarsEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecSidecarsEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecSidecarsEnvValueFromConfigMapKeyRefInput is an input type that accepts RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs and RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromConfigMapKeyRefInput` via:
//
//	RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs{...}
type RedisSpecSidecarsEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput
	ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput {
	return i.ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput)
}

func (i RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput).ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs, RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtr and RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrInput` via:
//
//	        RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput
	ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput
}

type redisSpecSidecarsEnvValueFromConfigMapKeyRefPtrType RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs

func RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtr(v *RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs) RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrInput {
	return (*redisSpecSidecarsEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*redisSpecSidecarsEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *redisSpecSidecarsEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecSidecarsEnvValueFromConfigMapKeyRefPtrType) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSidecarsEnvValueFromConfigMapKeyRef) *RedisSpecSidecarsEnvValueFromConfigMapKeyRef {
		return &v
	}).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) ToRedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) Elem() RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromConfigMapKeyRef) RedisSpecSidecarsEnvValueFromConfigMapKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecSidecarsEnvValueFromConfigMapKeyRef
		return ret
	}).(RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecSidecarsEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// RedisSpecSidecarsEnvValueFromFieldRefInput is an input type that accepts RedisSpecSidecarsEnvValueFromFieldRefArgs and RedisSpecSidecarsEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromFieldRefInput` via:
//
//	RedisSpecSidecarsEnvValueFromFieldRefArgs{...}
type RedisSpecSidecarsEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromFieldRefOutput() RedisSpecSidecarsEnvValueFromFieldRefOutput
	ToRedisSpecSidecarsEnvValueFromFieldRefOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecSidecarsEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (RedisSpecSidecarsEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromFieldRef)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvValueFromFieldRefArgs) ToRedisSpecSidecarsEnvValueFromFieldRefOutput() RedisSpecSidecarsEnvValueFromFieldRefOutput {
	return i.ToRedisSpecSidecarsEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromFieldRefArgs) ToRedisSpecSidecarsEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromFieldRefOutput)
}

func (i RedisSpecSidecarsEnvValueFromFieldRefArgs) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromFieldRefArgs) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromFieldRefOutput).ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecSidecarsEnvValueFromFieldRefPtrInput is an input type that accepts RedisSpecSidecarsEnvValueFromFieldRefArgs, RedisSpecSidecarsEnvValueFromFieldRefPtr and RedisSpecSidecarsEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromFieldRefPtrInput` via:
//
//	        RedisSpecSidecarsEnvValueFromFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSidecarsEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput
	ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromFieldRefPtrOutput
}

type redisSpecSidecarsEnvValueFromFieldRefPtrType RedisSpecSidecarsEnvValueFromFieldRefArgs

func RedisSpecSidecarsEnvValueFromFieldRefPtr(v *RedisSpecSidecarsEnvValueFromFieldRefArgs) RedisSpecSidecarsEnvValueFromFieldRefPtrInput {
	return (*redisSpecSidecarsEnvValueFromFieldRefPtrType)(v)
}

func (*redisSpecSidecarsEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromFieldRef)(nil)).Elem()
}

func (i *redisSpecSidecarsEnvValueFromFieldRefPtrType) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecSidecarsEnvValueFromFieldRefPtrType) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type RedisSpecSidecarsEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromFieldRefOutput) ToRedisSpecSidecarsEnvValueFromFieldRefOutput() RedisSpecSidecarsEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromFieldRefOutput) ToRedisSpecSidecarsEnvValueFromFieldRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromFieldRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromFieldRefOutput) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return o.ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecSidecarsEnvValueFromFieldRefOutput) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSidecarsEnvValueFromFieldRef) *RedisSpecSidecarsEnvValueFromFieldRef {
		return &v
	}).(RedisSpecSidecarsEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecSidecarsEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecSidecarsEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type RedisSpecSidecarsEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromFieldRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromFieldRefPtrOutput) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromFieldRefPtrOutput) ToRedisSpecSidecarsEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromFieldRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromFieldRefPtrOutput) Elem() RedisSpecSidecarsEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromFieldRef) RedisSpecSidecarsEnvValueFromFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecSidecarsEnvValueFromFieldRef
		return ret
	}).(RedisSpecSidecarsEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecSidecarsEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecSidecarsEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecSidecarsEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// RedisSpecSidecarsEnvValueFromResourceFieldRefInput is an input type that accepts RedisSpecSidecarsEnvValueFromResourceFieldRefArgs and RedisSpecSidecarsEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromResourceFieldRefInput` via:
//
//	RedisSpecSidecarsEnvValueFromResourceFieldRefArgs{...}
type RedisSpecSidecarsEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefOutput
	ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecSidecarsEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RedisSpecSidecarsEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvValueFromResourceFieldRefArgs) ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefOutput {
	return i.ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromResourceFieldRefArgs) ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromResourceFieldRefOutput)
}

func (i RedisSpecSidecarsEnvValueFromResourceFieldRefArgs) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromResourceFieldRefArgs) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromResourceFieldRefOutput).ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecSidecarsEnvValueFromResourceFieldRefPtrInput is an input type that accepts RedisSpecSidecarsEnvValueFromResourceFieldRefArgs, RedisSpecSidecarsEnvValueFromResourceFieldRefPtr and RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromResourceFieldRefPtrInput` via:
//
//	        RedisSpecSidecarsEnvValueFromResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSidecarsEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput
	ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput
}

type redisSpecSidecarsEnvValueFromResourceFieldRefPtrType RedisSpecSidecarsEnvValueFromResourceFieldRefArgs

func RedisSpecSidecarsEnvValueFromResourceFieldRefPtr(v *RedisSpecSidecarsEnvValueFromResourceFieldRefArgs) RedisSpecSidecarsEnvValueFromResourceFieldRefPtrInput {
	return (*redisSpecSidecarsEnvValueFromResourceFieldRefPtrType)(v)
}

func (*redisSpecSidecarsEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *redisSpecSidecarsEnvValueFromResourceFieldRefPtrType) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecSidecarsEnvValueFromResourceFieldRefPtrType) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type RedisSpecSidecarsEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) ToRedisSpecSidecarsEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return o.ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSidecarsEnvValueFromResourceFieldRef) *RedisSpecSidecarsEnvValueFromResourceFieldRef {
		return &v
	}).(RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromResourceFieldRef) interface{} { return v.Divisor }).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecSidecarsEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput() RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) ToRedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) Elem() RedisSpecSidecarsEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromResourceFieldRef) RedisSpecSidecarsEnvValueFromResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecSidecarsEnvValueFromResourceFieldRef
		return ret
	}).(RedisSpecSidecarsEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecSidecarsEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecSidecarsEnvValueFromSecretKeyRefInput is an input type that accepts RedisSpecSidecarsEnvValueFromSecretKeyRefArgs and RedisSpecSidecarsEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromSecretKeyRefInput` via:
//
//	RedisSpecSidecarsEnvValueFromSecretKeyRefArgs{...}
type RedisSpecSidecarsEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefOutput
	ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type RedisSpecSidecarsEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecSidecarsEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i RedisSpecSidecarsEnvValueFromSecretKeyRefArgs) ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefOutput {
	return i.ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromSecretKeyRefArgs) ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromSecretKeyRefOutput)
}

func (i RedisSpecSidecarsEnvValueFromSecretKeyRefArgs) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsEnvValueFromSecretKeyRefArgs) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromSecretKeyRefOutput).ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// RedisSpecSidecarsEnvValueFromSecretKeyRefPtrInput is an input type that accepts RedisSpecSidecarsEnvValueFromSecretKeyRefArgs, RedisSpecSidecarsEnvValueFromSecretKeyRefPtr and RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsEnvValueFromSecretKeyRefPtrInput` via:
//
//	        RedisSpecSidecarsEnvValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSidecarsEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput
	ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput
}

type redisSpecSidecarsEnvValueFromSecretKeyRefPtrType RedisSpecSidecarsEnvValueFromSecretKeyRefArgs

func RedisSpecSidecarsEnvValueFromSecretKeyRefPtr(v *RedisSpecSidecarsEnvValueFromSecretKeyRefArgs) RedisSpecSidecarsEnvValueFromSecretKeyRefPtrInput {
	return (*redisSpecSidecarsEnvValueFromSecretKeyRefPtrType)(v)
}

func (*redisSpecSidecarsEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *redisSpecSidecarsEnvValueFromSecretKeyRefPtrType) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return i.ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecSidecarsEnvValueFromSecretKeyRefPtrType) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type RedisSpecSidecarsEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) ToRedisSpecSidecarsEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return o.ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSidecarsEnvValueFromSecretKeyRef) *RedisSpecSidecarsEnvValueFromSecretKeyRef {
		return &v
	}).(RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecSidecarsEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput() RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) ToRedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) Elem() RedisSpecSidecarsEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromSecretKeyRef) RedisSpecSidecarsEnvValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecSidecarsEnvValueFromSecretKeyRef
		return ret
	}).(RedisSpecSidecarsEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type RedisSpecSidecarsMountPath struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// RedisSpecSidecarsMountPathInput is an input type that accepts RedisSpecSidecarsMountPathArgs and RedisSpecSidecarsMountPathOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsMountPathInput` via:
//
//	RedisSpecSidecarsMountPathArgs{...}
type RedisSpecSidecarsMountPathInput interface {
	pulumi.Input

	ToRedisSpecSidecarsMountPathOutput() RedisSpecSidecarsMountPathOutput
	ToRedisSpecSidecarsMountPathOutputWithContext(context.Context) RedisSpecSidecarsMountPathOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type RedisSpecSidecarsMountPathArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (RedisSpecSidecarsMountPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsMountPath)(nil)).Elem()
}

func (i RedisSpecSidecarsMountPathArgs) ToRedisSpecSidecarsMountPathOutput() RedisSpecSidecarsMountPathOutput {
	return i.ToRedisSpecSidecarsMountPathOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsMountPathArgs) ToRedisSpecSidecarsMountPathOutputWithContext(ctx context.Context) RedisSpecSidecarsMountPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsMountPathOutput)
}

// RedisSpecSidecarsMountPathArrayInput is an input type that accepts RedisSpecSidecarsMountPathArray and RedisSpecSidecarsMountPathArrayOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsMountPathArrayInput` via:
//
//	RedisSpecSidecarsMountPathArray{ RedisSpecSidecarsMountPathArgs{...} }
type RedisSpecSidecarsMountPathArrayInput interface {
	pulumi.Input

	ToRedisSpecSidecarsMountPathArrayOutput() RedisSpecSidecarsMountPathArrayOutput
	ToRedisSpecSidecarsMountPathArrayOutputWithContext(context.Context) RedisSpecSidecarsMountPathArrayOutput
}

type RedisSpecSidecarsMountPathArray []RedisSpecSidecarsMountPathInput

func (RedisSpecSidecarsMountPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsMountPath)(nil)).Elem()
}

func (i RedisSpecSidecarsMountPathArray) ToRedisSpecSidecarsMountPathArrayOutput() RedisSpecSidecarsMountPathArrayOutput {
	return i.ToRedisSpecSidecarsMountPathArrayOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsMountPathArray) ToRedisSpecSidecarsMountPathArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsMountPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsMountPathArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type RedisSpecSidecarsMountPathOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsMountPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsMountPath)(nil)).Elem()
}

func (o RedisSpecSidecarsMountPathOutput) ToRedisSpecSidecarsMountPathOutput() RedisSpecSidecarsMountPathOutput {
	return o
}

func (o RedisSpecSidecarsMountPathOutput) ToRedisSpecSidecarsMountPathOutputWithContext(ctx context.Context) RedisSpecSidecarsMountPathOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o RedisSpecSidecarsMountPathOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsMountPath) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o RedisSpecSidecarsMountPathOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsMountPath) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o RedisSpecSidecarsMountPathOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsMountPath) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o RedisSpecSidecarsMountPathOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsMountPath) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o RedisSpecSidecarsMountPathOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsMountPath) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o RedisSpecSidecarsMountPathOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsMountPath) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type RedisSpecSidecarsMountPathArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsMountPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsMountPath)(nil)).Elem()
}

func (o RedisSpecSidecarsMountPathArrayOutput) ToRedisSpecSidecarsMountPathArrayOutput() RedisSpecSidecarsMountPathArrayOutput {
	return o
}

func (o RedisSpecSidecarsMountPathArrayOutput) ToRedisSpecSidecarsMountPathArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsMountPathArrayOutput {
	return o
}

func (o RedisSpecSidecarsMountPathArrayOutput) Index(i pulumi.IntInput) RedisSpecSidecarsMountPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecSidecarsMountPath {
		return vs[0].([]RedisSpecSidecarsMountPath)[vs[1].(int)]
	}).(RedisSpecSidecarsMountPathOutput)
}

// ContainerPort represents a network port in a single container.
type RedisSpecSidecarsPorts struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP *string `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort *int `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name *string `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for RedisSpecSidecarsPorts
func (val *RedisSpecSidecarsPorts) Defaults() *RedisSpecSidecarsPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// RedisSpecSidecarsPortsInput is an input type that accepts RedisSpecSidecarsPortsArgs and RedisSpecSidecarsPortsOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsPortsInput` via:
//
//	RedisSpecSidecarsPortsArgs{...}
type RedisSpecSidecarsPortsInput interface {
	pulumi.Input

	ToRedisSpecSidecarsPortsOutput() RedisSpecSidecarsPortsOutput
	ToRedisSpecSidecarsPortsOutputWithContext(context.Context) RedisSpecSidecarsPortsOutput
}

// ContainerPort represents a network port in a single container.
type RedisSpecSidecarsPortsArgs struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// What host IP to bind the external port to.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for RedisSpecSidecarsPortsArgs
func (val *RedisSpecSidecarsPortsArgs) Defaults() *RedisSpecSidecarsPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (RedisSpecSidecarsPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsPorts)(nil)).Elem()
}

func (i RedisSpecSidecarsPortsArgs) ToRedisSpecSidecarsPortsOutput() RedisSpecSidecarsPortsOutput {
	return i.ToRedisSpecSidecarsPortsOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsPortsArgs) ToRedisSpecSidecarsPortsOutputWithContext(ctx context.Context) RedisSpecSidecarsPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsPortsOutput)
}

// RedisSpecSidecarsPortsArrayInput is an input type that accepts RedisSpecSidecarsPortsArray and RedisSpecSidecarsPortsArrayOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsPortsArrayInput` via:
//
//	RedisSpecSidecarsPortsArray{ RedisSpecSidecarsPortsArgs{...} }
type RedisSpecSidecarsPortsArrayInput interface {
	pulumi.Input

	ToRedisSpecSidecarsPortsArrayOutput() RedisSpecSidecarsPortsArrayOutput
	ToRedisSpecSidecarsPortsArrayOutputWithContext(context.Context) RedisSpecSidecarsPortsArrayOutput
}

type RedisSpecSidecarsPortsArray []RedisSpecSidecarsPortsInput

func (RedisSpecSidecarsPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsPorts)(nil)).Elem()
}

func (i RedisSpecSidecarsPortsArray) ToRedisSpecSidecarsPortsArrayOutput() RedisSpecSidecarsPortsArrayOutput {
	return i.ToRedisSpecSidecarsPortsArrayOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsPortsArray) ToRedisSpecSidecarsPortsArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsPortsArrayOutput)
}

// ContainerPort represents a network port in a single container.
type RedisSpecSidecarsPortsOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsPorts)(nil)).Elem()
}

func (o RedisSpecSidecarsPortsOutput) ToRedisSpecSidecarsPortsOutput() RedisSpecSidecarsPortsOutput {
	return o
}

func (o RedisSpecSidecarsPortsOutput) ToRedisSpecSidecarsPortsOutputWithContext(ctx context.Context) RedisSpecSidecarsPortsOutput {
	return o
}

// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
func (o RedisSpecSidecarsPortsOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v RedisSpecSidecarsPorts) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// What host IP to bind the external port to.
func (o RedisSpecSidecarsPortsOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsPorts) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
func (o RedisSpecSidecarsPortsOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsPorts) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
func (o RedisSpecSidecarsPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
func (o RedisSpecSidecarsPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecSidecarsPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type RedisSpecSidecarsPortsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsPorts)(nil)).Elem()
}

func (o RedisSpecSidecarsPortsArrayOutput) ToRedisSpecSidecarsPortsArrayOutput() RedisSpecSidecarsPortsArrayOutput {
	return o
}

func (o RedisSpecSidecarsPortsArrayOutput) ToRedisSpecSidecarsPortsArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsPortsArrayOutput {
	return o
}

func (o RedisSpecSidecarsPortsArrayOutput) Index(i pulumi.IntInput) RedisSpecSidecarsPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecSidecarsPorts {
		return vs[0].([]RedisSpecSidecarsPorts)[vs[1].(int)]
	}).(RedisSpecSidecarsPortsOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecSidecarsResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims []RedisSpecSidecarsResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// RedisSpecSidecarsResourcesInput is an input type that accepts RedisSpecSidecarsResourcesArgs and RedisSpecSidecarsResourcesOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsResourcesInput` via:
//
//	RedisSpecSidecarsResourcesArgs{...}
type RedisSpecSidecarsResourcesInput interface {
	pulumi.Input

	ToRedisSpecSidecarsResourcesOutput() RedisSpecSidecarsResourcesOutput
	ToRedisSpecSidecarsResourcesOutputWithContext(context.Context) RedisSpecSidecarsResourcesOutput
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecSidecarsResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims RedisSpecSidecarsResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (RedisSpecSidecarsResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsResources)(nil)).Elem()
}

func (i RedisSpecSidecarsResourcesArgs) ToRedisSpecSidecarsResourcesOutput() RedisSpecSidecarsResourcesOutput {
	return i.ToRedisSpecSidecarsResourcesOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsResourcesArgs) ToRedisSpecSidecarsResourcesOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsResourcesOutput)
}

func (i RedisSpecSidecarsResourcesArgs) ToRedisSpecSidecarsResourcesPtrOutput() RedisSpecSidecarsResourcesPtrOutput {
	return i.ToRedisSpecSidecarsResourcesPtrOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsResourcesArgs) ToRedisSpecSidecarsResourcesPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsResourcesOutput).ToRedisSpecSidecarsResourcesPtrOutputWithContext(ctx)
}

// RedisSpecSidecarsResourcesPtrInput is an input type that accepts RedisSpecSidecarsResourcesArgs, RedisSpecSidecarsResourcesPtr and RedisSpecSidecarsResourcesPtrOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsResourcesPtrInput` via:
//
//	        RedisSpecSidecarsResourcesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecSidecarsResourcesPtrInput interface {
	pulumi.Input

	ToRedisSpecSidecarsResourcesPtrOutput() RedisSpecSidecarsResourcesPtrOutput
	ToRedisSpecSidecarsResourcesPtrOutputWithContext(context.Context) RedisSpecSidecarsResourcesPtrOutput
}

type redisSpecSidecarsResourcesPtrType RedisSpecSidecarsResourcesArgs

func RedisSpecSidecarsResourcesPtr(v *RedisSpecSidecarsResourcesArgs) RedisSpecSidecarsResourcesPtrInput {
	return (*redisSpecSidecarsResourcesPtrType)(v)
}

func (*redisSpecSidecarsResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsResources)(nil)).Elem()
}

func (i *redisSpecSidecarsResourcesPtrType) ToRedisSpecSidecarsResourcesPtrOutput() RedisSpecSidecarsResourcesPtrOutput {
	return i.ToRedisSpecSidecarsResourcesPtrOutputWithContext(context.Background())
}

func (i *redisSpecSidecarsResourcesPtrType) ToRedisSpecSidecarsResourcesPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsResourcesPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type RedisSpecSidecarsResourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsResources)(nil)).Elem()
}

func (o RedisSpecSidecarsResourcesOutput) ToRedisSpecSidecarsResourcesOutput() RedisSpecSidecarsResourcesOutput {
	return o
}

func (o RedisSpecSidecarsResourcesOutput) ToRedisSpecSidecarsResourcesOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesOutput {
	return o
}

func (o RedisSpecSidecarsResourcesOutput) ToRedisSpecSidecarsResourcesPtrOutput() RedisSpecSidecarsResourcesPtrOutput {
	return o.ToRedisSpecSidecarsResourcesPtrOutputWithContext(context.Background())
}

func (o RedisSpecSidecarsResourcesOutput) ToRedisSpecSidecarsResourcesPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecSidecarsResources) *RedisSpecSidecarsResources {
		return &v
	}).(RedisSpecSidecarsResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecSidecarsResourcesOutput) Claims() RedisSpecSidecarsResourcesClaimsArrayOutput {
	return o.ApplyT(func(v RedisSpecSidecarsResources) []RedisSpecSidecarsResourcesClaims { return v.Claims }).(RedisSpecSidecarsResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecSidecarsResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecSidecarsResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecSidecarsResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecSidecarsResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type RedisSpecSidecarsResourcesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecSidecarsResources)(nil)).Elem()
}

func (o RedisSpecSidecarsResourcesPtrOutput) ToRedisSpecSidecarsResourcesPtrOutput() RedisSpecSidecarsResourcesPtrOutput {
	return o
}

func (o RedisSpecSidecarsResourcesPtrOutput) ToRedisSpecSidecarsResourcesPtrOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesPtrOutput {
	return o
}

func (o RedisSpecSidecarsResourcesPtrOutput) Elem() RedisSpecSidecarsResourcesOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsResources) RedisSpecSidecarsResources {
		if v != nil {
			return *v
		}
		var ret RedisSpecSidecarsResources
		return ret
	}).(RedisSpecSidecarsResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecSidecarsResourcesPtrOutput) Claims() RedisSpecSidecarsResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsResources) []RedisSpecSidecarsResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(RedisSpecSidecarsResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecSidecarsResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecSidecarsResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecSidecarsResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecSidecarsResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// RedisSpecSidecarsResourcesClaimsInput is an input type that accepts RedisSpecSidecarsResourcesClaimsArgs and RedisSpecSidecarsResourcesClaimsOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsResourcesClaimsInput` via:
//
//	RedisSpecSidecarsResourcesClaimsArgs{...}
type RedisSpecSidecarsResourcesClaimsInput interface {
	pulumi.Input

	ToRedisSpecSidecarsResourcesClaimsOutput() RedisSpecSidecarsResourcesClaimsOutput
	ToRedisSpecSidecarsResourcesClaimsOutputWithContext(context.Context) RedisSpecSidecarsResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecSidecarsResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecSidecarsResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsResourcesClaims)(nil)).Elem()
}

func (i RedisSpecSidecarsResourcesClaimsArgs) ToRedisSpecSidecarsResourcesClaimsOutput() RedisSpecSidecarsResourcesClaimsOutput {
	return i.ToRedisSpecSidecarsResourcesClaimsOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsResourcesClaimsArgs) ToRedisSpecSidecarsResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsResourcesClaimsOutput)
}

// RedisSpecSidecarsResourcesClaimsArrayInput is an input type that accepts RedisSpecSidecarsResourcesClaimsArray and RedisSpecSidecarsResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `RedisSpecSidecarsResourcesClaimsArrayInput` via:
//
//	RedisSpecSidecarsResourcesClaimsArray{ RedisSpecSidecarsResourcesClaimsArgs{...} }
type RedisSpecSidecarsResourcesClaimsArrayInput interface {
	pulumi.Input

	ToRedisSpecSidecarsResourcesClaimsArrayOutput() RedisSpecSidecarsResourcesClaimsArrayOutput
	ToRedisSpecSidecarsResourcesClaimsArrayOutputWithContext(context.Context) RedisSpecSidecarsResourcesClaimsArrayOutput
}

type RedisSpecSidecarsResourcesClaimsArray []RedisSpecSidecarsResourcesClaimsInput

func (RedisSpecSidecarsResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsResourcesClaims)(nil)).Elem()
}

func (i RedisSpecSidecarsResourcesClaimsArray) ToRedisSpecSidecarsResourcesClaimsArrayOutput() RedisSpecSidecarsResourcesClaimsArrayOutput {
	return i.ToRedisSpecSidecarsResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i RedisSpecSidecarsResourcesClaimsArray) ToRedisSpecSidecarsResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecSidecarsResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecSidecarsResourcesClaimsOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecSidecarsResourcesClaims)(nil)).Elem()
}

func (o RedisSpecSidecarsResourcesClaimsOutput) ToRedisSpecSidecarsResourcesClaimsOutput() RedisSpecSidecarsResourcesClaimsOutput {
	return o
}

func (o RedisSpecSidecarsResourcesClaimsOutput) ToRedisSpecSidecarsResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o RedisSpecSidecarsResourcesClaimsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecSidecarsResourcesClaims) string { return v.Name }).(pulumi.StringOutput)
}

type RedisSpecSidecarsResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecSidecarsResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecSidecarsResourcesClaims)(nil)).Elem()
}

func (o RedisSpecSidecarsResourcesClaimsArrayOutput) ToRedisSpecSidecarsResourcesClaimsArrayOutput() RedisSpecSidecarsResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecSidecarsResourcesClaimsArrayOutput) ToRedisSpecSidecarsResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecSidecarsResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecSidecarsResourcesClaimsArrayOutput) Index(i pulumi.IntInput) RedisSpecSidecarsResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecSidecarsResourcesClaims {
		return vs[0].([]RedisSpecSidecarsResourcesClaims)[vs[1].(int)]
	}).(RedisSpecSidecarsResourcesClaimsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecSidecarsResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecSidecarsResourcesRequests struct {
}

// Storage is the inteface to add pvc and pv support in redis
type RedisSpecStorage struct {
	// PersistentVolumeClaim is a user's request for and claim to a persistent volume
	VolumeClaimTemplate *RedisSpecStorageVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
	// Additional Volume is provided by user that is mounted on the pods
	VolumeMount *RedisSpecStorageVolumeMount `pulumi:"volumeMount"`
}

// RedisSpecStorageInput is an input type that accepts RedisSpecStorageArgs and RedisSpecStorageOutput values.
// You can construct a concrete instance of `RedisSpecStorageInput` via:
//
//	RedisSpecStorageArgs{...}
type RedisSpecStorageInput interface {
	pulumi.Input

	ToRedisSpecStorageOutput() RedisSpecStorageOutput
	ToRedisSpecStorageOutputWithContext(context.Context) RedisSpecStorageOutput
}

// Storage is the inteface to add pvc and pv support in redis
type RedisSpecStorageArgs struct {
	// PersistentVolumeClaim is a user's request for and claim to a persistent volume
	VolumeClaimTemplate RedisSpecStorageVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
	// Additional Volume is provided by user that is mounted on the pods
	VolumeMount RedisSpecStorageVolumeMountPtrInput `pulumi:"volumeMount"`
}

func (RedisSpecStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorage)(nil)).Elem()
}

func (i RedisSpecStorageArgs) ToRedisSpecStorageOutput() RedisSpecStorageOutput {
	return i.ToRedisSpecStorageOutputWithContext(context.Background())
}

func (i RedisSpecStorageArgs) ToRedisSpecStorageOutputWithContext(ctx context.Context) RedisSpecStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageOutput)
}

func (i RedisSpecStorageArgs) ToRedisSpecStoragePtrOutput() RedisSpecStoragePtrOutput {
	return i.ToRedisSpecStoragePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageArgs) ToRedisSpecStoragePtrOutputWithContext(ctx context.Context) RedisSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageOutput).ToRedisSpecStoragePtrOutputWithContext(ctx)
}

// RedisSpecStoragePtrInput is an input type that accepts RedisSpecStorageArgs, RedisSpecStoragePtr and RedisSpecStoragePtrOutput values.
// You can construct a concrete instance of `RedisSpecStoragePtrInput` via:
//
//	        RedisSpecStorageArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStoragePtrInput interface {
	pulumi.Input

	ToRedisSpecStoragePtrOutput() RedisSpecStoragePtrOutput
	ToRedisSpecStoragePtrOutputWithContext(context.Context) RedisSpecStoragePtrOutput
}

type redisSpecStoragePtrType RedisSpecStorageArgs

func RedisSpecStoragePtr(v *RedisSpecStorageArgs) RedisSpecStoragePtrInput {
	return (*redisSpecStoragePtrType)(v)
}

func (*redisSpecStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorage)(nil)).Elem()
}

func (i *redisSpecStoragePtrType) ToRedisSpecStoragePtrOutput() RedisSpecStoragePtrOutput {
	return i.ToRedisSpecStoragePtrOutputWithContext(context.Background())
}

func (i *redisSpecStoragePtrType) ToRedisSpecStoragePtrOutputWithContext(ctx context.Context) RedisSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStoragePtrOutput)
}

// Storage is the inteface to add pvc and pv support in redis
type RedisSpecStorageOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorage)(nil)).Elem()
}

func (o RedisSpecStorageOutput) ToRedisSpecStorageOutput() RedisSpecStorageOutput {
	return o
}

func (o RedisSpecStorageOutput) ToRedisSpecStorageOutputWithContext(ctx context.Context) RedisSpecStorageOutput {
	return o
}

func (o RedisSpecStorageOutput) ToRedisSpecStoragePtrOutput() RedisSpecStoragePtrOutput {
	return o.ToRedisSpecStoragePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageOutput) ToRedisSpecStoragePtrOutputWithContext(ctx context.Context) RedisSpecStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorage) *RedisSpecStorage {
		return &v
	}).(RedisSpecStoragePtrOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
func (o RedisSpecStorageOutput) VolumeClaimTemplate() RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v RedisSpecStorage) *RedisSpecStorageVolumeClaimTemplate { return v.VolumeClaimTemplate }).(RedisSpecStorageVolumeClaimTemplatePtrOutput)
}

// Additional Volume is provided by user that is mounted on the pods
func (o RedisSpecStorageOutput) VolumeMount() RedisSpecStorageVolumeMountPtrOutput {
	return o.ApplyT(func(v RedisSpecStorage) *RedisSpecStorageVolumeMount { return v.VolumeMount }).(RedisSpecStorageVolumeMountPtrOutput)
}

type RedisSpecStoragePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorage)(nil)).Elem()
}

func (o RedisSpecStoragePtrOutput) ToRedisSpecStoragePtrOutput() RedisSpecStoragePtrOutput {
	return o
}

func (o RedisSpecStoragePtrOutput) ToRedisSpecStoragePtrOutputWithContext(ctx context.Context) RedisSpecStoragePtrOutput {
	return o
}

func (o RedisSpecStoragePtrOutput) Elem() RedisSpecStorageOutput {
	return o.ApplyT(func(v *RedisSpecStorage) RedisSpecStorage {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorage
		return ret
	}).(RedisSpecStorageOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
func (o RedisSpecStoragePtrOutput) VolumeClaimTemplate() RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *RedisSpecStorage) *RedisSpecStorageVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(RedisSpecStorageVolumeClaimTemplatePtrOutput)
}

// Additional Volume is provided by user that is mounted on the pods
func (o RedisSpecStoragePtrOutput) VolumeMount() RedisSpecStorageVolumeMountPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorage) *RedisSpecStorageVolumeMount {
		if v == nil {
			return nil
		}
		return v.VolumeMount
	}).(RedisSpecStorageVolumeMountPtrOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type RedisSpecStorageVolumeClaimTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec *RedisSpecStorageVolumeClaimTemplateSpec `pulumi:"spec"`
	// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status *RedisSpecStorageVolumeClaimTemplateStatus `pulumi:"status"`
}

// RedisSpecStorageVolumeClaimTemplateInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateArgs and RedisSpecStorageVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateArgs{...}
type RedisSpecStorageVolumeClaimTemplateInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateOutput() RedisSpecStorageVolumeClaimTemplateOutput
	ToRedisSpecStorageVolumeClaimTemplateOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateOutput
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type RedisSpecStorageVolumeClaimTemplateArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec RedisSpecStorageVolumeClaimTemplateSpecPtrInput `pulumi:"spec"`
	// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Status RedisSpecStorageVolumeClaimTemplateStatusPtrInput `pulumi:"status"`
}

func (RedisSpecStorageVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeClaimTemplateOutput() RedisSpecStorageVolumeClaimTemplateOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeClaimTemplateOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateOutput).ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplatePtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateArgs, RedisSpecStorageVolumeClaimTemplatePtr and RedisSpecStorageVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplatePtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeClaimTemplatePtrOutput
	ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplatePtrOutput
}

type redisSpecStorageVolumeClaimTemplatePtrType RedisSpecStorageVolumeClaimTemplateArgs

func RedisSpecStorageVolumeClaimTemplatePtr(v *RedisSpecStorageVolumeClaimTemplateArgs) RedisSpecStorageVolumeClaimTemplatePtrInput {
	return (*redisSpecStorageVolumeClaimTemplatePtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplatePtrType) ToRedisSpecStorageVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplatePtrType) ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplatePtrOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type RedisSpecStorageVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeClaimTemplateOutput() RedisSpecStorageVolumeClaimTemplateOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeClaimTemplateOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplate) *RedisSpecStorageVolumeClaimTemplate {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplatePtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RedisSpecStorageVolumeClaimTemplateOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplate) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RedisSpecStorageVolumeClaimTemplateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplate) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RedisSpecStorageVolumeClaimTemplateOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplate) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeClaimTemplateOutput) Spec() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplate) *RedisSpecStorageVolumeClaimTemplateSpec { return v.Spec }).(RedisSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeClaimTemplateOutput) Status() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplate) *RedisSpecStorageVolumeClaimTemplateStatus {
		return v.Status
	}).(RedisSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

type RedisSpecStorageVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) ToRedisSpecStorageVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) ToRedisSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplatePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplate) RedisSpecStorageVolumeClaimTemplate {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplate
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplate) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) Spec() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplate) *RedisSpecStorageVolumeClaimTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(RedisSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeClaimTemplatePtrOutput) Status() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplate) *RedisSpecStorageVolumeClaimTemplateStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(RedisSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type RedisSpecStorageVolumeClaimTemplateMetadata struct {
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeClaimTemplateSpec struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource *RedisSpecStorageVolumeClaimTemplateSpecDataSource `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *RedisSpecStorageVolumeClaimTemplateSpecResources `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector *RedisSpecStorageVolumeClaimTemplateSpecSelector `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// RedisSpecStorageVolumeClaimTemplateSpecInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecArgs and RedisSpecStorageVolumeClaimTemplateSpecOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecOutput() RedisSpecStorageVolumeClaimTemplateSpecOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecOutput
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeClaimTemplateSpecArgs struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrInput `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrInput `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeClaimTemplateSpecOutput() RedisSpecStorageVolumeClaimTemplateSpecOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecOutput).ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplateSpecPtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecArgs, RedisSpecStorageVolumeClaimTemplateSpecPtr and RedisSpecStorageVolumeClaimTemplateSpecPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecPtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplateSpecPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecPtrOutput
}

type redisSpecStorageVolumeClaimTemplateSpecPtrType RedisSpecStorageVolumeClaimTemplateSpecArgs

func RedisSpecStorageVolumeClaimTemplateSpecPtr(v *RedisSpecStorageVolumeClaimTemplateSpecArgs) RedisSpecStorageVolumeClaimTemplateSpecPtrInput {
	return (*redisSpecStorageVolumeClaimTemplateSpecPtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplateSpecPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplateSpecPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeClaimTemplateSpecOutput() RedisSpecStorageVolumeClaimTemplateSpecOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpec {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) DataSource() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecDataSource {
		return v.DataSource
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) DataSourceRef() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		return v.DataSourceRef
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) Resources() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecResources {
		return v.Resources
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) Selector() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecSelector {
		return v.Selector
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o RedisSpecStorageVolumeClaimTemplateSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) RedisSpecStorageVolumeClaimTemplateSpec {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplateSpec
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateSpecOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) DataSource() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) DataSourceRef() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) Resources() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) Selector() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *RedisSpecStorageVolumeClaimTemplateSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o RedisSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type RedisSpecStorageVolumeClaimTemplateSpecDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// RedisSpecStorageVolumeClaimTemplateSpecDataSourceInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs and RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecDataSourceInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput).ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs, RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtr and RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput
}

type redisSpecStorageVolumeClaimTemplateSpecDataSourcePtrType RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs

func RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtr(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs) RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput {
	return (*redisSpecStorageVolumeClaimTemplateSpecDataSourcePtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplateSpecDataSource) *RedisSpecStorageVolumeClaimTemplateSpecDataSource {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSource) string { return v.Name }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSource) RedisSpecStorageVolumeClaimTemplateSpecDataSource {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplateSpecDataSource
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs and RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput).ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs, RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtr and RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput
}

type redisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs

func RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtr(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput {
	return (*redisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type RedisSpecStorageVolumeClaimTemplateSpecResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims []RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// RedisSpecStorageVolumeClaimTemplateSpecResourcesInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs and RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecResourcesInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecResourcesInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput).ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs, RedisSpecStorageVolumeClaimTemplateSpecResourcesPtr and RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput
}

type redisSpecStorageVolumeClaimTemplateSpecResourcesPtrType RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs

func RedisSpecStorageVolumeClaimTemplateSpecResourcesPtr(v *RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs) RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrInput {
	return (*redisSpecStorageVolumeClaimTemplateSpecResourcesPtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplateSpecResources) *RedisSpecStorageVolumeClaimTemplateSpecResources {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) Claims() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecResources) []RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims {
		return v.Claims
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecResources) RedisSpecStorageVolumeClaimTemplateSpecResources {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplateSpecResources
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Claims() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecResources) []RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs and RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput)
}

// RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray and RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray{ RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs{...} }
type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput
}

type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray []RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsInput

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims) string { return v.Name }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput() RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput) ToRedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims {
		return vs[0].([]RedisSpecStorageVolumeClaimTemplateSpecResourcesClaims)[vs[1].(int)]
	}).(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecStorageVolumeClaimTemplateSpecResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecStorageVolumeClaimTemplateSpecResourcesRequests struct {
}

// selector is a label query over volumes to consider for binding.
type RedisSpecStorageVolumeClaimTemplateSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecStorageVolumeClaimTemplateSpecSelectorInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs and RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecSelectorInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecSelectorInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput).ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs, RedisSpecStorageVolumeClaimTemplateSpecSelectorPtr and RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput
}

type redisSpecStorageVolumeClaimTemplateSpecSelectorPtrType RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs

func RedisSpecStorageVolumeClaimTemplateSpecSelectorPtr(v *RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs) RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrInput {
	return (*redisSpecStorageVolumeClaimTemplateSpecSelectorPtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplateSpecSelector) *RedisSpecStorageVolumeClaimTemplateSpecSelector {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) MatchExpressions() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecSelector) []RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecSelector) RedisSpecStorageVolumeClaimTemplateSpecSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplateSpecSelector
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) MatchExpressions() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecSelector) []RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs and RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...}
type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray and RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray{ RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...} }
type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
	ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
}

type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray []RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToRedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		return vs[0].([]RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchLabels struct {
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeClaimTemplateStatus struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
	//  ClaimResourceStatus can be in any of following states: 	- ControllerResizeInProgress: 		State set when resize controller starts resizing the volume in control-plane. 	- ControllerResizeFailed: 		State set when resize has failed in resize controller with a terminal error. 	- NodeResizePending: 		State set when resize controller has finished resizing the volume but further resizing of 		volume is needed on the node. 	- NodeResizeInProgress: 		State set when kubelet starts resizing the volume. 	- NodeResizeFailed: 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set 		NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed" When this field is not set, it means that no resize operation is in progress for the given PVC.
	//  A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
	//  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses map[string]string `pulumi:"allocatedResourceStatuses"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
	//  Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
	//  A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
	//  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources map[string]interface{} `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity map[string]interface{} `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []RedisSpecStorageVolumeClaimTemplateStatusConditions `pulumi:"conditions"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`
}

// RedisSpecStorageVolumeClaimTemplateStatusInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateStatusArgs and RedisSpecStorageVolumeClaimTemplateStatusOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateStatusInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateStatusArgs{...}
type RedisSpecStorageVolumeClaimTemplateStatusInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateStatusOutput() RedisSpecStorageVolumeClaimTemplateStatusOutput
	ToRedisSpecStorageVolumeClaimTemplateStatusOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateStatusOutput
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeClaimTemplateStatusArgs struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
	//  ClaimResourceStatus can be in any of following states: 	- ControllerResizeInProgress: 		State set when resize controller starts resizing the volume in control-plane. 	- ControllerResizeFailed: 		State set when resize has failed in resize controller with a terminal error. 	- NodeResizePending: 		State set when resize controller has finished resizing the volume but further resizing of 		volume is needed on the node. 	- NodeResizeInProgress: 		State set when kubelet starts resizing the volume. 	- NodeResizeFailed: 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set 		NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed" When this field is not set, it means that no resize operation is in progress for the given PVC.
	//  A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
	//  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses pulumi.StringMapInput `pulumi:"allocatedResourceStatuses"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
	//  Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
	//  A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
	//  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources pulumi.MapInput `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity pulumi.MapInput `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayInput `pulumi:"conditions"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (RedisSpecStorageVolumeClaimTemplateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateStatusArgs) ToRedisSpecStorageVolumeClaimTemplateStatusOutput() RedisSpecStorageVolumeClaimTemplateStatusOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateStatusOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateStatusArgs) ToRedisSpecStorageVolumeClaimTemplateStatusOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateStatusOutput)
}

func (i RedisSpecStorageVolumeClaimTemplateStatusArgs) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutput() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateStatusArgs) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateStatusOutput).ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeClaimTemplateStatusPtrInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateStatusArgs, RedisSpecStorageVolumeClaimTemplateStatusPtr and RedisSpecStorageVolumeClaimTemplateStatusPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateStatusPtrInput` via:
//
//	        RedisSpecStorageVolumeClaimTemplateStatusArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeClaimTemplateStatusPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutput() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput
	ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateStatusPtrOutput
}

type redisSpecStorageVolumeClaimTemplateStatusPtrType RedisSpecStorageVolumeClaimTemplateStatusArgs

func RedisSpecStorageVolumeClaimTemplateStatusPtr(v *RedisSpecStorageVolumeClaimTemplateStatusArgs) RedisSpecStorageVolumeClaimTemplateStatusPtrInput {
	return (*redisSpecStorageVolumeClaimTemplateStatusPtrType)(v)
}

func (*redisSpecStorageVolumeClaimTemplateStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (i *redisSpecStorageVolumeClaimTemplateStatusPtrType) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutput() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeClaimTemplateStatusPtrType) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeClaimTemplateStatusOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) ToRedisSpecStorageVolumeClaimTemplateStatusOutput() RedisSpecStorageVolumeClaimTemplateStatusOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) ToRedisSpecStorageVolumeClaimTemplateStatusOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutput() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeClaimTemplateStatus) *RedisSpecStorageVolumeClaimTemplateStatus {
		return &v
	}).(RedisSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatus) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
//
//	ClaimResourceStatus can be in any of following states: 	- ControllerResizeInProgress: 		State set when resize controller starts resizing the volume in control-plane. 	- ControllerResizeFailed: 		State set when resize has failed in resize controller with a terminal error. 	- NodeResizePending: 		State set when resize controller has finished resizing the volume but further resizing of 		volume is needed on the node. 	- NodeResizeInProgress: 		State set when kubelet starts resizing the volume. 	- NodeResizeFailed: 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set 		NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed" When this field is not set, it means that no resize operation is in progress for the given PVC.
//	A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
//	This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) AllocatedResourceStatuses() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatus) map[string]string {
		return v.AllocatedResourceStatuses
	}).(pulumi.StringMapOutput)
}

// allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
//
//	Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
//	A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
//	This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) AllocatedResources() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatus) map[string]interface{} { return v.AllocatedResources }).(pulumi.MapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) Capacity() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatus) map[string]interface{} { return v.Capacity }).(pulumi.MapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) Conditions() RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatus) []RedisSpecStorageVolumeClaimTemplateStatusConditions {
		return v.Conditions
	}).(RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o RedisSpecStorageVolumeClaimTemplateStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeClaimTemplateStatusPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutput() RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) ToRedisSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) Elem() RedisSpecStorageVolumeClaimTemplateStatusOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) RedisSpecStorageVolumeClaimTemplateStatus {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeClaimTemplateStatus
		return ret
	}).(RedisSpecStorageVolumeClaimTemplateStatusOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
//
//	ClaimResourceStatus can be in any of following states: 	- ControllerResizeInProgress: 		State set when resize controller starts resizing the volume in control-plane. 	- ControllerResizeFailed: 		State set when resize has failed in resize controller with a terminal error. 	- NodeResizePending: 		State set when resize controller has finished resizing the volume but further resizing of 		volume is needed on the node. 	- NodeResizeInProgress: 		State set when kubelet starts resizing the volume. 	- NodeResizeFailed: 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set 		NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed" When this field is not set, it means that no resize operation is in progress for the given PVC.
//	A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
//	This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) AllocatedResourceStatuses() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllocatedResourceStatuses
	}).(pulumi.StringMapOutput)
}

// allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
//
//	Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
//	A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
//	This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) AllocatedResources() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AllocatedResources
	}).(pulumi.MapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) Capacity() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.MapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) Conditions() RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) []RedisSpecStorageVolumeClaimTemplateStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o RedisSpecStorageVolumeClaimTemplateStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeClaimTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
//
//	ClaimResourceStatus can be in any of following states: 	- ControllerResizeInProgress: 		State set when resize controller starts resizing the volume in control-plane. 	- ControllerResizeFailed: 		State set when resize has failed in resize controller with a terminal error. 	- NodeResizePending: 		State set when resize controller has finished resizing the volume but further resizing of 		volume is needed on the node. 	- NodeResizeInProgress: 		State set when kubelet starts resizing the volume. 	- NodeResizeFailed: 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set 		NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed" When this field is not set, it means that no resize operation is in progress for the given PVC.
//	A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
//	This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
type RedisSpecStorageVolumeClaimTemplateStatusAllocatedResourceStatuses struct {
}

// allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: 	* Un-prefixed keys: 		- storage - the capacity of the volume. 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
//
//	Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
//	A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
//	This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
type RedisSpecStorageVolumeClaimTemplateStatusAllocatedResources struct {
}

// capacity represents the actual resources of the underlying volume.
type RedisSpecStorageVolumeClaimTemplateStatusCapacity struct {
}

// PersistentVolumeClaimCondition contains details about state of pvc
type RedisSpecStorageVolumeClaimTemplateStatusConditions struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
	Type string `pulumi:"type"`
}

// RedisSpecStorageVolumeClaimTemplateStatusConditionsInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs and RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateStatusConditionsInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs{...}
type RedisSpecStorageVolumeClaimTemplateStatusConditionsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutput() RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput
	ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput
}

// PersistentVolumeClaimCondition contains details about state of pvc
type RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutput() RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput)
}

// RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayInput is an input type that accepts RedisSpecStorageVolumeClaimTemplateStatusConditionsArray and RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayInput` via:
//
//	RedisSpecStorageVolumeClaimTemplateStatusConditionsArray{ RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs{...} }
type RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput
	ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput
}

type RedisSpecStorageVolumeClaimTemplateStatusConditionsArray []RedisSpecStorageVolumeClaimTemplateStatusConditionsInput

func (RedisSpecStorageVolumeClaimTemplateStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (i RedisSpecStorageVolumeClaimTemplateStatusConditionsArray) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return i.ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeClaimTemplateStatusConditionsArray) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// PersistentVolumeClaimCondition contains details about state of pvc
type RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutput() RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return o
}

// lastProbeTime is the time we probed the condition.
func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// lastTransitionTime is the time the condition transitioned from one status to another.
func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is the human-readable message indicating details about last transition.
func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeClaimTemplateStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ToRedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeClaimTemplateStatusConditions {
		return vs[0].([]RedisSpecStorageVolumeClaimTemplateStatusConditions)[vs[1].(int)]
	}).(RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput)
}

// Additional Volume is provided by user that is mounted on the pods
type RedisSpecStorageVolumeMount struct {
	MountPath []RedisSpecStorageVolumeMountMountPath `pulumi:"mountPath"`
	Volume    []RedisSpecStorageVolumeMountVolume    `pulumi:"volume"`
}

// RedisSpecStorageVolumeMountInput is an input type that accepts RedisSpecStorageVolumeMountArgs and RedisSpecStorageVolumeMountOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountInput` via:
//
//	RedisSpecStorageVolumeMountArgs{...}
type RedisSpecStorageVolumeMountInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountOutput() RedisSpecStorageVolumeMountOutput
	ToRedisSpecStorageVolumeMountOutputWithContext(context.Context) RedisSpecStorageVolumeMountOutput
}

// Additional Volume is provided by user that is mounted on the pods
type RedisSpecStorageVolumeMountArgs struct {
	MountPath RedisSpecStorageVolumeMountMountPathArrayInput `pulumi:"mountPath"`
	Volume    RedisSpecStorageVolumeMountVolumeArrayInput    `pulumi:"volume"`
}

func (RedisSpecStorageVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMount)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountArgs) ToRedisSpecStorageVolumeMountOutput() RedisSpecStorageVolumeMountOutput {
	return i.ToRedisSpecStorageVolumeMountOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountArgs) ToRedisSpecStorageVolumeMountOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountOutput)
}

func (i RedisSpecStorageVolumeMountArgs) ToRedisSpecStorageVolumeMountPtrOutput() RedisSpecStorageVolumeMountPtrOutput {
	return i.ToRedisSpecStorageVolumeMountPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountArgs) ToRedisSpecStorageVolumeMountPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountOutput).ToRedisSpecStorageVolumeMountPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountPtrInput is an input type that accepts RedisSpecStorageVolumeMountArgs, RedisSpecStorageVolumeMountPtr and RedisSpecStorageVolumeMountPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountPtrInput` via:
//
//	        RedisSpecStorageVolumeMountArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountPtrOutput() RedisSpecStorageVolumeMountPtrOutput
	ToRedisSpecStorageVolumeMountPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountPtrOutput
}

type redisSpecStorageVolumeMountPtrType RedisSpecStorageVolumeMountArgs

func RedisSpecStorageVolumeMountPtr(v *RedisSpecStorageVolumeMountArgs) RedisSpecStorageVolumeMountPtrInput {
	return (*redisSpecStorageVolumeMountPtrType)(v)
}

func (*redisSpecStorageVolumeMountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMount)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountPtrType) ToRedisSpecStorageVolumeMountPtrOutput() RedisSpecStorageVolumeMountPtrOutput {
	return i.ToRedisSpecStorageVolumeMountPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountPtrType) ToRedisSpecStorageVolumeMountPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountPtrOutput)
}

// Additional Volume is provided by user that is mounted on the pods
type RedisSpecStorageVolumeMountOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMount)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountOutput) ToRedisSpecStorageVolumeMountOutput() RedisSpecStorageVolumeMountOutput {
	return o
}

func (o RedisSpecStorageVolumeMountOutput) ToRedisSpecStorageVolumeMountOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountOutput {
	return o
}

func (o RedisSpecStorageVolumeMountOutput) ToRedisSpecStorageVolumeMountPtrOutput() RedisSpecStorageVolumeMountPtrOutput {
	return o.ToRedisSpecStorageVolumeMountPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountOutput) ToRedisSpecStorageVolumeMountPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMount) *RedisSpecStorageVolumeMount {
		return &v
	}).(RedisSpecStorageVolumeMountPtrOutput)
}

func (o RedisSpecStorageVolumeMountOutput) MountPath() RedisSpecStorageVolumeMountMountPathArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMount) []RedisSpecStorageVolumeMountMountPath { return v.MountPath }).(RedisSpecStorageVolumeMountMountPathArrayOutput)
}

func (o RedisSpecStorageVolumeMountOutput) Volume() RedisSpecStorageVolumeMountVolumeArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMount) []RedisSpecStorageVolumeMountVolume { return v.Volume }).(RedisSpecStorageVolumeMountVolumeArrayOutput)
}

type RedisSpecStorageVolumeMountPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMount)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountPtrOutput) ToRedisSpecStorageVolumeMountPtrOutput() RedisSpecStorageVolumeMountPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountPtrOutput) ToRedisSpecStorageVolumeMountPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountPtrOutput) Elem() RedisSpecStorageVolumeMountOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMount) RedisSpecStorageVolumeMount {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMount
		return ret
	}).(RedisSpecStorageVolumeMountOutput)
}

func (o RedisSpecStorageVolumeMountPtrOutput) MountPath() RedisSpecStorageVolumeMountMountPathArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMount) []RedisSpecStorageVolumeMountMountPath {
		if v == nil {
			return nil
		}
		return v.MountPath
	}).(RedisSpecStorageVolumeMountMountPathArrayOutput)
}

func (o RedisSpecStorageVolumeMountPtrOutput) Volume() RedisSpecStorageVolumeMountVolumeArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMount) []RedisSpecStorageVolumeMountVolume {
		if v == nil {
			return nil
		}
		return v.Volume
	}).(RedisSpecStorageVolumeMountVolumeArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type RedisSpecStorageVolumeMountMountPath struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// RedisSpecStorageVolumeMountMountPathInput is an input type that accepts RedisSpecStorageVolumeMountMountPathArgs and RedisSpecStorageVolumeMountMountPathOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountMountPathInput` via:
//
//	RedisSpecStorageVolumeMountMountPathArgs{...}
type RedisSpecStorageVolumeMountMountPathInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountMountPathOutput() RedisSpecStorageVolumeMountMountPathOutput
	ToRedisSpecStorageVolumeMountMountPathOutputWithContext(context.Context) RedisSpecStorageVolumeMountMountPathOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type RedisSpecStorageVolumeMountMountPathArgs struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (RedisSpecStorageVolumeMountMountPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountMountPath)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountMountPathArgs) ToRedisSpecStorageVolumeMountMountPathOutput() RedisSpecStorageVolumeMountMountPathOutput {
	return i.ToRedisSpecStorageVolumeMountMountPathOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountMountPathArgs) ToRedisSpecStorageVolumeMountMountPathOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountMountPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountMountPathOutput)
}

// RedisSpecStorageVolumeMountMountPathArrayInput is an input type that accepts RedisSpecStorageVolumeMountMountPathArray and RedisSpecStorageVolumeMountMountPathArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountMountPathArrayInput` via:
//
//	RedisSpecStorageVolumeMountMountPathArray{ RedisSpecStorageVolumeMountMountPathArgs{...} }
type RedisSpecStorageVolumeMountMountPathArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountMountPathArrayOutput() RedisSpecStorageVolumeMountMountPathArrayOutput
	ToRedisSpecStorageVolumeMountMountPathArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountMountPathArrayOutput
}

type RedisSpecStorageVolumeMountMountPathArray []RedisSpecStorageVolumeMountMountPathInput

func (RedisSpecStorageVolumeMountMountPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountMountPath)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountMountPathArray) ToRedisSpecStorageVolumeMountMountPathArrayOutput() RedisSpecStorageVolumeMountMountPathArrayOutput {
	return i.ToRedisSpecStorageVolumeMountMountPathArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountMountPathArray) ToRedisSpecStorageVolumeMountMountPathArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountMountPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountMountPathArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type RedisSpecStorageVolumeMountMountPathOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountMountPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountMountPath)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountMountPathOutput) ToRedisSpecStorageVolumeMountMountPathOutput() RedisSpecStorageVolumeMountMountPathOutput {
	return o
}

func (o RedisSpecStorageVolumeMountMountPathOutput) ToRedisSpecStorageVolumeMountMountPathOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountMountPathOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must not contain ':'.
func (o RedisSpecStorageVolumeMountMountPathOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountMountPath) string { return v.MountPath }).(pulumi.StringOutput)
}

// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
func (o RedisSpecStorageVolumeMountMountPathOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountMountPath) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o RedisSpecStorageVolumeMountMountPathOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountMountPath) string { return v.Name }).(pulumi.StringOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
func (o RedisSpecStorageVolumeMountMountPathOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountMountPath) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o RedisSpecStorageVolumeMountMountPathOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountMountPath) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
func (o RedisSpecStorageVolumeMountMountPathOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountMountPath) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountMountPathArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountMountPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountMountPath)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountMountPathArrayOutput) ToRedisSpecStorageVolumeMountMountPathArrayOutput() RedisSpecStorageVolumeMountMountPathArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountMountPathArrayOutput) ToRedisSpecStorageVolumeMountMountPathArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountMountPathArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountMountPathArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountMountPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountMountPath {
		return vs[0].([]RedisSpecStorageVolumeMountMountPath)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountMountPathOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type RedisSpecStorageVolumeMountVolume struct {
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *RedisSpecStorageVolumeMountVolumeAzureDisk `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *RedisSpecStorageVolumeMountVolumeAzureFile `pulumi:"azureFile"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *RedisSpecStorageVolumeMountVolumeCephfs `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder *RedisSpecStorageVolumeMountVolumeCinder `pulumi:"cinder"`
	// configMap represents a configMap that should populate this volume
	ConfigMap *RedisSpecStorageVolumeMountVolumeConfigMap `pulumi:"configMap"`
	// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
	Csi *RedisSpecStorageVolumeMountVolumeCsi `pulumi:"csi"`
	// downwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI *RedisSpecStorageVolumeMountVolumeDownwardApi `pulumi:"downwardAPI"`
	// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir *RedisSpecStorageVolumeMountVolumeEmptyDir `pulumi:"emptyDir"`
	// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
	//  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
	//  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
	//  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
	//  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
	Ephemeral *RedisSpecStorageVolumeMountVolumeEphemeral `pulumi:"ephemeral"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *RedisSpecStorageVolumeMountVolumeFc `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume *RedisSpecStorageVolumeMountVolumeFlexVolume `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker *RedisSpecStorageVolumeMountVolumeFlocker `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk *RedisSpecStorageVolumeMountVolumeGcePersistentDisk `pulumi:"gcePersistentDisk"`
	// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo *RedisSpecStorageVolumeMountVolumeGitRepo `pulumi:"gitRepo"`
	// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs *RedisSpecStorageVolumeMountVolumeGlusterfs `pulumi:"glusterfs"`
	// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
	HostPath *RedisSpecStorageVolumeMountVolumeHostPath `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi *RedisSpecStorageVolumeMountVolumeIscsi `pulumi:"iscsi"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
	// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs *RedisSpecStorageVolumeMountVolumeNfs `pulumi:"nfs"`
	// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim *RedisSpecStorageVolumeMountVolumePersistentVolumeClaim `pulumi:"persistentVolumeClaim"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *RedisSpecStorageVolumeMountVolumePhotonPersistentDisk `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume *RedisSpecStorageVolumeMountVolumePortworxVolume `pulumi:"portworxVolume"`
	// projected items for all in one resources secrets, configmaps, and downward API
	Projected *RedisSpecStorageVolumeMountVolumeProjected `pulumi:"projected"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *RedisSpecStorageVolumeMountVolumeQuobyte `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd *RedisSpecStorageVolumeMountVolumeRbd `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO *RedisSpecStorageVolumeMountVolumeScaleIo `pulumi:"scaleIO"`
	// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *RedisSpecStorageVolumeMountVolumeSecret `pulumi:"secret"`
	// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos *RedisSpecStorageVolumeMountVolumeStorageos `pulumi:"storageos"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *RedisSpecStorageVolumeMountVolumeVsphereVolume `pulumi:"vsphereVolume"`
}

// RedisSpecStorageVolumeMountVolumeInput is an input type that accepts RedisSpecStorageVolumeMountVolumeArgs and RedisSpecStorageVolumeMountVolumeOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeInput` via:
//
//	RedisSpecStorageVolumeMountVolumeArgs{...}
type RedisSpecStorageVolumeMountVolumeInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeOutput() RedisSpecStorageVolumeMountVolumeOutput
	ToRedisSpecStorageVolumeMountVolumeOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeOutput
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type RedisSpecStorageVolumeMountVolumeArgs struct {
	// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	AwsElasticBlockStore RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrInput `pulumi:"awsElasticBlockStore"`
	// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk RedisSpecStorageVolumeMountVolumeAzureDiskPtrInput `pulumi:"azureDisk"`
	// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile RedisSpecStorageVolumeMountVolumeAzureFilePtrInput `pulumi:"azureFile"`
	// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs RedisSpecStorageVolumeMountVolumeCephfsPtrInput `pulumi:"cephfs"`
	// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	Cinder RedisSpecStorageVolumeMountVolumeCinderPtrInput `pulumi:"cinder"`
	// configMap represents a configMap that should populate this volume
	ConfigMap RedisSpecStorageVolumeMountVolumeConfigMapPtrInput `pulumi:"configMap"`
	// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
	Csi RedisSpecStorageVolumeMountVolumeCsiPtrInput `pulumi:"csi"`
	// downwardAPI represents downward API about the pod that should populate this volume
	DownwardAPI RedisSpecStorageVolumeMountVolumeDownwardApiPtrInput `pulumi:"downwardAPI"`
	// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	EmptyDir RedisSpecStorageVolumeMountVolumeEmptyDirPtrInput `pulumi:"emptyDir"`
	// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
	//  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
	//  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
	//  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
	//  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
	Ephemeral RedisSpecStorageVolumeMountVolumeEphemeralPtrInput `pulumi:"ephemeral"`
	// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc RedisSpecStorageVolumeMountVolumeFcPtrInput `pulumi:"fc"`
	// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
	FlexVolume RedisSpecStorageVolumeMountVolumeFlexVolumePtrInput `pulumi:"flexVolume"`
	// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
	Flocker RedisSpecStorageVolumeMountVolumeFlockerPtrInput `pulumi:"flocker"`
	// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	GcePersistentDisk RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrInput `pulumi:"gcePersistentDisk"`
	// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
	GitRepo RedisSpecStorageVolumeMountVolumeGitRepoPtrInput `pulumi:"gitRepo"`
	// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
	Glusterfs RedisSpecStorageVolumeMountVolumeGlusterfsPtrInput `pulumi:"glusterfs"`
	// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
	HostPath RedisSpecStorageVolumeMountVolumeHostPathPtrInput `pulumi:"hostPath"`
	// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
	Iscsi RedisSpecStorageVolumeMountVolumeIscsiPtrInput `pulumi:"iscsi"`
	// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
	// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Nfs RedisSpecStorageVolumeMountVolumeNfsPtrInput `pulumi:"nfs"`
	// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	PersistentVolumeClaim RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrInput `pulumi:"persistentVolumeClaim"`
	// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrInput `pulumi:"photonPersistentDisk"`
	// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
	PortworxVolume RedisSpecStorageVolumeMountVolumePortworxVolumePtrInput `pulumi:"portworxVolume"`
	// projected items for all in one resources secrets, configmaps, and downward API
	Projected RedisSpecStorageVolumeMountVolumeProjectedPtrInput `pulumi:"projected"`
	// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte RedisSpecStorageVolumeMountVolumeQuobytePtrInput `pulumi:"quobyte"`
	// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
	Rbd RedisSpecStorageVolumeMountVolumeRbdPtrInput `pulumi:"rbd"`
	// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
	ScaleIO RedisSpecStorageVolumeMountVolumeScaleIoPtrInput `pulumi:"scaleIO"`
	// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret RedisSpecStorageVolumeMountVolumeSecretPtrInput `pulumi:"secret"`
	// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
	Storageos RedisSpecStorageVolumeMountVolumeStorageosPtrInput `pulumi:"storageos"`
	// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume RedisSpecStorageVolumeMountVolumeVsphereVolumePtrInput `pulumi:"vsphereVolume"`
}

func (RedisSpecStorageVolumeMountVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolume)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeArgs) ToRedisSpecStorageVolumeMountVolumeOutput() RedisSpecStorageVolumeMountVolumeOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeArgs) ToRedisSpecStorageVolumeMountVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeOutput)
}

// RedisSpecStorageVolumeMountVolumeArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeArray and RedisSpecStorageVolumeMountVolumeArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeArray{ RedisSpecStorageVolumeMountVolumeArgs{...} }
type RedisSpecStorageVolumeMountVolumeArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeArrayOutput() RedisSpecStorageVolumeMountVolumeArrayOutput
	ToRedisSpecStorageVolumeMountVolumeArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeArrayOutput
}

type RedisSpecStorageVolumeMountVolumeArray []RedisSpecStorageVolumeMountVolumeInput

func (RedisSpecStorageVolumeMountVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolume)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeArray) ToRedisSpecStorageVolumeMountVolumeArrayOutput() RedisSpecStorageVolumeMountVolumeArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeArray) ToRedisSpecStorageVolumeMountVolumeArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeArrayOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type RedisSpecStorageVolumeMountVolumeOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeOutput) ToRedisSpecStorageVolumeMountVolumeOutput() RedisSpecStorageVolumeMountVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeOutput) ToRedisSpecStorageVolumeMountVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeOutput {
	return o
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o RedisSpecStorageVolumeMountVolumeOutput) AwsElasticBlockStore() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore {
		return v.AwsElasticBlockStore
	}).(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
func (o RedisSpecStorageVolumeMountVolumeOutput) AzureDisk() RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeAzureDisk {
		return v.AzureDisk
	}).(RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
func (o RedisSpecStorageVolumeMountVolumeOutput) AzureFile() RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeAzureFile {
		return v.AzureFile
	}).(RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
func (o RedisSpecStorageVolumeMountVolumeOutput) Cephfs() RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeCephfs { return v.Cephfs }).(RedisSpecStorageVolumeMountVolumeCephfsPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeOutput) Cinder() RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeCinder { return v.Cinder }).(RedisSpecStorageVolumeMountVolumeCinderPtrOutput)
}

// configMap represents a configMap that should populate this volume
func (o RedisSpecStorageVolumeMountVolumeOutput) ConfigMap() RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeConfigMap {
		return v.ConfigMap
	}).(RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
func (o RedisSpecStorageVolumeMountVolumeOutput) Csi() RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeCsi { return v.Csi }).(RedisSpecStorageVolumeMountVolumeCsiPtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
func (o RedisSpecStorageVolumeMountVolumeOutput) DownwardAPI() RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeDownwardApi {
		return v.DownwardAPI
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o RedisSpecStorageVolumeMountVolumeOutput) EmptyDir() RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeEmptyDir {
		return v.EmptyDir
	}).(RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
//
//	Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
//	Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
//	Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
//	A pod can use both types of ephemeral volumes and persistent volumes at the same time.
func (o RedisSpecStorageVolumeMountVolumeOutput) Ephemeral() RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeEphemeral {
		return v.Ephemeral
	}).(RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
func (o RedisSpecStorageVolumeMountVolumeOutput) Fc() RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeFc { return v.Fc }).(RedisSpecStorageVolumeMountVolumeFcPtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
func (o RedisSpecStorageVolumeMountVolumeOutput) FlexVolume() RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeFlexVolume {
		return v.FlexVolume
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
func (o RedisSpecStorageVolumeMountVolumeOutput) Flocker() RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeFlocker { return v.Flocker }).(RedisSpecStorageVolumeMountVolumeFlockerPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeOutput) GcePersistentDisk() RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeGcePersistentDisk {
		return v.GcePersistentDisk
	}).(RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput)
}

// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
func (o RedisSpecStorageVolumeMountVolumeOutput) GitRepo() RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeGitRepo { return v.GitRepo }).(RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
func (o RedisSpecStorageVolumeMountVolumeOutput) Glusterfs() RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeGlusterfs {
		return v.Glusterfs
	}).(RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
func (o RedisSpecStorageVolumeMountVolumeOutput) HostPath() RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeHostPath {
		return v.HostPath
	}).(RedisSpecStorageVolumeMountVolumeHostPathPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
func (o RedisSpecStorageVolumeMountVolumeOutput) Iscsi() RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeIscsi { return v.Iscsi }).(RedisSpecStorageVolumeMountVolumeIscsiPtrOutput)
}

// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RedisSpecStorageVolumeMountVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) string { return v.Name }).(pulumi.StringOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeOutput) Nfs() RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeNfs { return v.Nfs }).(RedisSpecStorageVolumeMountVolumeNfsPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeMountVolumeOutput) PersistentVolumeClaim() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumePersistentVolumeClaim {
		return v.PersistentVolumeClaim
	}).(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
func (o RedisSpecStorageVolumeMountVolumeOutput) PhotonPersistentDisk() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumePhotonPersistentDisk {
		return v.PhotonPersistentDisk
	}).(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
func (o RedisSpecStorageVolumeMountVolumeOutput) PortworxVolume() RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumePortworxVolume {
		return v.PortworxVolume
	}).(RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
func (o RedisSpecStorageVolumeMountVolumeOutput) Projected() RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeProjected {
		return v.Projected
	}).(RedisSpecStorageVolumeMountVolumeProjectedPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
func (o RedisSpecStorageVolumeMountVolumeOutput) Quobyte() RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeQuobyte { return v.Quobyte }).(RedisSpecStorageVolumeMountVolumeQuobytePtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
func (o RedisSpecStorageVolumeMountVolumeOutput) Rbd() RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeRbd { return v.Rbd }).(RedisSpecStorageVolumeMountVolumeRbdPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
func (o RedisSpecStorageVolumeMountVolumeOutput) ScaleIO() RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeScaleIo { return v.ScaleIO }).(RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput)
}

// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecStorageVolumeMountVolumeOutput) Secret() RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeSecret { return v.Secret }).(RedisSpecStorageVolumeMountVolumeSecretPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
func (o RedisSpecStorageVolumeMountVolumeOutput) Storageos() RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeStorageos {
		return v.Storageos
	}).(RedisSpecStorageVolumeMountVolumeStorageosPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
func (o RedisSpecStorageVolumeMountVolumeOutput) VsphereVolume() RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolume) *RedisSpecStorageVolumeMountVolumeVsphereVolume {
		return v.VsphereVolume
	}).(RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput)
}

type RedisSpecStorageVolumeMountVolumeArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeArrayOutput) ToRedisSpecStorageVolumeMountVolumeArrayOutput() RedisSpecStorageVolumeMountVolumeArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeArrayOutput) ToRedisSpecStorageVolumeMountVolumeArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolume {
		return vs[0].([]RedisSpecStorageVolumeMountVolume)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID string `pulumi:"volumeID"`
}

// RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreInput is an input type that accepts RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs and RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreInput` via:
//
//	RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs{...}
type RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput
	ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput)
}

func (i RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput).ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs, RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtr and RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput
	ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput
}

type redisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrType RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs

func RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtr(v *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrInput {
	return (*redisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrType) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrType) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) string { return v.VolumeID }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) ToRedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore
		return ret
	}).(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAwsElasticBlockStore) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type RedisSpecStorageVolumeMountVolumeAzureDisk struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName string `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI string `pulumi:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
}

// RedisSpecStorageVolumeMountVolumeAzureDiskInput is an input type that accepts RedisSpecStorageVolumeMountVolumeAzureDiskArgs and RedisSpecStorageVolumeMountVolumeAzureDiskOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeAzureDiskInput` via:
//
//	RedisSpecStorageVolumeMountVolumeAzureDiskArgs{...}
type RedisSpecStorageVolumeMountVolumeAzureDiskInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeAzureDiskOutput() RedisSpecStorageVolumeMountVolumeAzureDiskOutput
	ToRedisSpecStorageVolumeMountVolumeAzureDiskOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskOutput
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type RedisSpecStorageVolumeMountVolumeAzureDiskArgs struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode pulumi.StringPtrInput `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName pulumi.StringInput `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI pulumi.StringInput `pulumi:"diskURI"`
	// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (RedisSpecStorageVolumeMountVolumeAzureDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureDisk)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeAzureDiskArgs) ToRedisSpecStorageVolumeMountVolumeAzureDiskOutput() RedisSpecStorageVolumeMountVolumeAzureDiskOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAzureDiskOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeAzureDiskArgs) ToRedisSpecStorageVolumeMountVolumeAzureDiskOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAzureDiskOutput)
}

func (i RedisSpecStorageVolumeMountVolumeAzureDiskArgs) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput() RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeAzureDiskArgs) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAzureDiskOutput).ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeAzureDiskPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeAzureDiskArgs, RedisSpecStorageVolumeMountVolumeAzureDiskPtr and RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeAzureDiskPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeAzureDiskArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeAzureDiskPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput() RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput
	ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput
}

type redisSpecStorageVolumeMountVolumeAzureDiskPtrType RedisSpecStorageVolumeMountVolumeAzureDiskArgs

func RedisSpecStorageVolumeMountVolumeAzureDiskPtr(v *RedisSpecStorageVolumeMountVolumeAzureDiskArgs) RedisSpecStorageVolumeMountVolumeAzureDiskPtrInput {
	return (*redisSpecStorageVolumeMountVolumeAzureDiskPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeAzureDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeAzureDisk)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeAzureDiskPtrType) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput() RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeAzureDiskPtrType) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type RedisSpecStorageVolumeMountVolumeAzureDiskOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeAzureDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureDisk)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) ToRedisSpecStorageVolumeMountVolumeAzureDiskOutput() RedisSpecStorageVolumeMountVolumeAzureDiskOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) ToRedisSpecStorageVolumeMountVolumeAzureDiskOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput() RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeAzureDisk) *RedisSpecStorageVolumeMountVolumeAzureDisk {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureDisk) *string { return v.CachingMode }).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureDisk) string { return v.DiskName }).(pulumi.StringOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) DiskURI() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureDisk) string { return v.DiskURI }).(pulumi.StringOutput)
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureDisk) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeAzureDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeAzureDisk)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput() RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) ToRedisSpecStorageVolumeMountVolumeAzureDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeAzureDiskOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) RedisSpecStorageVolumeMountVolumeAzureDisk {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeAzureDisk
		return ret
	}).(RedisSpecStorageVolumeMountVolumeAzureDiskOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.CachingMode
	}).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) *string {
		if v == nil {
			return nil
		}
		return &v.DiskName
	}).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) *string {
		if v == nil {
			return nil
		}
		return &v.DiskURI
	}).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureDisk) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
type RedisSpecStorageVolumeMountVolumeAzureFile struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName string `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName string `pulumi:"shareName"`
}

// RedisSpecStorageVolumeMountVolumeAzureFileInput is an input type that accepts RedisSpecStorageVolumeMountVolumeAzureFileArgs and RedisSpecStorageVolumeMountVolumeAzureFileOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeAzureFileInput` via:
//
//	RedisSpecStorageVolumeMountVolumeAzureFileArgs{...}
type RedisSpecStorageVolumeMountVolumeAzureFileInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeAzureFileOutput() RedisSpecStorageVolumeMountVolumeAzureFileOutput
	ToRedisSpecStorageVolumeMountVolumeAzureFileOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeAzureFileOutput
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
type RedisSpecStorageVolumeMountVolumeAzureFileArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (RedisSpecStorageVolumeMountVolumeAzureFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureFile)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeAzureFileArgs) ToRedisSpecStorageVolumeMountVolumeAzureFileOutput() RedisSpecStorageVolumeMountVolumeAzureFileOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAzureFileOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeAzureFileArgs) ToRedisSpecStorageVolumeMountVolumeAzureFileOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAzureFileOutput)
}

func (i RedisSpecStorageVolumeMountVolumeAzureFileArgs) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutput() RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeAzureFileArgs) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAzureFileOutput).ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeAzureFilePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeAzureFileArgs, RedisSpecStorageVolumeMountVolumeAzureFilePtr and RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeAzureFilePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeAzureFileArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeAzureFilePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutput() RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput
	ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput
}

type redisSpecStorageVolumeMountVolumeAzureFilePtrType RedisSpecStorageVolumeMountVolumeAzureFileArgs

func RedisSpecStorageVolumeMountVolumeAzureFilePtr(v *RedisSpecStorageVolumeMountVolumeAzureFileArgs) RedisSpecStorageVolumeMountVolumeAzureFilePtrInput {
	return (*redisSpecStorageVolumeMountVolumeAzureFilePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeAzureFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeAzureFile)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeAzureFilePtrType) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutput() RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeAzureFilePtrType) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
type RedisSpecStorageVolumeMountVolumeAzureFileOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeAzureFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureFile)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) ToRedisSpecStorageVolumeMountVolumeAzureFileOutput() RedisSpecStorageVolumeMountVolumeAzureFileOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) ToRedisSpecStorageVolumeMountVolumeAzureFileOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureFileOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutput() RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeAzureFile) *RedisSpecStorageVolumeMountVolumeAzureFile {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureFile) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureFile) string { return v.SecretName }).(pulumi.StringOutput)
}

// shareName is the azure share Name
func (o RedisSpecStorageVolumeMountVolumeAzureFileOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeAzureFile) string { return v.ShareName }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeAzureFile)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutput() RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) ToRedisSpecStorageVolumeMountVolumeAzureFilePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeAzureFileOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureFile) RedisSpecStorageVolumeMountVolumeAzureFile {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeAzureFile
		return ret
	}).(RedisSpecStorageVolumeMountVolumeAzureFileOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureFile) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureFile) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeAzureFile) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
type RedisSpecStorageVolumeMountVolumeCephfs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef *RedisSpecStorageVolumeMountVolumeCephfsSecretRef `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// RedisSpecStorageVolumeMountVolumeCephfsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCephfsArgs and RedisSpecStorageVolumeMountVolumeCephfsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCephfsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeCephfsArgs{...}
type RedisSpecStorageVolumeMountVolumeCephfsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCephfsOutput() RedisSpecStorageVolumeMountVolumeCephfsOutput
	ToRedisSpecStorageVolumeMountVolumeCephfsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCephfsOutput
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
type RedisSpecStorageVolumeMountVolumeCephfsArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput `pulumi:"secretFile"`
	// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretRef RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrInput `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RedisSpecStorageVolumeMountVolumeCephfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfs)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeCephfsArgs) ToRedisSpecStorageVolumeMountVolumeCephfsOutput() RedisSpecStorageVolumeMountVolumeCephfsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCephfsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCephfsArgs) ToRedisSpecStorageVolumeMountVolumeCephfsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCephfsOutput)
}

func (i RedisSpecStorageVolumeMountVolumeCephfsArgs) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCephfsArgs) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCephfsOutput).ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeCephfsPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCephfsArgs, RedisSpecStorageVolumeMountVolumeCephfsPtr and RedisSpecStorageVolumeMountVolumeCephfsPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCephfsPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeCephfsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeCephfsPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsPtrOutput
	ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCephfsPtrOutput
}

type redisSpecStorageVolumeMountVolumeCephfsPtrType RedisSpecStorageVolumeMountVolumeCephfsArgs

func RedisSpecStorageVolumeMountVolumeCephfsPtr(v *RedisSpecStorageVolumeMountVolumeCephfsArgs) RedisSpecStorageVolumeMountVolumeCephfsPtrInput {
	return (*redisSpecStorageVolumeMountVolumeCephfsPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeCephfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCephfs)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeCephfsPtrType) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeCephfsPtrType) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCephfsPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
type RedisSpecStorageVolumeMountVolumeCephfsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCephfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfs)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) ToRedisSpecStorageVolumeMountVolumeCephfsOutput() RedisSpecStorageVolumeMountVolumeCephfsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) ToRedisSpecStorageVolumeMountVolumeCephfsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeCephfs) *RedisSpecStorageVolumeMountVolumeCephfs {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeCephfsPtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfs) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfs) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfs) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) SecretRef() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfs) *RedisSpecStorageVolumeMountVolumeCephfsSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput)
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfs) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeCephfsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCephfs)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) ToRedisSpecStorageVolumeMountVolumeCephfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeCephfsOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) RedisSpecStorageVolumeMountVolumeCephfs {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeCephfs
		return ret
	}).(RedisSpecStorageVolumeMountVolumeCephfsOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) *RedisSpecStorageVolumeMountVolumeCephfsSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput)
}

// user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeCephfsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfs) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type RedisSpecStorageVolumeMountVolumeCephfsSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeCephfsSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs and RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCephfsSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeCephfsSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfsSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs, RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtr and RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeCephfsSecretRefPtrType RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs

func RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs) RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeCephfsSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeCephfsSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCephfsSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeCephfsSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeCephfsSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfsSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeCephfsSecretRef) *RedisSpecStorageVolumeMountVolumeCephfsSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCephfsSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCephfsSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfsSecretRef) RedisSpecStorageVolumeMountVolumeCephfsSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeCephfsSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCephfsSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type RedisSpecStorageVolumeMountVolumeCinder struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef *RedisSpecStorageVolumeMountVolumeCinderSecretRef `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID string `pulumi:"volumeID"`
}

// RedisSpecStorageVolumeMountVolumeCinderInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCinderArgs and RedisSpecStorageVolumeMountVolumeCinderOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCinderInput` via:
//
//	RedisSpecStorageVolumeMountVolumeCinderArgs{...}
type RedisSpecStorageVolumeMountVolumeCinderInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCinderOutput() RedisSpecStorageVolumeMountVolumeCinderOutput
	ToRedisSpecStorageVolumeMountVolumeCinderOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCinderOutput
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type RedisSpecStorageVolumeMountVolumeCinderArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
	SecretRef RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (RedisSpecStorageVolumeMountVolumeCinderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinder)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeCinderArgs) ToRedisSpecStorageVolumeMountVolumeCinderOutput() RedisSpecStorageVolumeMountVolumeCinderOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCinderOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCinderArgs) ToRedisSpecStorageVolumeMountVolumeCinderOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCinderOutput)
}

func (i RedisSpecStorageVolumeMountVolumeCinderArgs) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutput() RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCinderArgs) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCinderOutput).ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeCinderPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCinderArgs, RedisSpecStorageVolumeMountVolumeCinderPtr and RedisSpecStorageVolumeMountVolumeCinderPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCinderPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeCinderArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeCinderPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCinderPtrOutput() RedisSpecStorageVolumeMountVolumeCinderPtrOutput
	ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCinderPtrOutput
}

type redisSpecStorageVolumeMountVolumeCinderPtrType RedisSpecStorageVolumeMountVolumeCinderArgs

func RedisSpecStorageVolumeMountVolumeCinderPtr(v *RedisSpecStorageVolumeMountVolumeCinderArgs) RedisSpecStorageVolumeMountVolumeCinderPtrInput {
	return (*redisSpecStorageVolumeMountVolumeCinderPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeCinderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCinder)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeCinderPtrType) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutput() RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeCinderPtrType) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCinderPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type RedisSpecStorageVolumeMountVolumeCinderOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCinderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinder)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCinderOutput) ToRedisSpecStorageVolumeMountVolumeCinderOutput() RedisSpecStorageVolumeMountVolumeCinderOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderOutput) ToRedisSpecStorageVolumeMountVolumeCinderOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderOutput) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutput() RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeCinderOutput) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeCinder) *RedisSpecStorageVolumeMountVolumeCinder {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeCinderPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeCinderOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCinder) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeCinderOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCinder) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (o RedisSpecStorageVolumeMountVolumeCinderOutput) SecretRef() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCinder) *RedisSpecStorageVolumeMountVolumeCinderSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeCinderOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCinder) string { return v.VolumeID }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeCinderPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCinderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCinder)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutput() RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) ToRedisSpecStorageVolumeMountVolumeCinderPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeCinderOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinder) RedisSpecStorageVolumeMountVolumeCinder {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeCinder
		return ret
	}).(RedisSpecStorageVolumeMountVolumeCinderOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinder) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinder) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinder) *RedisSpecStorageVolumeMountVolumeCinderSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput)
}

// volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o RedisSpecStorageVolumeMountVolumeCinderPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinder) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
type RedisSpecStorageVolumeMountVolumeCinderSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeCinderSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs and RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCinderSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeCinderSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
type RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinderSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs, RedisSpecStorageVolumeMountVolumeCinderSecretRefPtr and RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeCinderSecretRefPtrType RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs

func RedisSpecStorageVolumeMountVolumeCinderSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs) RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeCinderSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeCinderSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCinderSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeCinderSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeCinderSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
type RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinderSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeCinderSecretRef) *RedisSpecStorageVolumeMountVolumeCinderSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCinderSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCinderSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinderSecretRef) RedisSpecStorageVolumeMountVolumeCinderSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeCinderSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCinderSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// configMap represents a configMap that should populate this volume
type RedisSpecStorageVolumeMountVolumeConfigMap struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []RedisSpecStorageVolumeMountVolumeConfigMapItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecStorageVolumeMountVolumeConfigMapInput is an input type that accepts RedisSpecStorageVolumeMountVolumeConfigMap and RedisSpecStorageVolumeMountVolumeConfigMapOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeConfigMapInput` via:
//
//	RedisSpecStorageVolumeMountVolumeConfigMap{ "key": RedisSpecStorageVolumeMountVolumeConfigArgs{...} }
type RedisSpecStorageVolumeMountVolumeConfigMapInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeConfigMapOutput() RedisSpecStorageVolumeMountVolumeConfigMapOutput
	ToRedisSpecStorageVolumeMountVolumeConfigMapOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeConfigMapOutput
}

// configMap represents a configMap that should populate this volume
type RedisSpecStorageVolumeMountVolumeConfigMapArgs struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecStorageVolumeMountVolumeConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMap)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeConfigMapOutput() RedisSpecStorageVolumeMountVolumeConfigMapOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeConfigMapOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeConfigMapOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeConfigMapOutput)
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeConfigMapOutput).ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeConfigMapPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeConfigMapArgs, RedisSpecStorageVolumeMountVolumeConfigMapPtr and RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeConfigMapPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeConfigMapArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeConfigMapPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput
	ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput
}

type redisSpecStorageVolumeMountVolumeConfigMapPtrType RedisSpecStorageVolumeMountVolumeConfigMapArgs

func RedisSpecStorageVolumeMountVolumeConfigMapPtr(v *RedisSpecStorageVolumeMountVolumeConfigMapArgs) RedisSpecStorageVolumeMountVolumeConfigMapPtrInput {
	return (*redisSpecStorageVolumeMountVolumeConfigMapPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeConfigMap)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeConfigMapPtrType) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeConfigMapPtrType) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput)
}

// configMap represents a configMap that should populate this volume
type RedisSpecStorageVolumeMountVolumeConfigMapOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMap)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapOutput() RedisSpecStorageVolumeMountVolumeConfigMapOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeConfigMap) *RedisSpecStorageVolumeMountVolumeConfigMap {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMap) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) Items() RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMap) []RedisSpecStorageVolumeMountVolumeConfigMapItems {
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o RedisSpecStorageVolumeMountVolumeConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeConfigMap)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeConfigMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeConfigMap) RedisSpecStorageVolumeMountVolumeConfigMap {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeConfigMap
		return ret
	}).(RedisSpecStorageVolumeMountVolumeConfigMapOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeConfigMap) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) Items() RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeConfigMap) []RedisSpecStorageVolumeMountVolumeConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeConfigMapItems struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// RedisSpecStorageVolumeMountVolumeConfigMapItemsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs and RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeConfigMapItemsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs{...}
type RedisSpecStorageVolumeMountVolumeConfigMapItemsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutput() RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput
	ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMapItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutput() RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput)
}

// RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeConfigMapItemsArray and RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeConfigMapItemsArray{ RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs{...} }
type RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput() RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeConfigMapItemsArray []RedisSpecStorageVolumeMountVolumeConfigMapItemsInput

func (RedisSpecStorageVolumeMountVolumeConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeConfigMapItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapItemsArray) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput() RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeConfigMapItemsArray) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMapItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutput() RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput {
	return o
}

// key is the key to project.
func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMapItems) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeConfigMapItems) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeConfigMapItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput() RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeConfigMapItems {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeConfigMapItems)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
type RedisSpecStorageVolumeMountVolumeCsi struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver string `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType *string `pulumi:"fsType"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
}

// RedisSpecStorageVolumeMountVolumeCsiInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCsiArgs and RedisSpecStorageVolumeMountVolumeCsiOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCsiInput` via:
//
//	RedisSpecStorageVolumeMountVolumeCsiArgs{...}
type RedisSpecStorageVolumeMountVolumeCsiInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCsiOutput() RedisSpecStorageVolumeMountVolumeCsiOutput
	ToRedisSpecStorageVolumeMountVolumeCsiOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCsiOutput
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
type RedisSpecStorageVolumeMountVolumeCsiArgs struct {
	// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
	Driver pulumi.StringInput `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
	NodePublishSecretRef RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrInput `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
}

func (RedisSpecStorageVolumeMountVolumeCsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsi)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeCsiArgs) ToRedisSpecStorageVolumeMountVolumeCsiOutput() RedisSpecStorageVolumeMountVolumeCsiOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCsiOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCsiArgs) ToRedisSpecStorageVolumeMountVolumeCsiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCsiOutput)
}

func (i RedisSpecStorageVolumeMountVolumeCsiArgs) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutput() RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCsiArgs) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCsiOutput).ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeCsiPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCsiArgs, RedisSpecStorageVolumeMountVolumeCsiPtr and RedisSpecStorageVolumeMountVolumeCsiPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCsiPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeCsiArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeCsiPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCsiPtrOutput() RedisSpecStorageVolumeMountVolumeCsiPtrOutput
	ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCsiPtrOutput
}

type redisSpecStorageVolumeMountVolumeCsiPtrType RedisSpecStorageVolumeMountVolumeCsiArgs

func RedisSpecStorageVolumeMountVolumeCsiPtr(v *RedisSpecStorageVolumeMountVolumeCsiArgs) RedisSpecStorageVolumeMountVolumeCsiPtrInput {
	return (*redisSpecStorageVolumeMountVolumeCsiPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeCsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCsi)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeCsiPtrType) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutput() RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeCsiPtrType) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCsiPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
type RedisSpecStorageVolumeMountVolumeCsiOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCsiOutput) ToRedisSpecStorageVolumeMountVolumeCsiOutput() RedisSpecStorageVolumeMountVolumeCsiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiOutput) ToRedisSpecStorageVolumeMountVolumeCsiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiOutput) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutput() RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeCsiOutput) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeCsi) *RedisSpecStorageVolumeMountVolumeCsi {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeCsiPtrOutput)
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o RedisSpecStorageVolumeMountVolumeCsiOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCsi) string { return v.Driver }).(pulumi.StringOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o RedisSpecStorageVolumeMountVolumeCsiOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCsi) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o RedisSpecStorageVolumeMountVolumeCsiOutput) NodePublishSecretRef() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCsi) *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef {
		return v.NodePublishSecretRef
	}).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput)
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o RedisSpecStorageVolumeMountVolumeCsiOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCsi) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o RedisSpecStorageVolumeMountVolumeCsiOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCsi) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

type RedisSpecStorageVolumeMountVolumeCsiPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCsi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutput() RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) ToRedisSpecStorageVolumeMountVolumeCsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeCsiOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsi) RedisSpecStorageVolumeMountVolumeCsi {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeCsi
		return ret
	}).(RedisSpecStorageVolumeMountVolumeCsiOutput)
}

// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsi) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsi) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) NodePublishSecretRef() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsi) *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput)
}

// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsi) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
func (o RedisSpecStorageVolumeMountVolumeCsiPtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsi) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
type RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs and RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
type RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs, RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtr and RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrType RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs

func RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
type RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef) *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef) RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
type RedisSpecStorageVolumeMountVolumeCsiVolumeAttributes struct {
}

// downwardAPI represents downward API about the pod that should populate this volume
type RedisSpecStorageVolumeMountVolumeDownwardApi struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items []RedisSpecStorageVolumeMountVolumeDownwardApiItems `pulumi:"items"`
}

// RedisSpecStorageVolumeMountVolumeDownwardApiInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiArgs and RedisSpecStorageVolumeMountVolumeDownwardApiOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiInput` via:
//
//	RedisSpecStorageVolumeMountVolumeDownwardApiArgs{...}
type RedisSpecStorageVolumeMountVolumeDownwardApiInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiOutput() RedisSpecStorageVolumeMountVolumeDownwardApiOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiOutput
}

// downwardAPI represents downward API about the pod that should populate this volume
type RedisSpecStorageVolumeMountVolumeDownwardApiArgs struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayInput `pulumi:"items"`
}

func (RedisSpecStorageVolumeMountVolumeDownwardApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApi)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiOutput() RedisSpecStorageVolumeMountVolumeDownwardApiOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiOutput)
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiOutput).ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeDownwardApiPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiArgs, RedisSpecStorageVolumeMountVolumeDownwardApiPtr and RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeDownwardApiArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeDownwardApiPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput
}

type redisSpecStorageVolumeMountVolumeDownwardApiPtrType RedisSpecStorageVolumeMountVolumeDownwardApiArgs

func RedisSpecStorageVolumeMountVolumeDownwardApiPtr(v *RedisSpecStorageVolumeMountVolumeDownwardApiArgs) RedisSpecStorageVolumeMountVolumeDownwardApiPtrInput {
	return (*redisSpecStorageVolumeMountVolumeDownwardApiPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeDownwardApiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeDownwardApi)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeDownwardApiPtrType) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeDownwardApiPtrType) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
type RedisSpecStorageVolumeMountVolumeDownwardApiOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiOutput() RedisSpecStorageVolumeMountVolumeDownwardApiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeDownwardApi) *RedisSpecStorageVolumeMountVolumeDownwardApi {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApi) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o RedisSpecStorageVolumeMountVolumeDownwardApiOutput) Items() RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApi) []RedisSpecStorageVolumeMountVolumeDownwardApiItems {
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput)
}

type RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeDownwardApi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeDownwardApiOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApi) RedisSpecStorageVolumeMountVolumeDownwardApi {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeDownwardApi
		return ret
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiOutput)
}

// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApi) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput) Items() RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApi) []RedisSpecStorageVolumeMountVolumeDownwardApiItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type RedisSpecStorageVolumeMountVolumeDownwardApiItems struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// RedisSpecStorageVolumeMountVolumeDownwardApiItemsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs and RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiItemsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs{...}
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path pulumi.StringInput `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput)
}

// RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray and RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray{ RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs{...} }
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray []RedisSpecStorageVolumeMountVolumeDownwardApiItemsInput

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeDownwardApiItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput {
	return o
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) FieldRef() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItems) *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef {
		return v.FieldRef
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItems) string { return v.Path }).(pulumi.StringOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput) ResourceFieldRef() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItems) *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeDownwardApiItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeDownwardApiItems {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeDownwardApiItems)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs and RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs{...}
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput).ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs, RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtr and RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrType RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs

func RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtr(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef) *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef) RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs and RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs{...}
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput).ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs, RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtr and RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrType RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs

func RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtr(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) interface{} {
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type RedisSpecStorageVolumeMountVolumeEmptyDir struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit interface{} `pulumi:"sizeLimit"`
}

// RedisSpecStorageVolumeMountVolumeEmptyDirInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEmptyDirArgs and RedisSpecStorageVolumeMountVolumeEmptyDirOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEmptyDirInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEmptyDirArgs{...}
type RedisSpecStorageVolumeMountVolumeEmptyDirInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEmptyDirOutput() RedisSpecStorageVolumeMountVolumeEmptyDirOutput
	ToRedisSpecStorageVolumeMountVolumeEmptyDirOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirOutput
}

// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type RedisSpecStorageVolumeMountVolumeEmptyDirArgs struct {
	// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit pulumi.Input `pulumi:"sizeLimit"`
}

func (RedisSpecStorageVolumeMountVolumeEmptyDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEmptyDir)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEmptyDirArgs) ToRedisSpecStorageVolumeMountVolumeEmptyDirOutput() RedisSpecStorageVolumeMountVolumeEmptyDirOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEmptyDirOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEmptyDirArgs) ToRedisSpecStorageVolumeMountVolumeEmptyDirOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEmptyDirOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEmptyDirArgs) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput() RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEmptyDirArgs) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEmptyDirOutput).ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEmptyDirPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEmptyDirArgs, RedisSpecStorageVolumeMountVolumeEmptyDirPtr and RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEmptyDirPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEmptyDirArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEmptyDirPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput() RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput
	ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput
}

type redisSpecStorageVolumeMountVolumeEmptyDirPtrType RedisSpecStorageVolumeMountVolumeEmptyDirArgs

func RedisSpecStorageVolumeMountVolumeEmptyDirPtr(v *RedisSpecStorageVolumeMountVolumeEmptyDirArgs) RedisSpecStorageVolumeMountVolumeEmptyDirPtrInput {
	return (*redisSpecStorageVolumeMountVolumeEmptyDirPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEmptyDirPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEmptyDir)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEmptyDirPtrType) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput() RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEmptyDirPtrType) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type RedisSpecStorageVolumeMountVolumeEmptyDirOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEmptyDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEmptyDir)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirOutput) ToRedisSpecStorageVolumeMountVolumeEmptyDirOutput() RedisSpecStorageVolumeMountVolumeEmptyDirOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirOutput) ToRedisSpecStorageVolumeMountVolumeEmptyDirOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirOutput) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput() RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirOutput) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEmptyDir) *RedisSpecStorageVolumeMountVolumeEmptyDir {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput)
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o RedisSpecStorageVolumeMountVolumeEmptyDirOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEmptyDir) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o RedisSpecStorageVolumeMountVolumeEmptyDirOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEmptyDir) interface{} { return v.SizeLimit }).(pulumi.AnyOutput)
}

type RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEmptyDir)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput() RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput) ToRedisSpecStorageVolumeMountVolumeEmptyDirPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEmptyDirOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEmptyDir) RedisSpecStorageVolumeMountVolumeEmptyDir {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEmptyDir
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEmptyDirOutput)
}

// medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEmptyDir) interface{} {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.AnyOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
//
//	Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
//	Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
//	Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
//	A pod can use both types of ephemeral volumes and persistent volumes at the same time.
type RedisSpecStorageVolumeMountVolumeEphemeral struct {
	// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
	//  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
	//  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
	//  Required, must not be nil.
	VolumeClaimTemplate *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralArgs and RedisSpecStorageVolumeMountVolumeEphemeralOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralOutput() RedisSpecStorageVolumeMountVolumeEphemeralOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralOutput
}

// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
//
//	Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
//	Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
//	Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
//	A pod can use both types of ephemeral volumes and persistent volumes at the same time.
type RedisSpecStorageVolumeMountVolumeEphemeralArgs struct {
	// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
	//  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
	//  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
	//  Required, must not be nil.
	VolumeClaimTemplate RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeral)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralOutput() RedisSpecStorageVolumeMountVolumeEphemeralOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralArgs, RedisSpecStorageVolumeMountVolumeEphemeralPtr and RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralPtrType RedisSpecStorageVolumeMountVolumeEphemeralArgs

func RedisSpecStorageVolumeMountVolumeEphemeralPtr(v *RedisSpecStorageVolumeMountVolumeEphemeralArgs) RedisSpecStorageVolumeMountVolumeEphemeralPtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeral)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
//
//	Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
//	Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
//	Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
//	A pod can use both types of ephemeral volumes and persistent volumes at the same time.
type RedisSpecStorageVolumeMountVolumeEphemeralOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeral)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralOutput() RedisSpecStorageVolumeMountVolumeEphemeralOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeral) *RedisSpecStorageVolumeMountVolumeEphemeral {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
//	An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//	This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//	Required, must not be nil.
func (o RedisSpecStorageVolumeMountVolumeEphemeralOutput) VolumeClaimTemplate() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeral) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate {
		return v.VolumeClaimTemplate
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeral)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeral) RedisSpecStorageVolumeMountVolumeEphemeral {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeral
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
//	An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//	This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//	Required, must not be nil.
func (o RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput) VolumeClaimTemplate() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeral) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
//	An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//	This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//	Required, must not be nil.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate struct {
	// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
	Spec RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec `pulumi:"spec"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
//	An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//	This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//	Required, must not be nil.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs struct {
	// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
	Spec RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecInput `pulumi:"spec"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs, RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtr and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrType RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs

func RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtr(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
//
//	An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
//	This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
//	Required, must not be nil.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput) Spec() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec {
		return v.Spec
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput) Spec() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplate) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec {
		if v == nil {
			return nil
		}
		return &v.Spec
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateMetadata struct {
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrInput `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrInput `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrInput `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs, RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtr and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrType RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs

func RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtr(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) []string {
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) DataSource() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource {
		return v.DataSource
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) DataSourceRef() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef {
		return v.DataSourceRef
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) Resources() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources {
		return v.Resources
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) Selector() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector {
		return v.Selector
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *string {
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput)
}

// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) DataSource() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) DataSourceRef() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) Resources() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) Selector() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs, RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtr and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrType RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs

func RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtr(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) string {
		return v.Kind
	}).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) string {
		return v.Name
	}).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs, RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtr and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs

func RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtr(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef   allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef   preserves all values, and generates an error if a disallowed value is   specified. * While dataSource only allows local objects, dataSourceRef allows objects   in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) string {
		return v.Kind
	}).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
	//  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
	//  This field is immutable. It can only be set for containers.
	Claims RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs, RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtr and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrType RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs

func RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtr(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) Claims() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims {
		return v.Claims
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
//
//	This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
//	This field is immutable. It can only be set for containers.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Claims() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray{ RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs{...} }
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsInput

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims) string {
		return v.Name
	}).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaims)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesRequests struct {
}

// selector is a label query over volumes to consider for binding.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput)
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput).ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs, RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtr and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput
}

type redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrType RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs

func RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtr(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrInput {
	return (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrType) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector) *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) MatchExpressions() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector) []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector
		return ret
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) MatchExpressions() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector) []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...}
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray and RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray{ RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...} }
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray []RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) string {
		return v.Key
	}).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToRedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchLabels struct {
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type RedisSpecStorageVolumeMountVolumeFc struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun *int `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`
}

// RedisSpecStorageVolumeMountVolumeFcInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFcArgs and RedisSpecStorageVolumeMountVolumeFcOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFcInput` via:
//
//	RedisSpecStorageVolumeMountVolumeFcArgs{...}
type RedisSpecStorageVolumeMountVolumeFcInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFcOutput() RedisSpecStorageVolumeMountVolumeFcOutput
	ToRedisSpecStorageVolumeMountVolumeFcOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFcOutput
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type RedisSpecStorageVolumeMountVolumeFcArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`
}

func (RedisSpecStorageVolumeMountVolumeFcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFc)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeFcArgs) ToRedisSpecStorageVolumeMountVolumeFcOutput() RedisSpecStorageVolumeMountVolumeFcOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFcOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFcArgs) ToRedisSpecStorageVolumeMountVolumeFcOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFcOutput)
}

func (i RedisSpecStorageVolumeMountVolumeFcArgs) ToRedisSpecStorageVolumeMountVolumeFcPtrOutput() RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFcArgs) ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFcOutput).ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeFcPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFcArgs, RedisSpecStorageVolumeMountVolumeFcPtr and RedisSpecStorageVolumeMountVolumeFcPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFcPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeFcArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeFcPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFcPtrOutput() RedisSpecStorageVolumeMountVolumeFcPtrOutput
	ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFcPtrOutput
}

type redisSpecStorageVolumeMountVolumeFcPtrType RedisSpecStorageVolumeMountVolumeFcArgs

func RedisSpecStorageVolumeMountVolumeFcPtr(v *RedisSpecStorageVolumeMountVolumeFcArgs) RedisSpecStorageVolumeMountVolumeFcPtrInput {
	return (*redisSpecStorageVolumeMountVolumeFcPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeFcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFc)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeFcPtrType) ToRedisSpecStorageVolumeMountVolumeFcPtrOutput() RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeFcPtrType) ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFcPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type RedisSpecStorageVolumeMountVolumeFcOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFc)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFcOutput) ToRedisSpecStorageVolumeMountVolumeFcOutput() RedisSpecStorageVolumeMountVolumeFcOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFcOutput) ToRedisSpecStorageVolumeMountVolumeFcOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFcOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFcOutput) ToRedisSpecStorageVolumeMountVolumeFcPtrOutput() RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeFcOutput) ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeFc) *RedisSpecStorageVolumeMountVolumeFc {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeFcPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeFcOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFc) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o RedisSpecStorageVolumeMountVolumeFcOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFc) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeFcOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFc) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o RedisSpecStorageVolumeMountVolumeFcOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFc) []string { return v.TargetWWNs }).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o RedisSpecStorageVolumeMountVolumeFcOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFc) []string { return v.Wwids }).(pulumi.StringArrayOutput)
}

type RedisSpecStorageVolumeMountVolumeFcPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFc)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) ToRedisSpecStorageVolumeMountVolumeFcPtrOutput() RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) ToRedisSpecStorageVolumeMountVolumeFcPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFcPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeFcOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFc) RedisSpecStorageVolumeMountVolumeFc {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeFc
		return ret
	}).(RedisSpecStorageVolumeMountVolumeFcOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFc) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFc) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFc) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFc) []string {
		if v == nil {
			return nil
		}
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o RedisSpecStorageVolumeMountVolumeFcPtrOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFc) []string {
		if v == nil {
			return nil
		}
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type RedisSpecStorageVolumeMountVolumeFlexVolume struct {
	// driver is the name of the driver to use for this volume.
	Driver string `pulumi:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef `pulumi:"secretRef"`
}

// RedisSpecStorageVolumeMountVolumeFlexVolumeInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFlexVolumeArgs and RedisSpecStorageVolumeMountVolumeFlexVolumeOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFlexVolumeInput` via:
//
//	RedisSpecStorageVolumeMountVolumeFlexVolumeArgs{...}
type RedisSpecStorageVolumeMountVolumeFlexVolumeInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeOutput
	ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeOutput
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type RedisSpecStorageVolumeMountVolumeFlexVolumeArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringInput `pulumi:"driver"`
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
	SecretRef RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrInput `pulumi:"secretRef"`
}

func (RedisSpecStorageVolumeMountVolumeFlexVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolume)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlexVolumeOutput)
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlexVolumeOutput).ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeFlexVolumePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFlexVolumeArgs, RedisSpecStorageVolumeMountVolumeFlexVolumePtr and RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFlexVolumePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeFlexVolumeArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeFlexVolumePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput
	ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput
}

type redisSpecStorageVolumeMountVolumeFlexVolumePtrType RedisSpecStorageVolumeMountVolumeFlexVolumeArgs

func RedisSpecStorageVolumeMountVolumeFlexVolumePtr(v *RedisSpecStorageVolumeMountVolumeFlexVolumeArgs) RedisSpecStorageVolumeMountVolumeFlexVolumePtrInput {
	return (*redisSpecStorageVolumeMountVolumeFlexVolumePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeFlexVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFlexVolume)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeFlexVolumePtrType) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeFlexVolumePtrType) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput)
}

// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type RedisSpecStorageVolumeMountVolumeFlexVolumeOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeFlexVolume) *RedisSpecStorageVolumeMountVolumeFlexVolume {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlexVolume) string { return v.Driver }).(pulumi.StringOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlexVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlexVolume) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlexVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeOutput) SecretRef() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlexVolume) *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFlexVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeFlexVolumeOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolume) RedisSpecStorageVolumeMountVolumeFlexVolume {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeFlexVolume
		return ret
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumeOutput)
}

// driver is the name of the driver to use for this volume.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
func (o RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolume) *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput)
}

// options is Optional: this field holds extra command options if any.
type RedisSpecStorageVolumeMountVolumeFlexVolumeOptions struct {
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
type RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs and RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
type RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs, RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtr and RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrType RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs

func RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
type RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef) *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef) RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
type RedisSpecStorageVolumeMountVolumeFlocker struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName *string `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `pulumi:"datasetUUID"`
}

// RedisSpecStorageVolumeMountVolumeFlockerInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFlockerArgs and RedisSpecStorageVolumeMountVolumeFlockerOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFlockerInput` via:
//
//	RedisSpecStorageVolumeMountVolumeFlockerArgs{...}
type RedisSpecStorageVolumeMountVolumeFlockerInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFlockerOutput() RedisSpecStorageVolumeMountVolumeFlockerOutput
	ToRedisSpecStorageVolumeMountVolumeFlockerOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFlockerOutput
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
type RedisSpecStorageVolumeMountVolumeFlockerArgs struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID pulumi.StringPtrInput `pulumi:"datasetUUID"`
}

func (RedisSpecStorageVolumeMountVolumeFlockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlocker)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeFlockerArgs) ToRedisSpecStorageVolumeMountVolumeFlockerOutput() RedisSpecStorageVolumeMountVolumeFlockerOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlockerOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFlockerArgs) ToRedisSpecStorageVolumeMountVolumeFlockerOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlockerOutput)
}

func (i RedisSpecStorageVolumeMountVolumeFlockerArgs) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutput() RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeFlockerArgs) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlockerOutput).ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeFlockerPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeFlockerArgs, RedisSpecStorageVolumeMountVolumeFlockerPtr and RedisSpecStorageVolumeMountVolumeFlockerPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeFlockerPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeFlockerArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeFlockerPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutput() RedisSpecStorageVolumeMountVolumeFlockerPtrOutput
	ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeFlockerPtrOutput
}

type redisSpecStorageVolumeMountVolumeFlockerPtrType RedisSpecStorageVolumeMountVolumeFlockerArgs

func RedisSpecStorageVolumeMountVolumeFlockerPtr(v *RedisSpecStorageVolumeMountVolumeFlockerArgs) RedisSpecStorageVolumeMountVolumeFlockerPtrInput {
	return (*redisSpecStorageVolumeMountVolumeFlockerPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeFlockerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFlocker)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeFlockerPtrType) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutput() RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeFlockerPtrType) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeFlockerPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
type RedisSpecStorageVolumeMountVolumeFlockerOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFlockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlocker)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFlockerOutput) ToRedisSpecStorageVolumeMountVolumeFlockerOutput() RedisSpecStorageVolumeMountVolumeFlockerOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlockerOutput) ToRedisSpecStorageVolumeMountVolumeFlockerOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlockerOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlockerOutput) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutput() RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeFlockerOutput) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeFlocker) *RedisSpecStorageVolumeMountVolumeFlocker {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeFlockerPtrOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o RedisSpecStorageVolumeMountVolumeFlockerOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlocker) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o RedisSpecStorageVolumeMountVolumeFlockerOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeFlocker) *string { return v.DatasetUUID }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeFlockerPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeFlockerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeFlocker)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeFlockerPtrOutput) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutput() RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlockerPtrOutput) ToRedisSpecStorageVolumeMountVolumeFlockerPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeFlockerPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeFlockerPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeFlockerOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlocker) RedisSpecStorageVolumeMountVolumeFlocker {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeFlocker
		return ret
	}).(RedisSpecStorageVolumeMountVolumeFlockerOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
func (o RedisSpecStorageVolumeMountVolumeFlockerPtrOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlocker) *string {
		if v == nil {
			return nil
		}
		return v.DatasetName
	}).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o RedisSpecStorageVolumeMountVolumeFlockerPtrOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeFlocker) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUUID
	}).(pulumi.StringPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type RedisSpecStorageVolumeMountVolumeGcePersistentDisk struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`
}

// RedisSpecStorageVolumeMountVolumeGcePersistentDiskInput is an input type that accepts RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs and RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeGcePersistentDiskInput` via:
//
//	RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs{...}
type RedisSpecStorageVolumeMountVolumeGcePersistentDiskInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput
	ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs struct {
	// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringInput `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGcePersistentDisk)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput)
}

func (i RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput).ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs, RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtr and RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput
	ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput
}

type redisSpecStorageVolumeMountVolumeGcePersistentDiskPtrType RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs

func RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtr(v *RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs) RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrInput {
	return (*redisSpecStorageVolumeMountVolumeGcePersistentDiskPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeGcePersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeGcePersistentDisk)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeGcePersistentDiskPtrType) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeGcePersistentDiskPtrType) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGcePersistentDisk)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *RedisSpecStorageVolumeMountVolumeGcePersistentDisk {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput)
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) PdName() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGcePersistentDisk) string { return v.PdName }).(pulumi.StringOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeGcePersistentDisk)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) ToRedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGcePersistentDisk) RedisSpecStorageVolumeMountVolumeGcePersistentDisk {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeGcePersistentDisk
		return ret
	}).(RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput)
}

// fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *string {
		if v == nil {
			return nil
		}
		return &v.PdName
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGcePersistentDisk) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type RedisSpecStorageVolumeMountVolumeGitRepo struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// repository is the URL
	Repository string `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// RedisSpecStorageVolumeMountVolumeGitRepoInput is an input type that accepts RedisSpecStorageVolumeMountVolumeGitRepoArgs and RedisSpecStorageVolumeMountVolumeGitRepoOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeGitRepoInput` via:
//
//	RedisSpecStorageVolumeMountVolumeGitRepoArgs{...}
type RedisSpecStorageVolumeMountVolumeGitRepoInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeGitRepoOutput() RedisSpecStorageVolumeMountVolumeGitRepoOutput
	ToRedisSpecStorageVolumeMountVolumeGitRepoOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeGitRepoOutput
}

// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type RedisSpecStorageVolumeMountVolumeGitRepoArgs struct {
	// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// repository is the URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (RedisSpecStorageVolumeMountVolumeGitRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGitRepo)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeGitRepoArgs) ToRedisSpecStorageVolumeMountVolumeGitRepoOutput() RedisSpecStorageVolumeMountVolumeGitRepoOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGitRepoOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeGitRepoArgs) ToRedisSpecStorageVolumeMountVolumeGitRepoOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGitRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGitRepoOutput)
}

func (i RedisSpecStorageVolumeMountVolumeGitRepoArgs) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutput() RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeGitRepoArgs) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGitRepoOutput).ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeGitRepoPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeGitRepoArgs, RedisSpecStorageVolumeMountVolumeGitRepoPtr and RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeGitRepoPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeGitRepoArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeGitRepoPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutput() RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput
	ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput
}

type redisSpecStorageVolumeMountVolumeGitRepoPtrType RedisSpecStorageVolumeMountVolumeGitRepoArgs

func RedisSpecStorageVolumeMountVolumeGitRepoPtr(v *RedisSpecStorageVolumeMountVolumeGitRepoArgs) RedisSpecStorageVolumeMountVolumeGitRepoPtrInput {
	return (*redisSpecStorageVolumeMountVolumeGitRepoPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeGitRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeGitRepo)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeGitRepoPtrType) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutput() RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeGitRepoPtrType) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput)
}

// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type RedisSpecStorageVolumeMountVolumeGitRepoOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeGitRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGitRepo)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) ToRedisSpecStorageVolumeMountVolumeGitRepoOutput() RedisSpecStorageVolumeMountVolumeGitRepoOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) ToRedisSpecStorageVolumeMountVolumeGitRepoOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGitRepoOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutput() RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeGitRepo) *RedisSpecStorageVolumeMountVolumeGitRepo {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput)
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGitRepo) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGitRepo) string { return v.Repository }).(pulumi.StringOutput)
}

// revision is the commit hash for the specified revision.
func (o RedisSpecStorageVolumeMountVolumeGitRepoOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGitRepo) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeGitRepo)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutput() RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) ToRedisSpecStorageVolumeMountVolumeGitRepoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeGitRepoOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGitRepo) RedisSpecStorageVolumeMountVolumeGitRepo {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeGitRepo
		return ret
	}).(RedisSpecStorageVolumeMountVolumeGitRepoOutput)
}

// directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGitRepo) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
type RedisSpecStorageVolumeMountVolumeGlusterfs struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `pulumi:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// RedisSpecStorageVolumeMountVolumeGlusterfsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeGlusterfsArgs and RedisSpecStorageVolumeMountVolumeGlusterfsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeGlusterfsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeGlusterfsArgs{...}
type RedisSpecStorageVolumeMountVolumeGlusterfsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeGlusterfsOutput() RedisSpecStorageVolumeMountVolumeGlusterfsOutput
	ToRedisSpecStorageVolumeMountVolumeGlusterfsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsOutput
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
type RedisSpecStorageVolumeMountVolumeGlusterfsArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringInput `pulumi:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (RedisSpecStorageVolumeMountVolumeGlusterfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGlusterfs)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeGlusterfsArgs) ToRedisSpecStorageVolumeMountVolumeGlusterfsOutput() RedisSpecStorageVolumeMountVolumeGlusterfsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGlusterfsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeGlusterfsArgs) ToRedisSpecStorageVolumeMountVolumeGlusterfsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGlusterfsOutput)
}

func (i RedisSpecStorageVolumeMountVolumeGlusterfsArgs) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput() RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeGlusterfsArgs) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGlusterfsOutput).ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeGlusterfsPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeGlusterfsArgs, RedisSpecStorageVolumeMountVolumeGlusterfsPtr and RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeGlusterfsPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeGlusterfsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeGlusterfsPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput() RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput
	ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput
}

type redisSpecStorageVolumeMountVolumeGlusterfsPtrType RedisSpecStorageVolumeMountVolumeGlusterfsArgs

func RedisSpecStorageVolumeMountVolumeGlusterfsPtr(v *RedisSpecStorageVolumeMountVolumeGlusterfsArgs) RedisSpecStorageVolumeMountVolumeGlusterfsPtrInput {
	return (*redisSpecStorageVolumeMountVolumeGlusterfsPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeGlusterfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeGlusterfs)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeGlusterfsPtrType) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput() RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeGlusterfsPtrType) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
type RedisSpecStorageVolumeMountVolumeGlusterfsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeGlusterfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGlusterfs)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) ToRedisSpecStorageVolumeMountVolumeGlusterfsOutput() RedisSpecStorageVolumeMountVolumeGlusterfsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) ToRedisSpecStorageVolumeMountVolumeGlusterfsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput() RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeGlusterfs) *RedisSpecStorageVolumeMountVolumeGlusterfs {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) Endpoints() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGlusterfs) string { return v.Endpoints }).(pulumi.StringOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGlusterfs) string { return v.Path }).(pulumi.StringOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o RedisSpecStorageVolumeMountVolumeGlusterfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeGlusterfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeGlusterfs)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput() RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) ToRedisSpecStorageVolumeMountVolumeGlusterfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeGlusterfsOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGlusterfs) RedisSpecStorageVolumeMountVolumeGlusterfs {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeGlusterfs
		return ret
	}).(RedisSpecStorageVolumeMountVolumeGlusterfsOutput)
}

// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGlusterfs) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGlusterfs) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeGlusterfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
type RedisSpecStorageVolumeMountVolumeHostPath struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path string `pulumi:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `pulumi:"type"`
}

// RedisSpecStorageVolumeMountVolumeHostPathInput is an input type that accepts RedisSpecStorageVolumeMountVolumeHostPathArgs and RedisSpecStorageVolumeMountVolumeHostPathOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeHostPathInput` via:
//
//	RedisSpecStorageVolumeMountVolumeHostPathArgs{...}
type RedisSpecStorageVolumeMountVolumeHostPathInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeHostPathOutput() RedisSpecStorageVolumeMountVolumeHostPathOutput
	ToRedisSpecStorageVolumeMountVolumeHostPathOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeHostPathOutput
}

// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
type RedisSpecStorageVolumeMountVolumeHostPathArgs struct {
	// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path pulumi.StringInput `pulumi:"path"`
	// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RedisSpecStorageVolumeMountVolumeHostPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeHostPath)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeHostPathArgs) ToRedisSpecStorageVolumeMountVolumeHostPathOutput() RedisSpecStorageVolumeMountVolumeHostPathOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeHostPathOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeHostPathArgs) ToRedisSpecStorageVolumeMountVolumeHostPathOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeHostPathOutput)
}

func (i RedisSpecStorageVolumeMountVolumeHostPathArgs) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutput() RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeHostPathArgs) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeHostPathOutput).ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeHostPathPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeHostPathArgs, RedisSpecStorageVolumeMountVolumeHostPathPtr and RedisSpecStorageVolumeMountVolumeHostPathPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeHostPathPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeHostPathArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeHostPathPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutput() RedisSpecStorageVolumeMountVolumeHostPathPtrOutput
	ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeHostPathPtrOutput
}

type redisSpecStorageVolumeMountVolumeHostPathPtrType RedisSpecStorageVolumeMountVolumeHostPathArgs

func RedisSpecStorageVolumeMountVolumeHostPathPtr(v *RedisSpecStorageVolumeMountVolumeHostPathArgs) RedisSpecStorageVolumeMountVolumeHostPathPtrInput {
	return (*redisSpecStorageVolumeMountVolumeHostPathPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeHostPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeHostPath)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeHostPathPtrType) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutput() RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeHostPathPtrType) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeHostPathPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
type RedisSpecStorageVolumeMountVolumeHostPathOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeHostPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeHostPath)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeHostPathOutput) ToRedisSpecStorageVolumeMountVolumeHostPathOutput() RedisSpecStorageVolumeMountVolumeHostPathOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeHostPathOutput) ToRedisSpecStorageVolumeMountVolumeHostPathOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeHostPathOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeHostPathOutput) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutput() RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeHostPathOutput) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeHostPath) *RedisSpecStorageVolumeMountVolumeHostPath {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeHostPathPtrOutput)
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o RedisSpecStorageVolumeMountVolumeHostPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeHostPath) string { return v.Path }).(pulumi.StringOutput)
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o RedisSpecStorageVolumeMountVolumeHostPathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeHostPath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeHostPathPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeHostPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeHostPath)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeHostPathPtrOutput) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutput() RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeHostPathPtrOutput) ToRedisSpecStorageVolumeMountVolumeHostPathPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeHostPathPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeHostPathPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeHostPathOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeHostPath) RedisSpecStorageVolumeMountVolumeHostPath {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeHostPath
		return ret
	}).(RedisSpecStorageVolumeMountVolumeHostPathOutput)
}

// path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o RedisSpecStorageVolumeMountVolumeHostPathPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeHostPath) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o RedisSpecStorageVolumeMountVolumeHostPathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeHostPath) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
type RedisSpecStorageVolumeMountVolumeIscsi struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef *RedisSpecStorageVolumeMountVolumeIscsiSecretRef `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `pulumi:"targetPortal"`
}

// RedisSpecStorageVolumeMountVolumeIscsiInput is an input type that accepts RedisSpecStorageVolumeMountVolumeIscsiArgs and RedisSpecStorageVolumeMountVolumeIscsiOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeIscsiInput` via:
//
//	RedisSpecStorageVolumeMountVolumeIscsiArgs{...}
type RedisSpecStorageVolumeMountVolumeIscsiInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeIscsiOutput() RedisSpecStorageVolumeMountVolumeIscsiOutput
	ToRedisSpecStorageVolumeMountVolumeIscsiOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeIscsiOutput
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
type RedisSpecStorageVolumeMountVolumeIscsiArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn pulumi.StringInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun pulumi.IntInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is the CHAP Secret for iSCSI target and initiator authentication
	SecretRef RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringInput `pulumi:"targetPortal"`
}

func (RedisSpecStorageVolumeMountVolumeIscsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsi)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeIscsiArgs) ToRedisSpecStorageVolumeMountVolumeIscsiOutput() RedisSpecStorageVolumeMountVolumeIscsiOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeIscsiOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeIscsiArgs) ToRedisSpecStorageVolumeMountVolumeIscsiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeIscsiOutput)
}

func (i RedisSpecStorageVolumeMountVolumeIscsiArgs) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeIscsiArgs) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeIscsiOutput).ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeIscsiPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeIscsiArgs, RedisSpecStorageVolumeMountVolumeIscsiPtr and RedisSpecStorageVolumeMountVolumeIscsiPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeIscsiPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeIscsiArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeIscsiPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiPtrOutput
	ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeIscsiPtrOutput
}

type redisSpecStorageVolumeMountVolumeIscsiPtrType RedisSpecStorageVolumeMountVolumeIscsiArgs

func RedisSpecStorageVolumeMountVolumeIscsiPtr(v *RedisSpecStorageVolumeMountVolumeIscsiArgs) RedisSpecStorageVolumeMountVolumeIscsiPtrInput {
	return (*redisSpecStorageVolumeMountVolumeIscsiPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeIscsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeIscsi)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeIscsiPtrType) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeIscsiPtrType) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeIscsiPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
type RedisSpecStorageVolumeMountVolumeIscsiOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeIscsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ToRedisSpecStorageVolumeMountVolumeIscsiOutput() RedisSpecStorageVolumeMountVolumeIscsiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ToRedisSpecStorageVolumeMountVolumeIscsiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeIscsi) *RedisSpecStorageVolumeMountVolumeIscsi {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeIscsiPtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) Iqn() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) string { return v.Iqn }).(pulumi.StringOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) int { return v.Lun }).(pulumi.IntOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) SecretRef() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) *RedisSpecStorageVolumeMountVolumeIscsiSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o RedisSpecStorageVolumeMountVolumeIscsiOutput) TargetPortal() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsi) string { return v.TargetPortal }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeIscsiPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeIscsi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) ToRedisSpecStorageVolumeMountVolumeIscsiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeIscsiOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) RedisSpecStorageVolumeMountVolumeIscsi {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeIscsi
		return ret
	}).(RedisSpecStorageVolumeMountVolumeIscsiOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *string {
		if v == nil {
			return nil
		}
		return &v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *int {
		if v == nil {
			return nil
		}
		return &v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *RedisSpecStorageVolumeMountVolumeIscsiSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
func (o RedisSpecStorageVolumeMountVolumeIscsiPtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsi) *string {
		if v == nil {
			return nil
		}
		return &v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type RedisSpecStorageVolumeMountVolumeIscsiSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeIscsiSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs and RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeIscsiSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeIscsiSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsiSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs, RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtr and RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeIscsiSecretRefPtrType RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs

func RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs) RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeIscsiSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeIscsiSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeIscsiSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeIscsiSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeIscsiSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsiSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeIscsiSecretRef) *RedisSpecStorageVolumeMountVolumeIscsiSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeIscsiSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeIscsiSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsiSecretRef) RedisSpecStorageVolumeMountVolumeIscsiSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeIscsiSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeIscsiSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type RedisSpecStorageVolumeMountVolumeNfs struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `pulumi:"server"`
}

// RedisSpecStorageVolumeMountVolumeNfsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeNfsArgs and RedisSpecStorageVolumeMountVolumeNfsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeNfsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeNfsArgs{...}
type RedisSpecStorageVolumeMountVolumeNfsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeNfsOutput() RedisSpecStorageVolumeMountVolumeNfsOutput
	ToRedisSpecStorageVolumeMountVolumeNfsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeNfsOutput
}

// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type RedisSpecStorageVolumeMountVolumeNfsArgs struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path pulumi.StringInput `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server pulumi.StringInput `pulumi:"server"`
}

func (RedisSpecStorageVolumeMountVolumeNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeNfs)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeNfsArgs) ToRedisSpecStorageVolumeMountVolumeNfsOutput() RedisSpecStorageVolumeMountVolumeNfsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeNfsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeNfsArgs) ToRedisSpecStorageVolumeMountVolumeNfsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeNfsOutput)
}

func (i RedisSpecStorageVolumeMountVolumeNfsArgs) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutput() RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeNfsArgs) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeNfsOutput).ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeNfsPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeNfsArgs, RedisSpecStorageVolumeMountVolumeNfsPtr and RedisSpecStorageVolumeMountVolumeNfsPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeNfsPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeNfsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeNfsPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeNfsPtrOutput() RedisSpecStorageVolumeMountVolumeNfsPtrOutput
	ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeNfsPtrOutput
}

type redisSpecStorageVolumeMountVolumeNfsPtrType RedisSpecStorageVolumeMountVolumeNfsArgs

func RedisSpecStorageVolumeMountVolumeNfsPtr(v *RedisSpecStorageVolumeMountVolumeNfsArgs) RedisSpecStorageVolumeMountVolumeNfsPtrInput {
	return (*redisSpecStorageVolumeMountVolumeNfsPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeNfs)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeNfsPtrType) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutput() RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeNfsPtrType) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeNfsPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type RedisSpecStorageVolumeMountVolumeNfsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeNfs)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeNfsOutput) ToRedisSpecStorageVolumeMountVolumeNfsOutput() RedisSpecStorageVolumeMountVolumeNfsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeNfsOutput) ToRedisSpecStorageVolumeMountVolumeNfsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeNfsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeNfsOutput) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutput() RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeNfsOutput) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeNfs) *RedisSpecStorageVolumeMountVolumeNfs {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeNfsPtrOutput)
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeNfsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeNfs) string { return v.Path }).(pulumi.StringOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeNfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeNfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeNfsOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeNfs) string { return v.Server }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeNfsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeNfs)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeNfsPtrOutput) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutput() RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeNfsPtrOutput) ToRedisSpecStorageVolumeMountVolumeNfsPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeNfsPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeNfsPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeNfsOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeNfs) RedisSpecStorageVolumeMountVolumeNfs {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeNfs
		return ret
	}).(RedisSpecStorageVolumeMountVolumeNfsOutput)
}

// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeNfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeNfs) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeNfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeNfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o RedisSpecStorageVolumeMountVolumeNfsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeNfs) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeMountVolumePersistentVolumeClaim struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `pulumi:"readOnly"`
}

// RedisSpecStorageVolumeMountVolumePersistentVolumeClaimInput is an input type that accepts RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs and RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumePersistentVolumeClaimInput` via:
//
//	RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs{...}
type RedisSpecStorageVolumeMountVolumePersistentVolumeClaimInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput
	ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput
}

// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringInput `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePersistentVolumeClaim)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput)
}

func (i RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput).ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs, RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtr and RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput
	ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput
}

type redisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrType RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs

func RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtr(v *RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrInput {
	return (*redisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumePersistentVolumeClaim)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrType) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrType) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePersistentVolumeClaim)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumePersistentVolumeClaim) *RedisSpecStorageVolumeMountVolumePersistentVolumeClaim {
		return &v
	}).(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ClaimName() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePersistentVolumeClaim) string { return v.ClaimName }).(pulumi.StringOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePersistentVolumeClaim) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumePersistentVolumeClaim)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput) ToRedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput) Elem() RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePersistentVolumeClaim) RedisSpecStorageVolumeMountVolumePersistentVolumeClaim {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumePersistentVolumeClaim
		return ret
	}).(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePersistentVolumeClaim) *string {
		if v == nil {
			return nil
		}
		return &v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
func (o RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePersistentVolumeClaim) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumePhotonPersistentDisk struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID string `pulumi:"pdID"`
}

// RedisSpecStorageVolumeMountVolumePhotonPersistentDiskInput is an input type that accepts RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs and RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumePhotonPersistentDiskInput` via:
//
//	RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs{...}
type RedisSpecStorageVolumeMountVolumePhotonPersistentDiskInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput
	ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID pulumi.StringInput `pulumi:"pdID"`
}

func (RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePhotonPersistentDisk)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput)
}

func (i RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput).ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs, RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtr and RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput
	ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput
}

type redisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrType RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs

func RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtr(v *RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrInput {
	return (*redisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumePhotonPersistentDisk)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrType) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrType) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePhotonPersistentDisk)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumePhotonPersistentDisk) *RedisSpecStorageVolumeMountVolumePhotonPersistentDisk {
		return &v
	}).(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePhotonPersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput) PdID() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePhotonPersistentDisk) string { return v.PdID }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumePhotonPersistentDisk)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput) ToRedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput) Elem() RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePhotonPersistentDisk) RedisSpecStorageVolumeMountVolumePhotonPersistentDisk {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumePhotonPersistentDisk
		return ret
	}).(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePhotonPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePhotonPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return &v.PdID
	}).(pulumi.StringPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumePortworxVolume struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID string `pulumi:"volumeID"`
}

// RedisSpecStorageVolumeMountVolumePortworxVolumeInput is an input type that accepts RedisSpecStorageVolumeMountVolumePortworxVolumeArgs and RedisSpecStorageVolumeMountVolumePortworxVolumeOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumePortworxVolumeInput` via:
//
//	RedisSpecStorageVolumeMountVolumePortworxVolumeArgs{...}
type RedisSpecStorageVolumeMountVolumePortworxVolumeInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutput() RedisSpecStorageVolumeMountVolumePortworxVolumeOutput
	ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumeOutput
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumePortworxVolumeArgs struct {
	// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringInput `pulumi:"volumeID"`
}

func (RedisSpecStorageVolumeMountVolumePortworxVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePortworxVolume)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumePortworxVolumeArgs) ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutput() RedisSpecStorageVolumeMountVolumePortworxVolumeOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumePortworxVolumeArgs) ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePortworxVolumeOutput)
}

func (i RedisSpecStorageVolumeMountVolumePortworxVolumeArgs) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput() RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumePortworxVolumeArgs) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePortworxVolumeOutput).ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumePortworxVolumePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumePortworxVolumeArgs, RedisSpecStorageVolumeMountVolumePortworxVolumePtr and RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumePortworxVolumePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumePortworxVolumeArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumePortworxVolumePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput() RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput
	ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput
}

type redisSpecStorageVolumeMountVolumePortworxVolumePtrType RedisSpecStorageVolumeMountVolumePortworxVolumeArgs

func RedisSpecStorageVolumeMountVolumePortworxVolumePtr(v *RedisSpecStorageVolumeMountVolumePortworxVolumeArgs) RedisSpecStorageVolumeMountVolumePortworxVolumePtrInput {
	return (*redisSpecStorageVolumeMountVolumePortworxVolumePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumePortworxVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumePortworxVolume)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumePortworxVolumePtrType) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput() RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumePortworxVolumePtrType) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumePortworxVolumeOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePortworxVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutput() RedisSpecStorageVolumeMountVolumePortworxVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) ToRedisSpecStorageVolumeMountVolumePortworxVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput() RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumePortworxVolume) *RedisSpecStorageVolumeMountVolumePortworxVolume {
		return &v
	}).(RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput)
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePortworxVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePortworxVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o RedisSpecStorageVolumeMountVolumePortworxVolumeOutput) VolumeID() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumePortworxVolume) string { return v.VolumeID }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumePortworxVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput() RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) ToRedisSpecStorageVolumeMountVolumePortworxVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) Elem() RedisSpecStorageVolumeMountVolumePortworxVolumeOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePortworxVolume) RedisSpecStorageVolumeMountVolumePortworxVolume {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumePortworxVolume
		return ret
	}).(RedisSpecStorageVolumeMountVolumePortworxVolumeOutput)
}

// fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePortworxVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePortworxVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumePortworxVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
type RedisSpecStorageVolumeMountVolumeProjected struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// sources is the list of volume projections
	Sources []RedisSpecStorageVolumeMountVolumeProjectedSources `pulumi:"sources"`
}

// RedisSpecStorageVolumeMountVolumeProjectedInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedArgs and RedisSpecStorageVolumeMountVolumeProjectedOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedOutput() RedisSpecStorageVolumeMountVolumeProjectedOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedOutput
}

// projected items for all in one resources secrets, configmaps, and downward API
type RedisSpecStorageVolumeMountVolumeProjectedArgs struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// sources is the list of volume projections
	Sources RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayInput `pulumi:"sources"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjected)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedArgs) ToRedisSpecStorageVolumeMountVolumeProjectedOutput() RedisSpecStorageVolumeMountVolumeProjectedOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedArgs) ToRedisSpecStorageVolumeMountVolumeProjectedOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedArgs) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedArgs) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedOutput).ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedArgs, RedisSpecStorageVolumeMountVolumeProjectedPtr and RedisSpecStorageVolumeMountVolumeProjectedPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedPtrType RedisSpecStorageVolumeMountVolumeProjectedArgs

func RedisSpecStorageVolumeMountVolumeProjectedPtr(v *RedisSpecStorageVolumeMountVolumeProjectedArgs) RedisSpecStorageVolumeMountVolumeProjectedPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjected)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedPtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
type RedisSpecStorageVolumeMountVolumeProjectedOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjected)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedOutput) ToRedisSpecStorageVolumeMountVolumeProjectedOutput() RedisSpecStorageVolumeMountVolumeProjectedOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedOutput) ToRedisSpecStorageVolumeMountVolumeProjectedOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedOutput) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedOutput) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjected) *RedisSpecStorageVolumeMountVolumeProjected {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedPtrOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeProjectedOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjected) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections
func (o RedisSpecStorageVolumeMountVolumeProjectedOutput) Sources() RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjected) []RedisSpecStorageVolumeMountVolumeProjectedSources {
		return v.Sources
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjected)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjected) RedisSpecStorageVolumeMountVolumeProjected {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjected
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeProjectedPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjected) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections
func (o RedisSpecStorageVolumeMountVolumeProjectedPtrOutput) Sources() RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjected) []RedisSpecStorageVolumeMountVolumeProjectedSources {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput)
}

// Projection that may be projected along with other supported volume types
type RedisSpecStorageVolumeMountVolumeProjectedSources struct {
	// configMap information about the configMap data to project
	ConfigMap *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap `pulumi:"configMap"`
	// downwardAPI information about the downwardAPI data to project
	DownwardAPI *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi `pulumi:"downwardAPI"`
	// secret information about the secret data to project
	Secret *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret `pulumi:"secret"`
	// serviceAccountToken is information about the serviceAccountToken data to project
	ServiceAccountToken *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken `pulumi:"serviceAccountToken"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput
}

// Projection that may be projected along with other supported volume types
type RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs struct {
	// configMap information about the configMap data to project
	ConfigMap RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrInput `pulumi:"configMap"`
	// downwardAPI information about the downwardAPI data to project
	DownwardAPI RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrInput `pulumi:"downwardAPI"`
	// secret information about the secret data to project
	Secret RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrInput `pulumi:"secret"`
	// serviceAccountToken is information about the serviceAccountToken data to project
	ServiceAccountToken RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrInput `pulumi:"serviceAccountToken"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSources)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesArray and RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesArray{ RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs{...} }
type RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesArray []RedisSpecStorageVolumeMountVolumeProjectedSourcesInput

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSources)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput)
}

// Projection that may be projected along with other supported volume types
type RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSources)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput {
	return o
}

// configMap information about the configMap data to project
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) ConfigMap() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSources) *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap {
		return v.ConfigMap
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) DownwardAPI() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSources) *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi {
		return v.DownwardAPI
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput)
}

// secret information about the secret data to project
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) Secret() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSources) *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret {
		return v.Secret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput) ServiceAccountToken() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSources) *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken {
		return v.ServiceAccountToken
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSources)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeProjectedSources {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeProjectedSources)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput)
}

// configMap information about the configMap data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap and RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap{ "key": RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigArgs{...} }
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput
}

// configMap information about the configMap data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput).ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs, RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtr and RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrType RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs

func RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtr(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput)
}

// configMap information about the configMap data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) Items() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) []RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems {
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) Items() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) []RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray and RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray{ RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs{...} }
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray []RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsInput

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput {
	return o
}

// key is the key to project.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItems)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput)
}

// downwardAPI information about the downwardAPI data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi struct {
	// Items is a list of DownwardAPIVolume file
	Items []RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems `pulumi:"items"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput
}

// downwardAPI information about the downwardAPI data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayInput `pulumi:"items"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput).ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs, RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtr and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrType RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs

func RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtr(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi) *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput) Items() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi) []RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems {
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput)
}

// Items is a list of DownwardAPIVolume file
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput) Items() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApi) []RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path string `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs struct {
	// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
	FieldRef RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path pulumi.StringInput `pulumi:"path"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
	ResourceFieldRef RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray{ RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs{...} }
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray []RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsInput

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput {
	return o
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) FieldRef() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems) *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef {
		return v.FieldRef
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems) string { return v.Path }).(pulumi.StringOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput) ResourceFieldRef() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems) *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItems)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput).ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs, RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtr and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrType RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs

func RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtr(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef) *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef) *string {
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef) string {
		return v.FieldPath
	}).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput).ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs, RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtr and RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrType RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs

func RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtr(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) interface{} {
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) string {
		return v.Resource
	}).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// secret information about the secret data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput
}

// secret information about the secret data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayInput `pulumi:"items"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput).ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs, RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtr and RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrType RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs

func RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtr(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput)
}

// secret information about the secret data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) Items() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) []RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems {
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) Items() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) []RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray and RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray{ RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs{...} }
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray []RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsInput

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput {
	return o
}

// key is the key to project.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItems)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path string `pulumi:"path"`
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs and RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenInput` via:
//
//	RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs{...}
type RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput
}

// serviceAccountToken is information about the serviceAccountToken data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs struct {
	// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the token into.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput)
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput).ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs, RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtr and RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput
	ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput
}

type redisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrType RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs

func RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtr(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrInput {
	return (*redisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrType) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) *string {
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) ToRedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken
		return ret
	}).(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput)
}

// audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the token into.
func (o RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
type RedisSpecStorageVolumeMountVolumeQuobyte struct {
	// group to map volume access to Default is no group
	Group *string `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `pulumi:"tenant"`
	// user to map volume access to Defaults to serivceaccount user
	User *string `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume string `pulumi:"volume"`
}

// RedisSpecStorageVolumeMountVolumeQuobyteInput is an input type that accepts RedisSpecStorageVolumeMountVolumeQuobyteArgs and RedisSpecStorageVolumeMountVolumeQuobyteOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeQuobyteInput` via:
//
//	RedisSpecStorageVolumeMountVolumeQuobyteArgs{...}
type RedisSpecStorageVolumeMountVolumeQuobyteInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeQuobyteOutput() RedisSpecStorageVolumeMountVolumeQuobyteOutput
	ToRedisSpecStorageVolumeMountVolumeQuobyteOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeQuobyteOutput
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
type RedisSpecStorageVolumeMountVolumeQuobyteArgs struct {
	// group to map volume access to Default is no group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry pulumi.StringInput `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
	// user to map volume access to Defaults to serivceaccount user
	User pulumi.StringPtrInput `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume pulumi.StringInput `pulumi:"volume"`
}

func (RedisSpecStorageVolumeMountVolumeQuobyteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeQuobyte)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeQuobyteArgs) ToRedisSpecStorageVolumeMountVolumeQuobyteOutput() RedisSpecStorageVolumeMountVolumeQuobyteOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeQuobyteOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeQuobyteArgs) ToRedisSpecStorageVolumeMountVolumeQuobyteOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeQuobyteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeQuobyteOutput)
}

func (i RedisSpecStorageVolumeMountVolumeQuobyteArgs) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutput() RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeQuobyteArgs) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeQuobyteOutput).ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeQuobytePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeQuobyteArgs, RedisSpecStorageVolumeMountVolumeQuobytePtr and RedisSpecStorageVolumeMountVolumeQuobytePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeQuobytePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeQuobyteArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeQuobytePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutput() RedisSpecStorageVolumeMountVolumeQuobytePtrOutput
	ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeQuobytePtrOutput
}

type redisSpecStorageVolumeMountVolumeQuobytePtrType RedisSpecStorageVolumeMountVolumeQuobyteArgs

func RedisSpecStorageVolumeMountVolumeQuobytePtr(v *RedisSpecStorageVolumeMountVolumeQuobyteArgs) RedisSpecStorageVolumeMountVolumeQuobytePtrInput {
	return (*redisSpecStorageVolumeMountVolumeQuobytePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeQuobytePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeQuobyte)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeQuobytePtrType) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutput() RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeQuobytePtrType) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeQuobytePtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
type RedisSpecStorageVolumeMountVolumeQuobyteOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeQuobyteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeQuobyte)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) ToRedisSpecStorageVolumeMountVolumeQuobyteOutput() RedisSpecStorageVolumeMountVolumeQuobyteOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) ToRedisSpecStorageVolumeMountVolumeQuobyteOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeQuobyteOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutput() RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeQuobyte) *RedisSpecStorageVolumeMountVolumeQuobyte {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeQuobytePtrOutput)
}

// group to map volume access to Default is no group
func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeQuobyte) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeQuobyte) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeQuobyte) string { return v.Registry }).(pulumi.StringOutput)
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeQuobyte) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

// user to map volume access to Defaults to serivceaccount user
func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeQuobyte) *string { return v.User }).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o RedisSpecStorageVolumeMountVolumeQuobyteOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeQuobyte) string { return v.Volume }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeQuobytePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeQuobyte)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutput() RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) ToRedisSpecStorageVolumeMountVolumeQuobytePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeQuobytePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeQuobyteOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) RedisSpecStorageVolumeMountVolumeQuobyte {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeQuobyte
		return ret
	}).(RedisSpecStorageVolumeMountVolumeQuobyteOutput)
}

// group to map volume access to Default is no group
func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) *string {
		if v == nil {
			return nil
		}
		return &v.Registry
	}).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// user to map volume access to Defaults to serivceaccount user
func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o RedisSpecStorageVolumeMountVolumeQuobytePtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeQuobyte) *string {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(pulumi.StringPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
type RedisSpecStorageVolumeMountVolumeRbd struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType *string `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef *RedisSpecStorageVolumeMountVolumeRbdSecretRef `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// RedisSpecStorageVolumeMountVolumeRbdInput is an input type that accepts RedisSpecStorageVolumeMountVolumeRbdArgs and RedisSpecStorageVolumeMountVolumeRbdOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeRbdInput` via:
//
//	RedisSpecStorageVolumeMountVolumeRbdArgs{...}
type RedisSpecStorageVolumeMountVolumeRbdInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeRbdOutput() RedisSpecStorageVolumeMountVolumeRbdOutput
	ToRedisSpecStorageVolumeMountVolumeRbdOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeRbdOutput
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
type RedisSpecStorageVolumeMountVolumeRbdArgs struct {
	// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	SecretRef RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrInput `pulumi:"secretRef"`
	// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (RedisSpecStorageVolumeMountVolumeRbdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbd)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeRbdArgs) ToRedisSpecStorageVolumeMountVolumeRbdOutput() RedisSpecStorageVolumeMountVolumeRbdOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeRbdOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeRbdArgs) ToRedisSpecStorageVolumeMountVolumeRbdOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeRbdOutput)
}

func (i RedisSpecStorageVolumeMountVolumeRbdArgs) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutput() RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeRbdArgs) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeRbdOutput).ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeRbdPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeRbdArgs, RedisSpecStorageVolumeMountVolumeRbdPtr and RedisSpecStorageVolumeMountVolumeRbdPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeRbdPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeRbdArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeRbdPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeRbdPtrOutput() RedisSpecStorageVolumeMountVolumeRbdPtrOutput
	ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeRbdPtrOutput
}

type redisSpecStorageVolumeMountVolumeRbdPtrType RedisSpecStorageVolumeMountVolumeRbdArgs

func RedisSpecStorageVolumeMountVolumeRbdPtr(v *RedisSpecStorageVolumeMountVolumeRbdArgs) RedisSpecStorageVolumeMountVolumeRbdPtrInput {
	return (*redisSpecStorageVolumeMountVolumeRbdPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeRbdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeRbd)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeRbdPtrType) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutput() RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeRbdPtrType) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeRbdPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
type RedisSpecStorageVolumeMountVolumeRbdOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeRbdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbd)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeRbdOutput) ToRedisSpecStorageVolumeMountVolumeRbdOutput() RedisSpecStorageVolumeMountVolumeRbdOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdOutput) ToRedisSpecStorageVolumeMountVolumeRbdOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdOutput) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutput() RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeRbdOutput) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeRbd) *RedisSpecStorageVolumeMountVolumeRbd {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeRbdPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) string { return v.Image }).(pulumi.StringOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) SecretRef() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) *RedisSpecStorageVolumeMountVolumeRbdSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbd) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeRbdPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeRbdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeRbd)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutput() RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) ToRedisSpecStorageVolumeMountVolumeRbdPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeRbdOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) RedisSpecStorageVolumeMountVolumeRbd {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeRbd
		return ret
	}).(RedisSpecStorageVolumeMountVolumeRbdOutput)
}

// fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *RedisSpecStorageVolumeMountVolumeRbdSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput)
}

// user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o RedisSpecStorageVolumeMountVolumeRbdPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbd) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type RedisSpecStorageVolumeMountVolumeRbdSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeRbdSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs and RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeRbdSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeRbdSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbdSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs, RedisSpecStorageVolumeMountVolumeRbdSecretRefPtr and RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeRbdSecretRefPtrType RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs

func RedisSpecStorageVolumeMountVolumeRbdSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs) RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeRbdSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeRbdSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeRbdSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeRbdSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeRbdSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbdSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeRbdSecretRef) *RedisSpecStorageVolumeMountVolumeRbdSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeRbdSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeRbdSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbdSecretRef) RedisSpecStorageVolumeMountVolumeRbdSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeRbdSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeRbdSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
type RedisSpecStorageVolumeMountVolumeScaleIo struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef RedisSpecStorageVolumeMountVolumeScaleIoSecretRef `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// RedisSpecStorageVolumeMountVolumeScaleIoInput is an input type that accepts RedisSpecStorageVolumeMountVolumeScaleIoArgs and RedisSpecStorageVolumeMountVolumeScaleIoOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeScaleIoInput` via:
//
//	RedisSpecStorageVolumeMountVolumeScaleIoArgs{...}
type RedisSpecStorageVolumeMountVolumeScaleIoInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeScaleIoOutput() RedisSpecStorageVolumeMountVolumeScaleIoOutput
	ToRedisSpecStorageVolumeMountVolumeScaleIoOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeScaleIoOutput
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
type RedisSpecStorageVolumeMountVolumeScaleIoArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	SecretRef RedisSpecStorageVolumeMountVolumeScaleIoSecretRefInput `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (RedisSpecStorageVolumeMountVolumeScaleIoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIo)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoOutput() RedisSpecStorageVolumeMountVolumeScaleIoOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeScaleIoOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeScaleIoOutput)
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeScaleIoOutput).ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeScaleIoPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeScaleIoArgs, RedisSpecStorageVolumeMountVolumeScaleIoPtr and RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeScaleIoPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeScaleIoArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeScaleIoPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput
	ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput
}

type redisSpecStorageVolumeMountVolumeScaleIoPtrType RedisSpecStorageVolumeMountVolumeScaleIoArgs

func RedisSpecStorageVolumeMountVolumeScaleIoPtr(v *RedisSpecStorageVolumeMountVolumeScaleIoArgs) RedisSpecStorageVolumeMountVolumeScaleIoPtrInput {
	return (*redisSpecStorageVolumeMountVolumeScaleIoPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeScaleIoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeScaleIo)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeScaleIoPtrType) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeScaleIoPtrType) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
type RedisSpecStorageVolumeMountVolumeScaleIoOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeScaleIoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIo)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoOutput() RedisSpecStorageVolumeMountVolumeScaleIoOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeScaleIo) *RedisSpecStorageVolumeMountVolumeScaleIo {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) string { return v.Gateway }).(pulumi.StringOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) SecretRef() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) RedisSpecStorageVolumeMountVolumeScaleIoSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) System() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) string { return v.System }).(pulumi.StringOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o RedisSpecStorageVolumeMountVolumeScaleIoOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIo) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeScaleIo)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeScaleIoOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) RedisSpecStorageVolumeMountVolumeScaleIo {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeScaleIo
		return ret
	}).(RedisSpecStorageVolumeMountVolumeScaleIoOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return &v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *RedisSpecStorageVolumeMountVolumeScaleIoSecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return &v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
func (o RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIo) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
type RedisSpecStorageVolumeMountVolumeScaleIoSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeScaleIoSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs and RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeScaleIoSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeScaleIoSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
type RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIoSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs, RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtr and RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrType RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs

func RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeScaleIoSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
type RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIoSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeScaleIoSecretRef) *RedisSpecStorageVolumeMountVolumeScaleIoSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeScaleIoSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeScaleIoSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIoSecretRef) RedisSpecStorageVolumeMountVolumeScaleIoSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeScaleIoSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeScaleIoSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type RedisSpecStorageVolumeMountVolumeSecret struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []RedisSpecStorageVolumeMountVolumeSecretItems `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// RedisSpecStorageVolumeMountVolumeSecretInput is an input type that accepts RedisSpecStorageVolumeMountVolumeSecretArgs and RedisSpecStorageVolumeMountVolumeSecretOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeSecretInput` via:
//
//	RedisSpecStorageVolumeMountVolumeSecretArgs{...}
type RedisSpecStorageVolumeMountVolumeSecretInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeSecretOutput() RedisSpecStorageVolumeMountVolumeSecretOutput
	ToRedisSpecStorageVolumeMountVolumeSecretOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeSecretOutput
}

// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type RedisSpecStorageVolumeMountVolumeSecretArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items RedisSpecStorageVolumeMountVolumeSecretItemsArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (RedisSpecStorageVolumeMountVolumeSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecret)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeSecretArgs) ToRedisSpecStorageVolumeMountVolumeSecretOutput() RedisSpecStorageVolumeMountVolumeSecretOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeSecretOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeSecretArgs) ToRedisSpecStorageVolumeMountVolumeSecretOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeSecretOutput)
}

func (i RedisSpecStorageVolumeMountVolumeSecretArgs) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutput() RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeSecretArgs) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeSecretOutput).ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeSecretPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeSecretArgs, RedisSpecStorageVolumeMountVolumeSecretPtr and RedisSpecStorageVolumeMountVolumeSecretPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeSecretPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeSecretArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeSecretPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeSecretPtrOutput() RedisSpecStorageVolumeMountVolumeSecretPtrOutput
	ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeSecretPtrOutput
}

type redisSpecStorageVolumeMountVolumeSecretPtrType RedisSpecStorageVolumeMountVolumeSecretArgs

func RedisSpecStorageVolumeMountVolumeSecretPtr(v *RedisSpecStorageVolumeMountVolumeSecretArgs) RedisSpecStorageVolumeMountVolumeSecretPtrInput {
	return (*redisSpecStorageVolumeMountVolumeSecretPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeSecret)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeSecretPtrType) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutput() RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeSecretPtrType) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeSecretPtrOutput)
}

// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type RedisSpecStorageVolumeMountVolumeSecretOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecret)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeSecretOutput) ToRedisSpecStorageVolumeMountVolumeSecretOutput() RedisSpecStorageVolumeMountVolumeSecretOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretOutput) ToRedisSpecStorageVolumeMountVolumeSecretOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretOutput) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutput() RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeSecretOutput) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeSecret) *RedisSpecStorageVolumeMountVolumeSecret {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeSecretPtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeSecretOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecret) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeSecretOutput) Items() RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecret) []RedisSpecStorageVolumeMountVolumeSecretItems {
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o RedisSpecStorageVolumeMountVolumeSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecStorageVolumeMountVolumeSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeSecretPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeSecret)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutput() RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) ToRedisSpecStorageVolumeMountVolumeSecretPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeSecretOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeSecret) RedisSpecStorageVolumeMountVolumeSecret {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeSecret
		return ret
	}).(RedisSpecStorageVolumeMountVolumeSecretOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeSecret) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) Items() RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeSecret) []RedisSpecStorageVolumeMountVolumeSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecStorageVolumeMountVolumeSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeSecret) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeSecretItems struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// RedisSpecStorageVolumeMountVolumeSecretItemsInput is an input type that accepts RedisSpecStorageVolumeMountVolumeSecretItemsArgs and RedisSpecStorageVolumeMountVolumeSecretItemsOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeSecretItemsInput` via:
//
//	RedisSpecStorageVolumeMountVolumeSecretItemsArgs{...}
type RedisSpecStorageVolumeMountVolumeSecretItemsInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeSecretItemsOutput() RedisSpecStorageVolumeMountVolumeSecretItemsOutput
	ToRedisSpecStorageVolumeMountVolumeSecretItemsOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeSecretItemsOutput
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecStorageVolumeMountVolumeSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecretItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeSecretItemsArgs) ToRedisSpecStorageVolumeMountVolumeSecretItemsOutput() RedisSpecStorageVolumeMountVolumeSecretItemsOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeSecretItemsOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeSecretItemsArgs) ToRedisSpecStorageVolumeMountVolumeSecretItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeSecretItemsOutput)
}

// RedisSpecStorageVolumeMountVolumeSecretItemsArrayInput is an input type that accepts RedisSpecStorageVolumeMountVolumeSecretItemsArray and RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeSecretItemsArrayInput` via:
//
//	RedisSpecStorageVolumeMountVolumeSecretItemsArray{ RedisSpecStorageVolumeMountVolumeSecretItemsArgs{...} }
type RedisSpecStorageVolumeMountVolumeSecretItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput() RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput
	ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput
}

type RedisSpecStorageVolumeMountVolumeSecretItemsArray []RedisSpecStorageVolumeMountVolumeSecretItemsInput

func (RedisSpecStorageVolumeMountVolumeSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeSecretItems)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeSecretItemsArray) ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput() RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeSecretItemsArray) ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecStorageVolumeMountVolumeSecretItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecretItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeSecretItemsOutput) ToRedisSpecStorageVolumeMountVolumeSecretItemsOutput() RedisSpecStorageVolumeMountVolumeSecretItemsOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretItemsOutput) ToRedisSpecStorageVolumeMountVolumeSecretItemsOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretItemsOutput {
	return o
}

// key is the key to project.
func (o RedisSpecStorageVolumeMountVolumeSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecStorageVolumeMountVolumeSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o RedisSpecStorageVolumeMountVolumeSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecStorageVolumeMountVolumeSecretItems)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput() RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput) ToRedisSpecStorageVolumeMountVolumeSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecStorageVolumeMountVolumeSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecStorageVolumeMountVolumeSecretItems {
		return vs[0].([]RedisSpecStorageVolumeMountVolumeSecretItems)[vs[1].(int)]
	}).(RedisSpecStorageVolumeMountVolumeSecretItemsOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
type RedisSpecStorageVolumeMountVolumeStorageos struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef *RedisSpecStorageVolumeMountVolumeStorageosSecretRef `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// RedisSpecStorageVolumeMountVolumeStorageosInput is an input type that accepts RedisSpecStorageVolumeMountVolumeStorageosArgs and RedisSpecStorageVolumeMountVolumeStorageosOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeStorageosInput` via:
//
//	RedisSpecStorageVolumeMountVolumeStorageosArgs{...}
type RedisSpecStorageVolumeMountVolumeStorageosInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeStorageosOutput() RedisSpecStorageVolumeMountVolumeStorageosOutput
	ToRedisSpecStorageVolumeMountVolumeStorageosOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeStorageosOutput
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
type RedisSpecStorageVolumeMountVolumeStorageosArgs struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
	SecretRef RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (RedisSpecStorageVolumeMountVolumeStorageosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageos)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeStorageosArgs) ToRedisSpecStorageVolumeMountVolumeStorageosOutput() RedisSpecStorageVolumeMountVolumeStorageosOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeStorageosOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeStorageosArgs) ToRedisSpecStorageVolumeMountVolumeStorageosOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeStorageosOutput)
}

func (i RedisSpecStorageVolumeMountVolumeStorageosArgs) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeStorageosArgs) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeStorageosOutput).ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeStorageosPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeStorageosArgs, RedisSpecStorageVolumeMountVolumeStorageosPtr and RedisSpecStorageVolumeMountVolumeStorageosPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeStorageosPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeStorageosArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeStorageosPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosPtrOutput
	ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeStorageosPtrOutput
}

type redisSpecStorageVolumeMountVolumeStorageosPtrType RedisSpecStorageVolumeMountVolumeStorageosArgs

func RedisSpecStorageVolumeMountVolumeStorageosPtr(v *RedisSpecStorageVolumeMountVolumeStorageosArgs) RedisSpecStorageVolumeMountVolumeStorageosPtrInput {
	return (*redisSpecStorageVolumeMountVolumeStorageosPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeStorageosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeStorageos)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeStorageosPtrType) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeStorageosPtrType) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeStorageosPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
type RedisSpecStorageVolumeMountVolumeStorageosOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeStorageosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageos)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) ToRedisSpecStorageVolumeMountVolumeStorageosOutput() RedisSpecStorageVolumeMountVolumeStorageosOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) ToRedisSpecStorageVolumeMountVolumeStorageosOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeStorageos) *RedisSpecStorageVolumeMountVolumeStorageos {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeStorageosPtrOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeStorageos) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeStorageos) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) SecretRef() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeStorageos) *RedisSpecStorageVolumeMountVolumeStorageosSecretRef {
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeStorageos) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o RedisSpecStorageVolumeMountVolumeStorageosOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeStorageos) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeStorageosPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeStorageos)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) ToRedisSpecStorageVolumeMountVolumeStorageosPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeStorageosOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageos) RedisSpecStorageVolumeMountVolumeStorageos {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeStorageos
		return ret
	}).(RedisSpecStorageVolumeMountVolumeStorageosOutput)
}

// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageos) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageos) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) SecretRef() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageos) *RedisSpecStorageVolumeMountVolumeStorageosSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageos) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
func (o RedisSpecStorageVolumeMountVolumeStorageosPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageos) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
type RedisSpecStorageVolumeMountVolumeStorageosSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// RedisSpecStorageVolumeMountVolumeStorageosSecretRefInput is an input type that accepts RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs and RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeStorageosSecretRefInput` via:
//
//	RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs{...}
type RedisSpecStorageVolumeMountVolumeStorageosSecretRefInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput
	ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
type RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageosSecretRef)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput)
}

func (i RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput).ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs, RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtr and RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput
	ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput
}

type redisSpecStorageVolumeMountVolumeStorageosSecretRefPtrType RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs

func RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtr(v *RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs) RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrInput {
	return (*redisSpecStorageVolumeMountVolumeStorageosSecretRefPtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeStorageosSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeStorageosSecretRef)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeStorageosSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeStorageosSecretRefPtrType) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
type RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageosSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeStorageosSecretRef) *RedisSpecStorageVolumeMountVolumeStorageosSecretRef {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeStorageosSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeStorageosSecretRef)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput() RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput) ToRedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput) Elem() RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageosSecretRef) RedisSpecStorageVolumeMountVolumeStorageosSecretRef {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeStorageosSecretRef
		return ret
	}).(RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeStorageosSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumeVsphereVolume struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath string `pulumi:"volumePath"`
}

// RedisSpecStorageVolumeMountVolumeVsphereVolumeInput is an input type that accepts RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs and RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeVsphereVolumeInput` via:
//
//	RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs{...}
type RedisSpecStorageVolumeMountVolumeVsphereVolumeInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput
	ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs struct {
	// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID pulumi.StringPtrInput `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName pulumi.StringPtrInput `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath pulumi.StringInput `pulumi:"volumePath"`
}

func (RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeVsphereVolume)(nil)).Elem()
}

func (i RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs) ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs) ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput)
}

func (i RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(context.Background())
}

func (i RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput).ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(ctx)
}

// RedisSpecStorageVolumeMountVolumeVsphereVolumePtrInput is an input type that accepts RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs, RedisSpecStorageVolumeMountVolumeVsphereVolumePtr and RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput values.
// You can construct a concrete instance of `RedisSpecStorageVolumeMountVolumeVsphereVolumePtrInput` via:
//
//	        RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs{...}
//
//	or:
//
//	        nil
type RedisSpecStorageVolumeMountVolumeVsphereVolumePtrInput interface {
	pulumi.Input

	ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput
	ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput
}

type redisSpecStorageVolumeMountVolumeVsphereVolumePtrType RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs

func RedisSpecStorageVolumeMountVolumeVsphereVolumePtr(v *RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs) RedisSpecStorageVolumeMountVolumeVsphereVolumePtrInput {
	return (*redisSpecStorageVolumeMountVolumeVsphereVolumePtrType)(v)
}

func (*redisSpecStorageVolumeMountVolumeVsphereVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeVsphereVolume)(nil)).Elem()
}

func (i *redisSpecStorageVolumeMountVolumeVsphereVolumePtrType) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return i.ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(context.Background())
}

func (i *redisSpecStorageVolumeMountVolumeVsphereVolumePtrType) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
type RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeVsphereVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) ToRedisSpecStorageVolumeMountVolumeVsphereVolumeOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return o.ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(context.Background())
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecStorageVolumeMountVolumeVsphereVolume) *RedisSpecStorageVolumeMountVolumeVsphereVolume {
		return &v
	}).(RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput)
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeVsphereVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeVsphereVolume) *string { return v.StoragePolicyID }).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeVsphereVolume) *string { return v.StoragePolicyName }).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput) VolumePath() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecStorageVolumeMountVolumeVsphereVolume) string { return v.VolumePath }).(pulumi.StringOutput)
}

type RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput struct{ *pulumi.OutputState }

func (RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecStorageVolumeMountVolumeVsphereVolume)(nil)).Elem()
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput() RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) ToRedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutputWithContext(ctx context.Context) RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput {
	return o
}

func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) Elem() RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeVsphereVolume) RedisSpecStorageVolumeMountVolumeVsphereVolume {
		if v != nil {
			return *v
		}
		var ret RedisSpecStorageVolumeMountVolumeVsphereVolume
		return ret
	}).(RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput)
}

// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyID
	}).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyName
	}).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecStorageVolumeMountVolumeVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumePath
	}).(pulumi.StringPtrOutput)
}

// TLS Configuration for redis instances
type RedisSpecTls struct {
	Ca   *string `pulumi:"ca"`
	Cert *string `pulumi:"cert"`
	Key  *string `pulumi:"key"`
	// Reference to secret which contains the certificates
	Secret RedisSpecTlsSecret `pulumi:"secret"`
}

// RedisSpecTlsInput is an input type that accepts RedisSpecTlsArgs and RedisSpecTlsOutput values.
// You can construct a concrete instance of `RedisSpecTlsInput` via:
//
//	RedisSpecTlsArgs{...}
type RedisSpecTlsInput interface {
	pulumi.Input

	ToRedisSpecTlsOutput() RedisSpecTlsOutput
	ToRedisSpecTlsOutputWithContext(context.Context) RedisSpecTlsOutput
}

// TLS Configuration for redis instances
type RedisSpecTlsArgs struct {
	Ca   pulumi.StringPtrInput `pulumi:"ca"`
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	Key  pulumi.StringPtrInput `pulumi:"key"`
	// Reference to secret which contains the certificates
	Secret RedisSpecTlsSecretInput `pulumi:"secret"`
}

func (RedisSpecTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTls)(nil)).Elem()
}

func (i RedisSpecTlsArgs) ToRedisSpecTlsOutput() RedisSpecTlsOutput {
	return i.ToRedisSpecTlsOutputWithContext(context.Background())
}

func (i RedisSpecTlsArgs) ToRedisSpecTlsOutputWithContext(ctx context.Context) RedisSpecTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsOutput)
}

func (i RedisSpecTlsArgs) ToRedisSpecTlsPtrOutput() RedisSpecTlsPtrOutput {
	return i.ToRedisSpecTlsPtrOutputWithContext(context.Background())
}

func (i RedisSpecTlsArgs) ToRedisSpecTlsPtrOutputWithContext(ctx context.Context) RedisSpecTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsOutput).ToRedisSpecTlsPtrOutputWithContext(ctx)
}

// RedisSpecTlsPtrInput is an input type that accepts RedisSpecTlsArgs, RedisSpecTlsPtr and RedisSpecTlsPtrOutput values.
// You can construct a concrete instance of `RedisSpecTlsPtrInput` via:
//
//	        RedisSpecTlsArgs{...}
//
//	or:
//
//	        nil
type RedisSpecTlsPtrInput interface {
	pulumi.Input

	ToRedisSpecTlsPtrOutput() RedisSpecTlsPtrOutput
	ToRedisSpecTlsPtrOutputWithContext(context.Context) RedisSpecTlsPtrOutput
}

type redisSpecTlsPtrType RedisSpecTlsArgs

func RedisSpecTlsPtr(v *RedisSpecTlsArgs) RedisSpecTlsPtrInput {
	return (*redisSpecTlsPtrType)(v)
}

func (*redisSpecTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecTls)(nil)).Elem()
}

func (i *redisSpecTlsPtrType) ToRedisSpecTlsPtrOutput() RedisSpecTlsPtrOutput {
	return i.ToRedisSpecTlsPtrOutputWithContext(context.Background())
}

func (i *redisSpecTlsPtrType) ToRedisSpecTlsPtrOutputWithContext(ctx context.Context) RedisSpecTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsPtrOutput)
}

// TLS Configuration for redis instances
type RedisSpecTlsOutput struct{ *pulumi.OutputState }

func (RedisSpecTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTls)(nil)).Elem()
}

func (o RedisSpecTlsOutput) ToRedisSpecTlsOutput() RedisSpecTlsOutput {
	return o
}

func (o RedisSpecTlsOutput) ToRedisSpecTlsOutputWithContext(ctx context.Context) RedisSpecTlsOutput {
	return o
}

func (o RedisSpecTlsOutput) ToRedisSpecTlsPtrOutput() RedisSpecTlsPtrOutput {
	return o.ToRedisSpecTlsPtrOutputWithContext(context.Background())
}

func (o RedisSpecTlsOutput) ToRedisSpecTlsPtrOutputWithContext(ctx context.Context) RedisSpecTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecTls) *RedisSpecTls {
		return &v
	}).(RedisSpecTlsPtrOutput)
}

func (o RedisSpecTlsOutput) Ca() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTls) *string { return v.Ca }).(pulumi.StringPtrOutput)
}

func (o RedisSpecTlsOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTls) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

func (o RedisSpecTlsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTls) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Reference to secret which contains the certificates
func (o RedisSpecTlsOutput) Secret() RedisSpecTlsSecretOutput {
	return o.ApplyT(func(v RedisSpecTls) RedisSpecTlsSecret { return v.Secret }).(RedisSpecTlsSecretOutput)
}

type RedisSpecTlsPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecTls)(nil)).Elem()
}

func (o RedisSpecTlsPtrOutput) ToRedisSpecTlsPtrOutput() RedisSpecTlsPtrOutput {
	return o
}

func (o RedisSpecTlsPtrOutput) ToRedisSpecTlsPtrOutputWithContext(ctx context.Context) RedisSpecTlsPtrOutput {
	return o
}

func (o RedisSpecTlsPtrOutput) Elem() RedisSpecTlsOutput {
	return o.ApplyT(func(v *RedisSpecTls) RedisSpecTls {
		if v != nil {
			return *v
		}
		var ret RedisSpecTls
		return ret
	}).(RedisSpecTlsOutput)
}

func (o RedisSpecTlsPtrOutput) Ca() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Ca
	}).(pulumi.StringPtrOutput)
}

func (o RedisSpecTlsPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

func (o RedisSpecTlsPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Reference to secret which contains the certificates
func (o RedisSpecTlsPtrOutput) Secret() RedisSpecTlsSecretPtrOutput {
	return o.ApplyT(func(v *RedisSpecTls) *RedisSpecTlsSecret {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(RedisSpecTlsSecretPtrOutput)
}

// Reference to secret which contains the certificates
type RedisSpecTlsSecret struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []RedisSpecTlsSecretItems `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// RedisSpecTlsSecretInput is an input type that accepts RedisSpecTlsSecretArgs and RedisSpecTlsSecretOutput values.
// You can construct a concrete instance of `RedisSpecTlsSecretInput` via:
//
//	RedisSpecTlsSecretArgs{...}
type RedisSpecTlsSecretInput interface {
	pulumi.Input

	ToRedisSpecTlsSecretOutput() RedisSpecTlsSecretOutput
	ToRedisSpecTlsSecretOutputWithContext(context.Context) RedisSpecTlsSecretOutput
}

// Reference to secret which contains the certificates
type RedisSpecTlsSecretArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items RedisSpecTlsSecretItemsArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (RedisSpecTlsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTlsSecret)(nil)).Elem()
}

func (i RedisSpecTlsSecretArgs) ToRedisSpecTlsSecretOutput() RedisSpecTlsSecretOutput {
	return i.ToRedisSpecTlsSecretOutputWithContext(context.Background())
}

func (i RedisSpecTlsSecretArgs) ToRedisSpecTlsSecretOutputWithContext(ctx context.Context) RedisSpecTlsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsSecretOutput)
}

func (i RedisSpecTlsSecretArgs) ToRedisSpecTlsSecretPtrOutput() RedisSpecTlsSecretPtrOutput {
	return i.ToRedisSpecTlsSecretPtrOutputWithContext(context.Background())
}

func (i RedisSpecTlsSecretArgs) ToRedisSpecTlsSecretPtrOutputWithContext(ctx context.Context) RedisSpecTlsSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsSecretOutput).ToRedisSpecTlsSecretPtrOutputWithContext(ctx)
}

// RedisSpecTlsSecretPtrInput is an input type that accepts RedisSpecTlsSecretArgs, RedisSpecTlsSecretPtr and RedisSpecTlsSecretPtrOutput values.
// You can construct a concrete instance of `RedisSpecTlsSecretPtrInput` via:
//
//	        RedisSpecTlsSecretArgs{...}
//
//	or:
//
//	        nil
type RedisSpecTlsSecretPtrInput interface {
	pulumi.Input

	ToRedisSpecTlsSecretPtrOutput() RedisSpecTlsSecretPtrOutput
	ToRedisSpecTlsSecretPtrOutputWithContext(context.Context) RedisSpecTlsSecretPtrOutput
}

type redisSpecTlsSecretPtrType RedisSpecTlsSecretArgs

func RedisSpecTlsSecretPtr(v *RedisSpecTlsSecretArgs) RedisSpecTlsSecretPtrInput {
	return (*redisSpecTlsSecretPtrType)(v)
}

func (*redisSpecTlsSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecTlsSecret)(nil)).Elem()
}

func (i *redisSpecTlsSecretPtrType) ToRedisSpecTlsSecretPtrOutput() RedisSpecTlsSecretPtrOutput {
	return i.ToRedisSpecTlsSecretPtrOutputWithContext(context.Background())
}

func (i *redisSpecTlsSecretPtrType) ToRedisSpecTlsSecretPtrOutputWithContext(ctx context.Context) RedisSpecTlsSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsSecretPtrOutput)
}

// Reference to secret which contains the certificates
type RedisSpecTlsSecretOutput struct{ *pulumi.OutputState }

func (RedisSpecTlsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTlsSecret)(nil)).Elem()
}

func (o RedisSpecTlsSecretOutput) ToRedisSpecTlsSecretOutput() RedisSpecTlsSecretOutput {
	return o
}

func (o RedisSpecTlsSecretOutput) ToRedisSpecTlsSecretOutputWithContext(ctx context.Context) RedisSpecTlsSecretOutput {
	return o
}

func (o RedisSpecTlsSecretOutput) ToRedisSpecTlsSecretPtrOutput() RedisSpecTlsSecretPtrOutput {
	return o.ToRedisSpecTlsSecretPtrOutputWithContext(context.Background())
}

func (o RedisSpecTlsSecretOutput) ToRedisSpecTlsSecretPtrOutputWithContext(ctx context.Context) RedisSpecTlsSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisSpecTlsSecret) *RedisSpecTlsSecret {
		return &v
	}).(RedisSpecTlsSecretPtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecTlsSecretOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecTlsSecret) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecTlsSecretOutput) Items() RedisSpecTlsSecretItemsArrayOutput {
	return o.ApplyT(func(v RedisSpecTlsSecret) []RedisSpecTlsSecretItems { return v.Items }).(RedisSpecTlsSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o RedisSpecTlsSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisSpecTlsSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecTlsSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTlsSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type RedisSpecTlsSecretPtrOutput struct{ *pulumi.OutputState }

func (RedisSpecTlsSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisSpecTlsSecret)(nil)).Elem()
}

func (o RedisSpecTlsSecretPtrOutput) ToRedisSpecTlsSecretPtrOutput() RedisSpecTlsSecretPtrOutput {
	return o
}

func (o RedisSpecTlsSecretPtrOutput) ToRedisSpecTlsSecretPtrOutputWithContext(ctx context.Context) RedisSpecTlsSecretPtrOutput {
	return o
}

func (o RedisSpecTlsSecretPtrOutput) Elem() RedisSpecTlsSecretOutput {
	return o.ApplyT(func(v *RedisSpecTlsSecret) RedisSpecTlsSecret {
		if v != nil {
			return *v
		}
		var ret RedisSpecTlsSecret
		return ret
	}).(RedisSpecTlsSecretOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecTlsSecretPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisSpecTlsSecret) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
func (o RedisSpecTlsSecretPtrOutput) Items() RedisSpecTlsSecretItemsArrayOutput {
	return o.ApplyT(func(v *RedisSpecTlsSecret) []RedisSpecTlsSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(RedisSpecTlsSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o RedisSpecTlsSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisSpecTlsSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o RedisSpecTlsSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisSpecTlsSecret) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecTlsSecretItems struct {
	// key is the key to project.
	Key string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// RedisSpecTlsSecretItemsInput is an input type that accepts RedisSpecTlsSecretItemsArgs and RedisSpecTlsSecretItemsOutput values.
// You can construct a concrete instance of `RedisSpecTlsSecretItemsInput` via:
//
//	RedisSpecTlsSecretItemsArgs{...}
type RedisSpecTlsSecretItemsInput interface {
	pulumi.Input

	ToRedisSpecTlsSecretItemsOutput() RedisSpecTlsSecretItemsOutput
	ToRedisSpecTlsSecretItemsOutputWithContext(context.Context) RedisSpecTlsSecretItemsOutput
}

// Maps a string key to a path within a volume.
type RedisSpecTlsSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (RedisSpecTlsSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTlsSecretItems)(nil)).Elem()
}

func (i RedisSpecTlsSecretItemsArgs) ToRedisSpecTlsSecretItemsOutput() RedisSpecTlsSecretItemsOutput {
	return i.ToRedisSpecTlsSecretItemsOutputWithContext(context.Background())
}

func (i RedisSpecTlsSecretItemsArgs) ToRedisSpecTlsSecretItemsOutputWithContext(ctx context.Context) RedisSpecTlsSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsSecretItemsOutput)
}

// RedisSpecTlsSecretItemsArrayInput is an input type that accepts RedisSpecTlsSecretItemsArray and RedisSpecTlsSecretItemsArrayOutput values.
// You can construct a concrete instance of `RedisSpecTlsSecretItemsArrayInput` via:
//
//	RedisSpecTlsSecretItemsArray{ RedisSpecTlsSecretItemsArgs{...} }
type RedisSpecTlsSecretItemsArrayInput interface {
	pulumi.Input

	ToRedisSpecTlsSecretItemsArrayOutput() RedisSpecTlsSecretItemsArrayOutput
	ToRedisSpecTlsSecretItemsArrayOutputWithContext(context.Context) RedisSpecTlsSecretItemsArrayOutput
}

type RedisSpecTlsSecretItemsArray []RedisSpecTlsSecretItemsInput

func (RedisSpecTlsSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecTlsSecretItems)(nil)).Elem()
}

func (i RedisSpecTlsSecretItemsArray) ToRedisSpecTlsSecretItemsArrayOutput() RedisSpecTlsSecretItemsArrayOutput {
	return i.ToRedisSpecTlsSecretItemsArrayOutputWithContext(context.Background())
}

func (i RedisSpecTlsSecretItemsArray) ToRedisSpecTlsSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecTlsSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTlsSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type RedisSpecTlsSecretItemsOutput struct{ *pulumi.OutputState }

func (RedisSpecTlsSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTlsSecretItems)(nil)).Elem()
}

func (o RedisSpecTlsSecretItemsOutput) ToRedisSpecTlsSecretItemsOutput() RedisSpecTlsSecretItemsOutput {
	return o
}

func (o RedisSpecTlsSecretItemsOutput) ToRedisSpecTlsSecretItemsOutputWithContext(ctx context.Context) RedisSpecTlsSecretItemsOutput {
	return o
}

// key is the key to project.
func (o RedisSpecTlsSecretItemsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecTlsSecretItems) string { return v.Key }).(pulumi.StringOutput)
}

// mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o RedisSpecTlsSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecTlsSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o RedisSpecTlsSecretItemsOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RedisSpecTlsSecretItems) string { return v.Path }).(pulumi.StringOutput)
}

type RedisSpecTlsSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecTlsSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecTlsSecretItems)(nil)).Elem()
}

func (o RedisSpecTlsSecretItemsArrayOutput) ToRedisSpecTlsSecretItemsArrayOutput() RedisSpecTlsSecretItemsArrayOutput {
	return o
}

func (o RedisSpecTlsSecretItemsArrayOutput) ToRedisSpecTlsSecretItemsArrayOutputWithContext(ctx context.Context) RedisSpecTlsSecretItemsArrayOutput {
	return o
}

func (o RedisSpecTlsSecretItemsArrayOutput) Index(i pulumi.IntInput) RedisSpecTlsSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecTlsSecretItems {
		return vs[0].([]RedisSpecTlsSecretItems)[vs[1].(int)]
	}).(RedisSpecTlsSecretItemsOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type RedisSpecTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// RedisSpecTolerationsInput is an input type that accepts RedisSpecTolerationsArgs and RedisSpecTolerationsOutput values.
// You can construct a concrete instance of `RedisSpecTolerationsInput` via:
//
//	RedisSpecTolerationsArgs{...}
type RedisSpecTolerationsInput interface {
	pulumi.Input

	ToRedisSpecTolerationsOutput() RedisSpecTolerationsOutput
	ToRedisSpecTolerationsOutputWithContext(context.Context) RedisSpecTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type RedisSpecTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RedisSpecTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTolerations)(nil)).Elem()
}

func (i RedisSpecTolerationsArgs) ToRedisSpecTolerationsOutput() RedisSpecTolerationsOutput {
	return i.ToRedisSpecTolerationsOutputWithContext(context.Background())
}

func (i RedisSpecTolerationsArgs) ToRedisSpecTolerationsOutputWithContext(ctx context.Context) RedisSpecTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTolerationsOutput)
}

// RedisSpecTolerationsArrayInput is an input type that accepts RedisSpecTolerationsArray and RedisSpecTolerationsArrayOutput values.
// You can construct a concrete instance of `RedisSpecTolerationsArrayInput` via:
//
//	RedisSpecTolerationsArray{ RedisSpecTolerationsArgs{...} }
type RedisSpecTolerationsArrayInput interface {
	pulumi.Input

	ToRedisSpecTolerationsArrayOutput() RedisSpecTolerationsArrayOutput
	ToRedisSpecTolerationsArrayOutputWithContext(context.Context) RedisSpecTolerationsArrayOutput
}

type RedisSpecTolerationsArray []RedisSpecTolerationsInput

func (RedisSpecTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecTolerations)(nil)).Elem()
}

func (i RedisSpecTolerationsArray) ToRedisSpecTolerationsArrayOutput() RedisSpecTolerationsArrayOutput {
	return i.ToRedisSpecTolerationsArrayOutputWithContext(context.Background())
}

func (i RedisSpecTolerationsArray) ToRedisSpecTolerationsArrayOutputWithContext(ctx context.Context) RedisSpecTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisSpecTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type RedisSpecTolerationsOutput struct{ *pulumi.OutputState }

func (RedisSpecTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisSpecTolerations)(nil)).Elem()
}

func (o RedisSpecTolerationsOutput) ToRedisSpecTolerationsOutput() RedisSpecTolerationsOutput {
	return o
}

func (o RedisSpecTolerationsOutput) ToRedisSpecTolerationsOutputWithContext(ctx context.Context) RedisSpecTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o RedisSpecTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o RedisSpecTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o RedisSpecTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o RedisSpecTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisSpecTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o RedisSpecTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisSpecTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RedisSpecTolerationsArrayOutput struct{ *pulumi.OutputState }

func (RedisSpecTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisSpecTolerations)(nil)).Elem()
}

func (o RedisSpecTolerationsArrayOutput) ToRedisSpecTolerationsArrayOutput() RedisSpecTolerationsArrayOutput {
	return o
}

func (o RedisSpecTolerationsArrayOutput) ToRedisSpecTolerationsArrayOutputWithContext(ctx context.Context) RedisSpecTolerationsArrayOutput {
	return o
}

func (o RedisSpecTolerationsArrayOutput) Index(i pulumi.IntInput) RedisSpecTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisSpecTolerations {
		return vs[0].([]RedisSpecTolerations)[vs[1].(int)]
	}).(RedisSpecTolerationsOutput)
}

// RedisStatus defines the observed state of Redis
type RedisStatus struct {
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInput)(nil)).Elem(), RedisSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPtrInput)(nil)).Elem(), RedisSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAclInput)(nil)).Elem(), RedisSpecAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAclPtrInput)(nil)).Elem(), RedisSpecAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAclSecretInput)(nil)).Elem(), RedisSpecAclSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAclSecretPtrInput)(nil)).Elem(), RedisSpecAclSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAclSecretItemsInput)(nil)).Elem(), RedisSpecAclSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAclSecretItemsArrayInput)(nil)).Elem(), RedisSpecAclSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityInput)(nil)).Elem(), RedisSpecAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPtrInput)(nil)).Elem(), RedisSpecAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPtrInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayInput)(nil)).Elem(), RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityInput)(nil)).Elem(), RedisSpecAffinityPodAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPtrInput)(nil)).Elem(), RedisSpecAffinityPodAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPtrInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvInput)(nil)).Elem(), RedisSpecEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvArrayInput)(nil)).Elem(), RedisSpecEnvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromInput)(nil)).Elem(), RedisSpecEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromPtrInput)(nil)).Elem(), RedisSpecEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromConfigMapKeyRefInput)(nil)).Elem(), RedisSpecEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromConfigMapKeyRefPtrInput)(nil)).Elem(), RedisSpecEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromFieldRefInput)(nil)).Elem(), RedisSpecEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromFieldRefPtrInput)(nil)).Elem(), RedisSpecEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromResourceFieldRefInput)(nil)).Elem(), RedisSpecEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromResourceFieldRefPtrInput)(nil)).Elem(), RedisSpecEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromSecretKeyRefInput)(nil)).Elem(), RedisSpecEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecEnvValueFromSecretKeyRefPtrInput)(nil)).Elem(), RedisSpecEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerInput)(nil)).Elem(), RedisSpecInitContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerPtrInput)(nil)).Elem(), RedisSpecInitContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvInput)(nil)).Elem(), RedisSpecInitContainerEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvArrayInput)(nil)).Elem(), RedisSpecInitContainerEnvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromPtrInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromConfigMapKeyRefInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromFieldRefInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromFieldRefPtrInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromResourceFieldRefInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromResourceFieldRefPtrInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromSecretKeyRefInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerEnvValueFromSecretKeyRefPtrInput)(nil)).Elem(), RedisSpecInitContainerEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerResourcesInput)(nil)).Elem(), RedisSpecInitContainerResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerResourcesPtrInput)(nil)).Elem(), RedisSpecInitContainerResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerResourcesClaimsInput)(nil)).Elem(), RedisSpecInitContainerResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecInitContainerResourcesClaimsArrayInput)(nil)).Elem(), RedisSpecInitContainerResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigInput)(nil)).Elem(), RedisSpecKubernetesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigPtrInput)(nil)).Elem(), RedisSpecKubernetesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigImagePullSecretsInput)(nil)).Elem(), RedisSpecKubernetesConfigImagePullSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigImagePullSecretsArrayInput)(nil)).Elem(), RedisSpecKubernetesConfigImagePullSecretsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigRedisSecretInput)(nil)).Elem(), RedisSpecKubernetesConfigRedisSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigRedisSecretPtrInput)(nil)).Elem(), RedisSpecKubernetesConfigRedisSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigResourcesInput)(nil)).Elem(), RedisSpecKubernetesConfigResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigResourcesPtrInput)(nil)).Elem(), RedisSpecKubernetesConfigResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigResourcesClaimsInput)(nil)).Elem(), RedisSpecKubernetesConfigResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigResourcesClaimsArrayInput)(nil)).Elem(), RedisSpecKubernetesConfigResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigServiceInput)(nil)).Elem(), RedisSpecKubernetesConfigServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigServicePtrInput)(nil)).Elem(), RedisSpecKubernetesConfigServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategyInput)(nil)).Elem(), RedisSpecKubernetesConfigUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategyPtrInput)(nil)).Elem(), RedisSpecKubernetesConfigUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategyRollingUpdateInput)(nil)).Elem(), RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrInput)(nil)).Elem(), RedisSpecKubernetesConfigUpdateStrategyRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecLivenessProbeInput)(nil)).Elem(), RedisSpecLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecLivenessProbePtrInput)(nil)).Elem(), RedisSpecLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextInput)(nil)).Elem(), RedisSpecPodSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextPtrInput)(nil)).Elem(), RedisSpecPodSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextSeLinuxOptionsInput)(nil)).Elem(), RedisSpecPodSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextSeLinuxOptionsPtrInput)(nil)).Elem(), RedisSpecPodSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextSeccompProfileInput)(nil)).Elem(), RedisSpecPodSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextSeccompProfilePtrInput)(nil)).Elem(), RedisSpecPodSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextSysctlsInput)(nil)).Elem(), RedisSpecPodSecurityContextSysctlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextSysctlsArrayInput)(nil)).Elem(), RedisSpecPodSecurityContextSysctlsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextWindowsOptionsInput)(nil)).Elem(), RedisSpecPodSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecPodSecurityContextWindowsOptionsPtrInput)(nil)).Elem(), RedisSpecPodSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecReadinessProbeInput)(nil)).Elem(), RedisSpecReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecReadinessProbePtrInput)(nil)).Elem(), RedisSpecReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisConfigInput)(nil)).Elem(), RedisSpecRedisConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisConfigPtrInput)(nil)).Elem(), RedisSpecRedisConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterInput)(nil)).Elem(), RedisSpecRedisExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterPtrInput)(nil)).Elem(), RedisSpecRedisExporterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvInput)(nil)).Elem(), RedisSpecRedisExporterEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvArrayInput)(nil)).Elem(), RedisSpecRedisExporterEnvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromPtrInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromConfigMapKeyRefInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromFieldRefInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromFieldRefPtrInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromResourceFieldRefInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromSecretKeyRefInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrInput)(nil)).Elem(), RedisSpecRedisExporterEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterResourcesInput)(nil)).Elem(), RedisSpecRedisExporterResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterResourcesPtrInput)(nil)).Elem(), RedisSpecRedisExporterResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterResourcesClaimsInput)(nil)).Elem(), RedisSpecRedisExporterResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecRedisExporterResourcesClaimsArrayInput)(nil)).Elem(), RedisSpecRedisExporterResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextInput)(nil)).Elem(), RedisSpecSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextPtrInput)(nil)).Elem(), RedisSpecSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextCapabilitiesInput)(nil)).Elem(), RedisSpecSecurityContextCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextCapabilitiesPtrInput)(nil)).Elem(), RedisSpecSecurityContextCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextSeLinuxOptionsInput)(nil)).Elem(), RedisSpecSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextSeLinuxOptionsPtrInput)(nil)).Elem(), RedisSpecSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextSeccompProfileInput)(nil)).Elem(), RedisSpecSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextSeccompProfilePtrInput)(nil)).Elem(), RedisSpecSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextWindowsOptionsInput)(nil)).Elem(), RedisSpecSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSecurityContextWindowsOptionsPtrInput)(nil)).Elem(), RedisSpecSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsInput)(nil)).Elem(), RedisSpecSidecarsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsArrayInput)(nil)).Elem(), RedisSpecSidecarsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvInput)(nil)).Elem(), RedisSpecSidecarsEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvArrayInput)(nil)).Elem(), RedisSpecSidecarsEnvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromPtrInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromConfigMapKeyRefInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromConfigMapKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromFieldRefInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromFieldRefPtrInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromResourceFieldRefInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromResourceFieldRefPtrInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromSecretKeyRefInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsEnvValueFromSecretKeyRefPtrInput)(nil)).Elem(), RedisSpecSidecarsEnvValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsMountPathInput)(nil)).Elem(), RedisSpecSidecarsMountPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsMountPathArrayInput)(nil)).Elem(), RedisSpecSidecarsMountPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsPortsInput)(nil)).Elem(), RedisSpecSidecarsPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsPortsArrayInput)(nil)).Elem(), RedisSpecSidecarsPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsResourcesInput)(nil)).Elem(), RedisSpecSidecarsResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsResourcesPtrInput)(nil)).Elem(), RedisSpecSidecarsResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsResourcesClaimsInput)(nil)).Elem(), RedisSpecSidecarsResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecSidecarsResourcesClaimsArrayInput)(nil)).Elem(), RedisSpecSidecarsResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageInput)(nil)).Elem(), RedisSpecStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStoragePtrInput)(nil)).Elem(), RedisSpecStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplatePtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecPtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSourceInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResourcesInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelectorInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatusInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatusPtrInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatusConditionsInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeClaimTemplateStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountInput)(nil)).Elem(), RedisSpecStorageVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountMountPathInput)(nil)).Elem(), RedisSpecStorageVolumeMountMountPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountMountPathArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountMountPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureDiskInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeAzureDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureDiskPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeAzureDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureFileInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeAzureFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeAzureFilePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeAzureFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCephfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfsPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCephfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfsSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCephfsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinderInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCinderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinderPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCinderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinderSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCinderSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMapInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMapPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMapItemsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeConfigMapItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeConfigMapItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsiInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsiPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEmptyDirInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEmptyDirPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFcInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFcPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolumeInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFlexVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolumePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFlexVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlockerInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFlockerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeFlockerPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeFlockerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGcePersistentDiskInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeGcePersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGitRepoInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeGitRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGitRepoPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeGitRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGlusterfsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeGlusterfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeGlusterfsPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeGlusterfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeHostPathInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeHostPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeHostPathPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeHostPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsiInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeIscsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsiPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeIscsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsiSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeIscsiSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeNfsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeNfsPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePersistentVolumeClaimInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumePersistentVolumeClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePhotonPersistentDiskInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumePhotonPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePortworxVolumeInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumePortworxVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumePortworxVolumePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumePortworxVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeQuobyteInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeQuobyteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeQuobytePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeQuobyteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbdInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeRbdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbdPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeRbdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbdSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeRbdSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIoInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeScaleIoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIoPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeScaleIoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIoSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeScaleIoSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecretInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecretPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecretItemsInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeSecretItemsArrayInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageosInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeStorageosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageosPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeStorageosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageosSecretRefInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeStorageosSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeVsphereVolumeInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecStorageVolumeMountVolumeVsphereVolumePtrInput)(nil)).Elem(), RedisSpecStorageVolumeMountVolumeVsphereVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTlsInput)(nil)).Elem(), RedisSpecTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTlsPtrInput)(nil)).Elem(), RedisSpecTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTlsSecretInput)(nil)).Elem(), RedisSpecTlsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTlsSecretPtrInput)(nil)).Elem(), RedisSpecTlsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTlsSecretItemsInput)(nil)).Elem(), RedisSpecTlsSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTlsSecretItemsArrayInput)(nil)).Elem(), RedisSpecTlsSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTolerationsInput)(nil)).Elem(), RedisSpecTolerationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedisSpecTolerationsArrayInput)(nil)).Elem(), RedisSpecTolerationsArray{})
	pulumi.RegisterOutputType(RedisSpecOutput{})
	pulumi.RegisterOutputType(RedisSpecPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAclOutput{})
	pulumi.RegisterOutputType(RedisSpecAclPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAclSecretOutput{})
	pulumi.RegisterOutputType(RedisSpecAclSecretPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAclSecretItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecAclSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerResourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerResourcesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerResourcesClaimsOutput{})
	pulumi.RegisterOutputType(RedisSpecInitContainerResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigImagePullSecretsOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigImagePullSecretsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigRedisSecretOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigRedisSecretPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigResourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigResourcesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigResourcesClaimsOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigServiceOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigServicePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigUpdateStrategyOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigUpdateStrategyPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigUpdateStrategyRollingUpdateOutput{})
	pulumi.RegisterOutputType(RedisSpecKubernetesConfigUpdateStrategyRollingUpdatePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecLivenessProbeOutput{})
	pulumi.RegisterOutputType(RedisSpecLivenessProbePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextSeccompProfileOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextSeccompProfilePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextSysctlsOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextSysctlsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(RedisSpecPodSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecReadinessProbeOutput{})
	pulumi.RegisterOutputType(RedisSpecReadinessProbePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisConfigOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisConfigPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterResourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterResourcesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterResourcesClaimsOutput{})
	pulumi.RegisterOutputType(RedisSpecRedisExporterResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextCapabilitiesOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextSeccompProfileOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextSeccompProfilePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(RedisSpecSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsMountPathOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsMountPathArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsPortsOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsPortsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsResourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsResourcesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsResourcesClaimsOutput{})
	pulumi.RegisterOutputType(RedisSpecSidecarsResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageOutput{})
	pulumi.RegisterOutputType(RedisSpecStoragePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecDataSourceOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecResourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateStatusOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateStatusPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateStatusConditionsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountMountPathOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountMountPathArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStoreOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeAwsElasticBlockStorePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeAzureDiskOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeAzureDiskPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeAzureFileOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeAzureFilePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCephfsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCephfsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCephfsSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCephfsSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCinderOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCinderPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCinderSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCinderSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeConfigMapOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeConfigMapPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeConfigMapItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCsiOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCsiPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeCsiNodePublishSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeDownwardApiItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEmptyDirOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEmptyDirPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFcOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFcPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFlexVolumeOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFlexVolumePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFlexVolumeSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFlockerOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeFlockerPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeGcePersistentDiskOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeGcePersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeGitRepoOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeGitRepoPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeGlusterfsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeGlusterfsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeHostPathOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeHostPathPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeIscsiOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeIscsiPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeIscsiSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeIscsiSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeNfsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeNfsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumePersistentVolumeClaimPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumePhotonPersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumePortworxVolumeOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumePortworxVolumePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesDownwardApiItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeProjectedSourcesServiceAccountTokenPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeQuobyteOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeQuobytePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeRbdOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeRbdPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeRbdSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeRbdSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeScaleIoOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeScaleIoPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeScaleIoSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeSecretOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeSecretPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeSecretItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeStorageosOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeStorageosPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeStorageosSecretRefOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeStorageosSecretRefPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeVsphereVolumeOutput{})
	pulumi.RegisterOutputType(RedisSpecStorageVolumeMountVolumeVsphereVolumePtrOutput{})
	pulumi.RegisterOutputType(RedisSpecTlsOutput{})
	pulumi.RegisterOutputType(RedisSpecTlsPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecTlsSecretOutput{})
	pulumi.RegisterOutputType(RedisSpecTlsSecretPtrOutput{})
	pulumi.RegisterOutputType(RedisSpecTlsSecretItemsOutput{})
	pulumi.RegisterOutputType(RedisSpecTlsSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(RedisSpecTolerationsOutput{})
	pulumi.RegisterOutputType(RedisSpecTolerationsArrayOutput{})
}
