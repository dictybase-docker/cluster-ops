// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Redis is the Schema for the redis API
type Redis struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// RedisSpec defines the desired state of Redis
	Spec RedisSpecOutput `pulumi:"spec"`
	// RedisStatus defines the observed state of Redis
	Status pulumi.MapOutput `pulumi:"status"`
}

// NewRedis registers a new resource with the given unique name, arguments, and options.
func NewRedis(ctx *pulumi.Context,
	name string, args *RedisArgs, opts ...pulumi.ResourceOption) (*Redis, error) {
	if args == nil {
		args = &RedisArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("redis.redis.opstreelabs.in/v1beta2")
	args.Kind = pulumi.StringPtr("Redis")
	if args.Spec != nil {
		args.Spec = args.Spec.ToRedisSpecPtrOutput().ApplyT(func(v *RedisSpec) *RedisSpec { return v.Defaults() }).(RedisSpecPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Redis
	err := ctx.RegisterResource("kubernetes:redis.redis.opstreelabs.in/v1beta2:Redis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedis gets an existing Redis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisState, opts ...pulumi.ResourceOption) (*Redis, error) {
	var resource Redis
	err := ctx.ReadResource("kubernetes:redis.redis.opstreelabs.in/v1beta2:Redis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Redis resources.
type redisState struct {
}

type RedisState struct {
}

func (RedisState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisState)(nil)).Elem()
}

type redisArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// RedisSpec defines the desired state of Redis
	Spec *RedisSpec `pulumi:"spec"`
	// RedisStatus defines the observed state of Redis
	Status map[string]interface{} `pulumi:"status"`
}

// The set of arguments for constructing a Redis resource.
type RedisArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// RedisSpec defines the desired state of Redis
	Spec RedisSpecPtrInput
	// RedisStatus defines the observed state of Redis
	Status pulumi.MapInput
}

func (RedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisArgs)(nil)).Elem()
}

type RedisInput interface {
	pulumi.Input

	ToRedisOutput() RedisOutput
	ToRedisOutputWithContext(ctx context.Context) RedisOutput
}

func (*Redis) ElementType() reflect.Type {
	return reflect.TypeOf((**Redis)(nil)).Elem()
}

func (i *Redis) ToRedisOutput() RedisOutput {
	return i.ToRedisOutputWithContext(context.Background())
}

func (i *Redis) ToRedisOutputWithContext(ctx context.Context) RedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisOutput)
}

type RedisOutput struct{ *pulumi.OutputState }

func (RedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Redis)(nil)).Elem()
}

func (o RedisOutput) ToRedisOutput() RedisOutput {
	return o
}

func (o RedisOutput) ToRedisOutputWithContext(ctx context.Context) RedisOutput {
	return o
}

func (o RedisOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o RedisOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RedisOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Redis) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RedisSpec defines the desired state of Redis
func (o RedisOutput) Spec() RedisSpecOutput {
	return o.ApplyT(func(v *Redis) RedisSpecOutput { return v.Spec }).(RedisSpecOutput)
}

// RedisStatus defines the observed state of Redis
func (o RedisOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *Redis) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedisInput)(nil)).Elem(), &Redis{})
	pulumi.RegisterOutputType(RedisOutput{})
}
